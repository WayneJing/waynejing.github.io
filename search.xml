<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux 内核学习——Chapter 1 绪论</title>
    <url>/2020/03/17/Linux-%E5%86%85%E6%A0%B8%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94Chapter-1-%E7%BB%AA%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="关于linux的硬件的依赖性"><a href="#关于linux的硬件的依赖性" class="headerlink" title="关于linux的硬件的依赖性"></a>关于linux的硬件的依赖性</h1><p>linux 试图在与硬件无关的源代码与硬件相关的源代码之间保持清晰地界限。因此，在linux系统的<code>arch</code>和<code>include</code>文件夹下包含了23个子目录，以对应Linux所支持的不同硬件平台。</p>
<ul>
<li>alpha</li>
<li>arm, arm26</li>
<li>cris</li>
<li>frv</li>
<li>h8300</li>
<li>i386</li>
<li>ia64</li>
<li>m32r</li>
<li>m68k, m68knommu</li>
<li>mips</li>
<li>parisc</li>
<li>ppc, ppc64</li>
<li>s390</li>
<li>sh, sh64</li>
<li>sparc, sparc64</li>
<li>um</li>
<li>v850</li>
<li>x86_64</li>
</ul>
<h1 id="操作系统的基本概念"><a href="#操作系统的基本概念" class="headerlink" title="操作系统的基本概念"></a>操作系统的基本概念</h1><p>任何计算机系统都包含一个名为操作系统的结伴程序集合。<strong>在这个集合中，最重要的程序被称为内核(kernel)。</strong> 当操作系统运行是，内核被装入到RAM，内核中包含了系统运行必不可少的很多核心过程(procedure)。<br>内核也为系统中所有的事情提供了主要功能，并决定高层软件的很多特性，因此经常使用术语“操作系统”来指代“内核”。</p>
<p>操作系统必须完成两个主要目标：</p>
<ul>
<li>与硬件部分进行交互， 为包含在硬件平台上的所有底层可编程部件提供服务</li>
<li>为运行在计算机系统上的应用程序（即所谓用户程序）提供执行环境</li>
</ul>
<p>一些操作系统允许所有的用户程序都直接与硬件部分进行交互（经典的例子就是DOS系统），而<strong>类Unix</strong>系统把计算机无力组织相关的所有低层细节都对用户运行的程序隐藏起来。当程序想要使用硬件资源时，必须向操作系统发送请求，经过内核对该请求评估允许之后，内核会代表应用程序与相关的硬件部分进行交互。</p>
<p>为了实施这种机制，现代操作系统依靠了特殊的硬件特性来禁止用户程序直接与低层硬件进行交互。特别的，硬件为CPU引入了至少两种不同的执行模式：<strong>用户程序的非特权模式和内核的特权模式</strong>。 Unix把它们分别称为用户态(user mode)和内核态(kernel mode)。</p>
<h2 id="多用户系统"><a href="#多用户系统" class="headerlink" title="多用户系统"></a>多用户系统</h2><p>多用户系统(multiuser system)是指一台能并发和独立的执行分别属于两个或多个用户的若干应用程序的计算机。</p>
<blockquote>
<ul>
<li><strong>并发(concurrently)</strong>——意味着几个应用程序能同时处于活动状态并竞争各种资源，如CPU、内存、硬盘等</li>
<li><strong>独立(independently)</strong>——意味着每个应用程序能够执行自己的任务，而无需考虑其他用户的应用程序在干些什么。</li>
</ul>
</blockquote>
<p>多用户的操作系统必须包含以下几个特点：</p>
<ul>
<li>核实用户身份的认证机制</li>
<li>防止有错误的用户程序妨碍其他应用程序在系统运行的保护机制</li>
<li>防止有恶意的用户程序干涉或窥视其它用户的活动的保护机制</li>
<li>限制分配给每个用户的资源数的记账机制</li>
</ul>
<p>为了实现以上的安全保护机制，操作系统必须利用与CPU特权模式相关的硬件保护机制。</p>
<h2 id="用户和组"><a href="#用户和组" class="headerlink" title="用户和组"></a>用户和组</h2><p>在多用户系统中，每个用户在机器上都有私有空间。<strong>操作系统必须保证用户空间的私有部分仅仅对其拥有者是可见的。</strong> 特别是必须保证，没有用户能够开发一个用于侵犯其它用户私有空间的应用程序。</p>
<p>所有的用户有一个唯一的数字来标识，成为用户标识符(UserID, UID)。</p>
<p>为了和其他用户有选择的共享资料，每一个用户是一个或者多个用户组的一名成员，组由唯一的用户组标识符(user group ID)来标识，每个文件也恰好与一个组相对应。拥有文件的用户对文件具有读写权限，同组用户仅有只读权限，其他用户没有访问权限。</p>
<p>任何的类Unix系统中都有一个特殊的用户，叫做root，即超级用户(superuser)。root用户几乎无所不能，因为操作系统对它不使用通常的保护机制，因此它能访问系统中的每一个文件，能干涉每一个正在实行的用户程序活动。</p>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>所有的操作系统都是用一种基本的抽象：进程(process)。在传统的操作系统中，一个进程在地址空间中执行一个单独的指令序列。</p>
<blockquote>
<p>进程：程序执行时的一个实例，或者一个运行程序的“执行上下文”</p>
<p>地址空间： 允许进程引用的内存地址的集合</p>
</blockquote>
<p>现代操作系统允许具有多个执行流的进程，即，相同的地址空间可执行多个指令序列。</p>
<p>多用户系统必须支持一种执行环境，在这种执行环境里，几个进程能并发活动并能竞争系统资源。允许进程并发活佛那个的系统称为multiprogramming或者multiprocessing</p>
<p>注意区分程序和进程：几个进程能并发的执行同一程序，而同一个进程能顺序的执行几个程序</p>
<p>一般的来说，CPU的个数总是有限的，因此只有少数几个进程能同时执行，操作系统通过调度程序(scheduler)决定哪个进程能执行。 </p>
<p>多用户系统中的进程必须是抢占式的(preemptable)；操作系统记录下每个进程占有的CPU时间，并周期性的激活调度程序。</p>
<p>而非抢占式的系统只有当进程自愿放弃CPU时，调度程序才被调用。</p>
<p>类unix系统采用进程/内核模式。每个进程都自以为它是系统中唯一的进程，可以独占操作系统所提供的服务。当进城发出系统调用，硬件会把特权模式从user mode变成kernel mode，然后进程以非常有限的目的开始一个内核过程的执行。一旦这个请求完全得到满足，内核过程将迫使硬件返回user mode</p>
<a id="more"></a>
<h2 id="内核体系结构"><a href="#内核体系结构" class="headerlink" title="内核体系结构"></a>内核体系结构</h2><p>不甚理解</p>
<h1 id="Unix文件系统概述"><a href="#Unix文件系统概述" class="headerlink" title="Unix文件系统概述"></a>Unix文件系统概述</h1><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>从用户的观点来看，文件被组织在一个树结构的命名空间中，</p>
<p><img src="\images\image-20200317213808105.png" alt="image-20200317213808105"></p>
<h2 id="硬链接和软链接"><a href="#硬链接和软链接" class="headerlink" title="硬链接和软链接"></a>硬链接和软链接</h2><p>包含在目录中的文件名就是一个文件的硬链接。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln P1 P2</span><br></pre></td></tr></table></figure>
<p>通过以上命令来创建一个新的硬链接，即为由路径<code>P1</code>表示的文件创建一个路径名为<code>P2</code>的硬链接。</p>
<p>但是硬链接有两个方面的限制：</p>
<ul>
<li>不允许用户给目录创建硬链接。应为这可能把目录树变为环形图，从而不可能通过名字定位一个文件。</li>
<li>只有在同一文件系统中的文件之间才能创建链接。这带来比较大的限制，因为现代Unix系统可能包含了多种文件系统，这些文件系统位于不同的磁盘和/或分区，用户也许无法知道它们之间的物理划分。</li>
</ul>
<p>为了克服这些限制，引入了软链接(soft link)也被称作符号链接。符号链接是短文件，这些文件包含有另一个文件的任意一个路径名。路径名可以指向位于任意一个文件系统的任意文件或目录，甚至可以指向一个不存在的文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s P1 P2</span><br></pre></td></tr></table></figure>
<p>创建一个路径名为<code>P2</code>的新软链接，P2指向路径名为P1。任何对P2的因勇斗可以被自动转换成指向P1的一个引用。</p>
<h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><p>Unix文件可以是下列类型之一：</p>
<ul>
<li>普通文件</li>
<li>目录</li>
<li>符号链接</li>
<li>面向块的设备文件(block-oriented device file)</li>
<li>面向字符的设备文件(character-oriented device file)</li>
<li>管道(pipe)和命名管道(named pipe)也叫 FIFO</li>
<li>套接字(socket)</li>
</ul>
<p>前三种文件类型是所有Unix文件系统的基本类型。</p>
<p>设备文件与与集成到内核中的设备驱动程序相关。</p>
<h2 id="文件描述符与索引节点"><a href="#文件描述符与索引节点" class="headerlink" title="文件描述符与索引节点"></a>文件描述符与索引节点</h2><p>Unix对 <strong>文件的内容</strong> 和 <strong>描述文件的信息</strong>给出了清楚的区分。除了设备文件和特殊文件系统文件外，每个文件都有字符序列组成。文件内容不包含任何<strong>控制信息</strong>，如文件长度或文件结束符(EOF)。</p>
<p>文件系统处理文件需要的所有信息包含在一个名为索引节点(inode)的数据结构中。每个文件都有自己的索引节点，文件系统用索引节点来标识文件。</p>
<p>每个索引节点可能随着Unix系统不同其内容有所差异，但是至少满足POSIX标准中如下属性：</p>
<ul>
<li>文件类型</li>
<li>与文件相关的硬链接个数</li>
<li>以字节为单位的文件长度</li>
<li>设备标识符</li>
<li>在文件系统中标识文件的索引节点号</li>
<li>文件拥有者的UID</li>
<li>文件的用户组ID</li>
<li>几个时间戳，表示索引节点状态改变的时间、最后访问时间及最后修改时间。</li>
<li>访问权限和文件模式</li>
</ul>
<h2 id="访问权限和文件模式"><a href="#访问权限和文件模式" class="headerlink" title="访问权限和文件模式"></a>访问权限和文件模式</h2><p>文件的潜在用户分为三种类型：</p>
<ul>
<li>作为文件所有者的用户</li>
<li>同组用户，不包括所有者</li>
<li>其他</li>
</ul>
<p>而访问权限有三种读、写、执行，因此文件访问权限就用九种不同的二进制来标记。还有两种附加的标记即suid(set user ID), sgid(set group id)。</p>
<h2 id="文件操作的系统调用"><a href="#文件操作的系统调用" class="headerlink" title="文件操作的系统调用"></a>文件操作的系统调用</h2><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fd = open (path, flag, mode)</span><br></pre></td></tr></table></figure>
<p>返回一个文件对象</p>
<h3 id="访问打开的文件"><a href="#访问打开的文件" class="headerlink" title="访问打开的文件"></a>访问打开的文件</h3><p>顺序访问是文件的默认访问方式，即<code>read()</code>和<code>write()</code>系统调用总是从文件指针的当前位置开始读写，而修改文件指针则可通过以下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">newoffset = lseek(fd, offset, <span class="built_in">whence</span>);</span><br></pre></td></tr></table></figure>
<p>whence指定了文件指针的新位置的计算方式：</p>
<ul>
<li>offset + 0</li>
<li>offset + 当前指针位置</li>
<li>offset + 文件末尾</li>
</ul>
<p>而<code>read()</code>需要以下参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nread = <span class="built_in">read</span>(fd, buf, count);</span><br></pre></td></tr></table></figure>
<h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">res = close(fd);</span><br></pre></td></tr></table></figure>
<h3 id="更名及删除文件"><a href="#更名及删除文件" class="headerlink" title="更名及删除文件"></a>更名及删除文件</h3><p>更名并不对文件的内容起作用，而是对一个或多个目录的内容起作用。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">res = rename(oldpath, newpath);</span><br></pre></td></tr></table></figure>
<p>而删除本质上是减少文件链接数，当连接数为0，文件才被真正的删除</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">res = unlink(pathname);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 33.搜索旋转排序数组</title>
    <url>/2020/01/10/LeetCode-33-%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>
<p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p>
<p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p>
<p>你可以假设数组中不存在重复的元素。</p>
<p>你的算法时间复杂度必须是 O(log n) 级别。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 0</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><br><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 3</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure><br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/search-in-rotated-sorted-array</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="线性遍历"><a href="#线性遍历" class="headerlink" title="线性遍历"></a>线性遍历</h2><p>不谈</p>
<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><ol>
<li>nums[left] &lt;= nums[mid]（left - mid不包含旋转）且nums[left] &lt;= target &lt;= nums[mid] 时 high 向前规约；</li>
<li>nums[mid] &lt; nums[left]（left - mid包含旋转），target &lt;= nums[mid] &lt; nums[left] 时向前规约（target 在旋转位置到 mid 之间）</li>
<li>nums[mid] &lt; nums[left]，nums[mid] &lt; nums[left] &lt;= target 时向前规约（target 在 left 到旋转位置之间）</li>
<li>其他情况向后规约</li>
</ol>
<p><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = len(nums) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = low + (high - low) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> target == nums[mid]:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">if</span> nums[low] &lt;= nums[mid]:</span><br><span class="line">            <span class="keyword">if</span> target &gt;= nums[low] <span class="keyword">and</span> target &lt; nums[mid]:</span><br><span class="line">                high = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> target &gt; nums[mid] <span class="keyword">and</span> target &lt;= nums[high]:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><br><a id="more"></a><br><strong>C++解法</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lo = <span class="number">0</span>, hi = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> ((nums[left] &gt; target) ^ (nums[left] &gt; nums[mid]) ^ (target &gt; nums[mid]))</span><br><span class="line">            lo = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            hi = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lo == hi &amp;&amp; nums[lo] == target ? lo : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>中等</tag>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 31.下一个排列</title>
    <url>/2020/01/10/LeetCode-31-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</p>
<p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p>
<p>必须原地修改，只允许使用额外常数空间。</p>
<p>以下是一些例子，输入位于左侧列，其相应输出位于右侧列。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1,2,3 → 1,3,2</span><br><span class="line">3,2,1 → 1,2,3</span><br><span class="line">1,1,5 → 1,5,1</span><br></pre></td></tr></table></figure><br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/next-permutation" target="_blank" rel="noopener">https://leetcode-cn.com/problems/next-permutation</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ol>
<li>先找出最大的索引<code>k</code>满足<code>nums[k] &lt; nums[k+1]</code>，如果不存在就翻转整个数组</li>
<li>再找出另一个最大的索引<code>l</code>满足<code>nums[l] &gt; nums[k]</code></li>
<li>交换<code>nums[l]</code>和<code>nums[k]</code></li>
<li>最后翻转<code>nums[k+1:]</code></li>
</ol>
<p><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nextPermutation</span><span class="params">(nums: List[int])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    firstIndex = <span class="number">-1</span></span><br><span class="line">    n = len(nums)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(nums, i, j)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            nums[i],nums[j] = nums[j], nums[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> nums[i] &lt; nums[i+<span class="number">1</span>]:</span><br><span class="line">            firstIndex = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment">#print(firstIndex)</span></span><br><span class="line">    <span class="keyword">if</span> firstIndex == <span class="number">-1</span>:</span><br><span class="line">        reverse(nums, <span class="number">0</span>, n<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    secondIndex = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>, firstIndex, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> nums[i] &gt; nums[firstIndex]:</span><br><span class="line">            secondIndex = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    nums[firstIndex],nums[secondIndex] = nums[secondIndex], nums[firstIndex]</span><br><span class="line">    reverse(nums, firstIndex+<span class="number">1</span>, n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><br><a id="more"></a><br><strong>C++解法</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>中等</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 28.实现strStr()</title>
    <url>/2020/01/09/LeetCode-28-%E5%AE%9E%E7%8E%B0strStr/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: haystack &#x3D; &quot;hello&quot;, needle &#x3D; &quot;ll&quot;</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><br><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: haystack &#x3D; &quot;aaaaa&quot;, needle &#x3D; &quot;bba&quot;</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure><br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/implement-strstr" target="_blank" rel="noopener">https://leetcode-cn.com/problems/implement-strstr</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h2><p>使用双指针遍历</p>
<h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><p>KMP算法<a href="https://blog.csdn.net/starstar1992/article/details/54913261" target="_blank" rel="noopener">详细解答</a></p>
<p><strong>C++解法</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="keyword">char</span>* source, <span class="keyword">char</span>* target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(source == <span class="literal">NULL</span> || target == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Two Pointer check for target</span></span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> s1,s2,n;</span><br><span class="line">    s1= <span class="number">0</span>;</span><br><span class="line">    s2= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> * s_temp=source;</span><br><span class="line">    <span class="keyword">char</span> * t_temp=target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (*s_temp!=<span class="string">'\0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s1++;</span><br><span class="line">        s_temp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (*t_temp!=<span class="string">'\0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s2++;</span><br><span class="line">        t_temp++;</span><br><span class="line">    &#125;</span><br><span class="line">    n= s1-s2+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; s2; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (*(source+i+j) != *(target+j))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j == s2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//'target' not found:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>简单</tag>
        <tag>双指针</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 27.移除元素</title>
    <url>/2020/01/09/LeetCode-27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数&gt; 组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums &#x3D; [3,2,2,3], val &#x3D; 3,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><br><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</span><br></pre></td></tr></table></figure><br>注意这五个元素可为任意顺序。</p>
<p>你不需要考虑数组中超出新长度后面的元素。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-element" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-element</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>此题解法与前一题<a href="2020/01/02/LeetCode-26-删除排序数组中的重复项">26.删除数组中的重复项</a>很相似。<br>使用一个快指针先遍历，找到不等于目标值的元素，将该元素赋值给慢指针所指向的元素。<br><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeElement</span><span class="params">(nums, val)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :type nums: List[int]</span></span><br><span class="line"><span class="string">    :type val: int</span></span><br><span class="line"><span class="string">    :rtype: int</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        <span class="keyword">if</span>(nums[i]==val): <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nums[count] = nums[i]</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><br><a id="more"></a><br><strong>C++解法</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]==val) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            nums[count] = nums[i];</span><br><span class="line">            count ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>简单</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 26.删除排序数组中的重复项</title>
    <url>/2020/01/02/LeetCode-26-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定数组 nums &#x3D; [1,1,2], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><br><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums &#x3D; [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p> 使用两个指针，快的指针遍历所有元素，发现有重复元素就将元素值赋给慢指针所指向的元素</p>
<p><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(nums: List[int])</span> -&gt; int:</span></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> len(nums) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> len(nums)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">        <span class="keyword">if</span> nums[i] != nums[i - <span class="number">1</span>]:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">            nums[left] = nums[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> left + <span class="number">1</span></span><br></pre></td></tr></table></figure><br><a id="more"></a><br><strong>C++解法</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(nums.<span class="built_in">size</span>()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[count]!=nums[i]) nums[++count]=nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>难度</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 24.两两交换链表中的节点</title>
    <url>/2019/12/25/LeetCode-24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p>
<p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p>
<p><strong>示例:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure><br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs" target="_blank" rel="noopener">https://leetcode-cn.com/problems/swap-nodes-in-pairs</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>使用三个指针，指针A指向的是奇数位置的节点，指针B指向的是偶数位置的节点，指针C指向的是奇数位置节点的前一个节点，每次跳动两位，进行交换<br><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">    dummyHead = ListNode(<span class="number">0</span>)</span><br><span class="line">    dummyHead.next = head</span><br><span class="line">    tmp = dummyHead</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> tmp.next != <span class="literal">None</span> <span class="keyword">and</span> tmp.next.next != <span class="literal">None</span>:</span><br><span class="line">        first = tmp.next</span><br><span class="line">        second = tmp.next.next</span><br><span class="line">        tmp.next = second</span><br><span class="line">        first.next = second.next</span><br><span class="line">        second.next = first</span><br><span class="line">        tmp = first</span><br><span class="line">    <span class="keyword">return</span> dummyHead.next</span><br></pre></td></tr></table></figure><br><a id="more"></a><br><strong>C++解法</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummyHead-&gt;next = head;</span><br><span class="line">    ListNode* curr;</span><br><span class="line">    ListNode* first;</span><br><span class="line">    ListNode* second;</span><br><span class="line">    curr = dummyHead;</span><br><span class="line">    <span class="keyword">while</span>(curr-&gt;next &amp;&amp; curr-&gt;next-&gt;next)&#123;</span><br><span class="line">        first = curr-&gt;next;</span><br><span class="line">        second = curr-&gt;next-&gt;next;</span><br><span class="line">        curr-&gt;next = second;</span><br><span class="line">        first-&gt;next = second-&gt;next;</span><br><span class="line">        second-&gt;next = first;</span><br><span class="line">        curr = first;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>链表</tag>
        <tag>中等</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 23.合并K个排序链表</title>
    <url>/2019/12/25/LeetCode-23-%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p>
<p>示例:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure><br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/merge-k-sorted-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-k-sorted-lists</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>此题可以分解来看。可以把多个有序链表的合并分解为多组两个有序链表的合并。而两个有序链表的合并刚好是<a href="2019/12/25/LeetCode-21-合并两个有序链表">LeetCode 21.合并两个有序链表</a>所解决的问题。<br>那么现在问题就在如何将多个有序链表的合并分解成两个有序链表了，分治算法可以解决这个问题。<br><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(lists: List[ListNode])</span> -&gt; ListNode:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> lists:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> self._merge(lists, <span class="number">0</span>, len(lists)<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_merge</span><span class="params">(lists: List[ListNode], left: int, right: int)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> left == right:</span><br><span class="line">        <span class="keyword">return</span> lists[left]</span><br><span class="line">    mid = (left + right) // <span class="number">2</span></span><br><span class="line">    l1 = self._merge(lists, left, mid)</span><br><span class="line">    l2 = self._merge(lists, mid + <span class="number">1</span>, right)</span><br><span class="line">    <span class="keyword">return</span> self._mergeTwoLists(l1, l2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_mergeTwoLists</span><span class="params">(l1: ListNode, l2: ListNode)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> l1 == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> l2</span><br><span class="line">    <span class="keyword">if</span> l2 == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> l1</span><br><span class="line">    res = ListNode(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">        res.val = l1.val</span><br><span class="line">        res.next = self._mergeTwoLists(l1.next, l2)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res.val = l2.val</span><br><span class="line">        res.next = self._mergeTwoLists(l1, l2.next)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><br><a id="more"></a><br><strong>C++解法</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lists.empty()) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> n = lists.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">return</span> _merge(lists, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode* _merge(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists, <span class="keyword">int</span> left, <span class="keyword">int</span> right)&#123;</span><br><span class="line">    <span class="keyword">if</span> (left == right) <span class="keyword">return</span> lists[left];</span><br><span class="line">    <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">    ListNode* l1 = _merge(lists, left, mid);</span><br><span class="line">    ListNode* l2 = _merge(lists, mid + <span class="number">1</span>, right);</span><br><span class="line">    <span class="keyword">return</span> mergeTwoLists(l1, l2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!l1) <span class="keyword">return</span> l2;</span><br><span class="line">    <span class="keyword">if</span> (!l2) <span class="keyword">return</span> l1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val)&#123;</span><br><span class="line">        l1-&gt;next = mergeTwoLists(l1-&gt;next, l2);</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        l2-&gt;next = mergeTwoLists(l1, l2-&gt;next);</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>链表</tag>
        <tag>分治算法</tag>
        <tag>困难</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 22.括号生成</title>
    <url>/2019/12/25/LeetCode-22-%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。</p>
<p>例如，给出 n = 3，生成结果为：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/generate-parentheses" target="_blank" rel="noopener">https://leetcode-cn.com/problems/generate-parentheses</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>将一对括号”()”作为一个整体，插入到已有的序列中。借助了BFS的思想。<br><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateParenthesis</span><span class="params">(self, n: int)</span> -&gt; List[str]:</span></span><br><span class="line">    <span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'()'</span>]</span><br><span class="line">    stack = deque([<span class="string">'()'</span>])</span><br><span class="line">    visited = set()</span><br><span class="line">    index = n</span><br><span class="line">    <span class="keyword">while</span> index &gt; <span class="number">1</span>:</span><br><span class="line">        index -= <span class="number">1</span></span><br><span class="line">        l = len(stack)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(l):</span><br><span class="line">            tmp = stack.pop()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(tmp)):</span><br><span class="line">                tmpstr = tmp[:i] + <span class="string">'()'</span> + tmp[i:]</span><br><span class="line">                <span class="keyword">if</span> tmpstr <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                    visited.add(tmpstr)</span><br><span class="line">                    stack.appendleft(tmpstr)</span><br><span class="line">    <span class="keyword">return</span> list(stack)</span><br></pre></td></tr></table></figure><br><a id="more"></a><br><strong>C++解法</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; generateParenthesis(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;res.push_back(<span class="string">"()"</span>); <span class="keyword">return</span> res;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="built_in">string</span>&gt; que;</span><br><span class="line">    que.push(<span class="string">"()"</span>);</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; tmpset;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l,s,i;</span><br><span class="line">    <span class="built_in">string</span> tmpstr;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; n - <span class="number">1</span>)&#123;</span><br><span class="line">        start++;</span><br><span class="line">        l = que.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> _ = <span class="number">0</span>; _ &lt; l; _++)&#123;</span><br><span class="line">            <span class="built_in">string</span> str = que.front();</span><br><span class="line">            que.pop();</span><br><span class="line">            s = str.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; s; i++)&#123;</span><br><span class="line">                tmpstr = str;</span><br><span class="line">                tmpstr.insert(i, <span class="string">"()"</span>);</span><br><span class="line">                <span class="keyword">if</span> (tmpset.count(tmpstr) == <span class="number">0</span>)&#123;</span><br><span class="line">                    que.push(tmpstr);</span><br><span class="line">                    tmpset.insert(tmpstr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())&#123;</span><br><span class="line">        res.push_back(que.front());</span><br><span class="line">        que.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>中等</tag>
        <tag>字符串</tag>
        <tag>回溯算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 21.合并两个有序链表</title>
    <url>/2019/12/25/LeetCode-21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
<p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-sorted-lists</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">    <span class="keyword">if</span> l1 == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> l2</span><br><span class="line">    <span class="keyword">if</span> l2 == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> l1</span><br><span class="line">    tmp = ListNode(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">        tmp.val = l1.val</span><br><span class="line">        tmp.next = self.mergeTwoLists(l1.next, l2)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmp.val = l2.val</span><br><span class="line">        tmp.next = self.mergeTwoLists(l1, l2.next)</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br></pre></td></tr></table></figure><br><a id="more"></a><br><strong>C++解法</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!l1) <span class="keyword">return</span> l2;</span><br><span class="line">    <span class="keyword">if</span> (!l2) <span class="keyword">return</span> l1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val)&#123;</span><br><span class="line">        l1-&gt;next = mergeTwoLists(l1-&gt;next, l2);</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        l2-&gt;next = mergeTwoLists(l1, l2-&gt;next);</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>简单</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 20.有效的括号</title>
    <url>/2019/12/25/LeetCode-20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p>
<p>示例 1:</p>
<p>输入: “()”<br>输出: true<br>示例 2:</p>
<p>输入: “()[]{}”<br>输出: true<br>示例 3:</p>
<p>输入: “(]”<br>输出: false<br>示例 4:</p>
<p>输入: “([)]”<br>输出: false<br>示例 5:</p>
<p>输入: “{[]}”<br>输出: true</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/valid-parentheses" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-parentheses</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ol>
<li>使用一个栈</li>
<li>遍历这个字符串</li>
<li>如果是左括号，就把左括号入栈</li>
<li>如果是右括号，则检测该右括号是否是栈顶的左括号对应的右括号，是就弹出栈顶，不是则返回false</li>
<li>遍历结束，返回栈是否为空<br><strong>Python 解法</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">    stack = deque()</span><br><span class="line">    keymap = &#123;<span class="string">'('</span>:<span class="string">')'</span>, <span class="string">'['</span>:<span class="string">']'</span>, <span class="string">'&#123;'</span>:<span class="string">'&#125;'</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">        <span class="keyword">if</span> s[i] <span class="keyword">in</span> keymap:</span><br><span class="line">            stack.append(s[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            tmp = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> s[i] != keymap[tmp]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line">    <span class="keyword">if</span> len(stack) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<strong>C++解法</strong><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">char</span>&gt; mapRelation = &#123;&#123;<span class="string">'('</span>,<span class="string">')'</span>&#125;,&#123;<span class="string">'['</span>,<span class="string">']'</span>&#125;,&#123;<span class="string">'&#123;'</span>,<span class="string">'&#125;'</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; store;</span><br><span class="line">    <span class="keyword">if</span> (s.empty()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (mapRelation.count(s[i])) store.push(s[i]);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (store.empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == mapRelation[store.top()]) store.pop();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> store.empty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>简单</tag>
        <tag>字符串</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 19.删除链表的倒数第N个节点</title>
    <url>/2019/12/25/LeetCode-19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p>
<p><strong>示例</strong>：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n &#x3D; 2.</span><br><span class="line">当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure><br>说明：</p>
<p>给定的 n 保证是有效的。</p>
<p>进阶：</p>
<p>你能尝试使用一趟扫描实现吗？</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>遍历一遍链表，将所有链表节点存入容器中，直接删除倒数第n个节点，返回头节点。<br><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(head: ListNode, n: int)</span> -&gt; ListNode:</span></span><br><span class="line">    nodeList = []</span><br><span class="line">    <span class="keyword">while</span> head:</span><br><span class="line">        nodeList.append(head)</span><br><span class="line">        head = head.next</span><br><span class="line">    nodeList[-n - <span class="number">1</span>].next = nodeList[-n + <span class="number">1</span>]</span><br><span class="line">    nodeList[-n].next = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> nodeList[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><br><a id="more"></a><br><strong>C++解法</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;ListNode*&gt; nodeList;</span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">while</span> (head)&#123;</span><br><span class="line">        nodeList.push_back(head);</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    l = nodeList.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (n == l) <span class="keyword">return</span> nodeList[<span class="number">0</span>]-&gt;next;</span><br><span class="line">    nodeList[l - n - <span class="number">1</span>]-&gt;next = nodeList[l - n]-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> nodeList[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><ol>
<li>先用一个指针，走n + 1步</li>
<li>然后用第二个指针从头开始，两个指针一起向后走</li>
<li>当第一个指针走到结束时，第二个指针的下一个节点就是倒数第n个节点<br><strong>Python 解法</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(head: ListNode, n: int)</span> -&gt; ListNode:</span></span><br><span class="line">    first = head</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> first:</span><br><span class="line">            first = first.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> head.next</span><br><span class="line">    second = head</span><br><span class="line">    <span class="keyword">while</span> first:</span><br><span class="line">        first = first.next</span><br><span class="line">        second = second.next</span><br><span class="line">    second.next = second.next.next</span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>
<strong>C++解法</strong><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode* first = head;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (first) first = first-&gt;next;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* second = head;</span><br><span class="line">    <span class="keyword">while</span> (first)&#123;</span><br><span class="line">        first = first-&gt;next;</span><br><span class="line">        second = second-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    second-&gt;next = second-&gt;next-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>链表</tag>
        <tag>中等</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 16. 最接近的三数之和</title>
    <url>/2019/12/24/LeetCode-16-%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p>
<p>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</p>
<p>与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/3sum-closest" target="_blank" rel="noopener">https://leetcode-cn.com/problems/3sum-closest</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>此题解法与<a href="2019/12/24/LeetCode-15-三数之和">15.三数之和</a>极为相似。</p>
<ol>
<li>首先将数组排序</li>
<li>从头开始遍历该数组</li>
<li>以遍历到的当前元素的后一个元素下标为左指针，最后一个元素为右指针，记录当前的三个元素之和，更新与目标的最小距离<br><strong>Python 解法</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeSumClosest</span><span class="params">(nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">    n = len(nums)</span><br><span class="line">    nums.sort()</span><br><span class="line">    re_min = <span class="number">0</span> <span class="comment">#存储当前最小的差值</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        low = i+<span class="number">1</span></span><br><span class="line">        high = n<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            three_sum = nums[i] + nums[low] + nums[high]</span><br><span class="line">            x = target - three_sum <span class="comment">#当前三数的差值</span></span><br><span class="line">            <span class="keyword">if</span> re_min == <span class="number">0</span>:</span><br><span class="line">                re_min = abs(x)</span><br><span class="line">                sum_min = three_sum <span class="comment">#sum_min为当前最接近的和</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> abs(x) &lt; re_min:</span><br><span class="line">                re_min = abs(x)</span><br><span class="line">                sum_min = three_sum</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> three_sum == target:</span><br><span class="line">                <span class="keyword">return</span> target</span><br><span class="line">            <span class="keyword">elif</span> three_sum &lt; target:</span><br><span class="line">                low += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high -= <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sum_min</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<strong>C++解法</strong><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> left, right;</span><br><span class="line">    <span class="keyword">int</span> res_min = INT_MAX;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">    sort(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        left = i + <span class="number">1</span>;</span><br><span class="line">        right = n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> threeSum = nums[i] + nums[left] + nums[right];</span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="built_in">abs</span>(target - threeSum);</span><br><span class="line">            <span class="keyword">if</span> (tmp == <span class="number">0</span>) <span class="keyword">return</span> target;</span><br><span class="line">            <span class="keyword">if</span> (threeSum &gt; target) right--;</span><br><span class="line">            <span class="keyword">else</span> left++;</span><br><span class="line">            <span class="keyword">if</span> (tmp &lt; res_min)&#123;</span><br><span class="line">                sum = threeSum;</span><br><span class="line">                res_min = tmp;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>中等</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 17. 电话号码的字母组合</title>
    <url>/2019/12/24/LeetCode-17-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p>
<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>
<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/17_telephone_keypad.png" alt=""></p>
<p><strong>示例:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：&quot;23&quot;</span><br><span class="line">输出：[&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</span><br><span class="line">说明:</span><br><span class="line">尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。</span><br></pre></td></tr></table></figure><br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>使用BFS<br><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span><span class="params">(self, digits: str)</span> -&gt; List[str]:</span></span><br><span class="line">    <span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">    numMap = &#123;<span class="string">'2'</span>:<span class="string">'abc'</span>, <span class="string">'3'</span>:<span class="string">'def'</span>, <span class="string">'4'</span>:<span class="string">'ghi'</span>, <span class="string">'5'</span>:<span class="string">'jkl'</span>, <span class="string">'6'</span>:<span class="string">'mno'</span>, <span class="string">'7'</span>:<span class="string">'pqrs'</span>, <span class="string">'8'</span>:<span class="string">'tuv'</span>, <span class="string">'9'</span>:<span class="string">'wxyz'</span>&#125;</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> digits:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">if</span> len(digits) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> list(numMap[digits[<span class="number">0</span>]])</span><br><span class="line">    </span><br><span class="line">    stack = deque(list(numMap[digits[<span class="number">0</span>]]))</span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    visited = set()</span><br><span class="line">    <span class="keyword">while</span> start &lt; len(digits) - <span class="number">1</span>:</span><br><span class="line">        start += <span class="number">1</span></span><br><span class="line">        l = len(stack)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(l):</span><br><span class="line">            tmp = stack.pop()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(numMap[digits[start]])):</span><br><span class="line">                <span class="keyword">if</span> tmp + numMap[digits[start]][i] <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                    visited.add(tmp + numMap[digits[start]][i])</span><br><span class="line">                    stack.appendleft(tmp + numMap[digits[start]][i])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> list(stack)</span><br></pre></td></tr></table></figure><br><a id="more"></a><br><strong>C++解法</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCombinations(<span class="built_in">string</span> digits) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="built_in">string</span>&gt; m = &#123;&#123;<span class="string">'2'</span>,<span class="string">"abc"</span> &#125;,&#123;<span class="string">'3'</span>,<span class="string">"def"</span>&#125;,&#123;<span class="string">'4'</span>,<span class="string">"ghi"</span>&#125;,&#123;<span class="string">'5'</span>,<span class="string">"jkl"</span>&#125;,&#123;<span class="string">'6'</span>,<span class="string">"mno"</span>&#125;,&#123;<span class="string">'7'</span>,<span class="string">"pqrs"</span>&#125;,&#123;<span class="string">'8'</span>,<span class="string">"tuv"</span>&#125;,&#123;<span class="string">'9'</span>,<span class="string">"wxyz"</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> n = digits.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m[digits[<span class="number">0</span>]].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="built_in">string</span> str;</span><br><span class="line">            str.push_back(m[digits[<span class="number">0</span>]][i]);</span><br><span class="line">            res.push_back(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="built_in">string</span>&gt; que;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m[digits[<span class="number">0</span>]].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        str.push_back(m[digits[<span class="number">0</span>]][i]);</span><br><span class="line">        que.push(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; n - <span class="number">1</span>)&#123;</span><br><span class="line">        start ++;</span><br><span class="line">        <span class="keyword">int</span> l = que.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> _ = <span class="number">0</span>; _ &lt; l; _++)&#123;</span><br><span class="line">            <span class="built_in">string</span> tmp = que.front();</span><br><span class="line">            que.pop();</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m[digits[start]].<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">                que.push(tmp + m[digits[start]][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())&#123;</span><br><span class="line">        res.push_back(que.front());</span><br><span class="line">        que.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>中等</tag>
        <tag>字符串</tag>
        <tag>回溯算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 15. 三数之和</title>
    <url>/2019/12/24/LeetCode-15-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。</p>
<p>注意：答案中不可以包含重复的三元组。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如, 给定数组 nums &#x3D; [-1, 0, 1, 2, -1, -4]，</span><br><span class="line"></span><br><span class="line">满足要求的三元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/3sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/3sum</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h2><ol>
<li>先将数组排序</li>
<li>从头开始遍历数组，如果当前元素小于0，转至步骤3，如果当前元素大于0，则没有向后遍历的意义，跳出循环</li>
<li>取当前元素后面的一个为左指针，数组末尾为右指针，寻找两个元素和与当前元素构成和为0的组合<br><strong>Python 解法</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">    n=len(nums)</span><br><span class="line">    res=[]</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">not</span> nums <span class="keyword">or</span> n&lt;<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    nums.sort()</span><br><span class="line">    res=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span> <span class="keyword">and</span> nums[i]==nums[i<span class="number">-1</span>]):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        L=i+<span class="number">1</span></span><br><span class="line">        R=n<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span>(L&lt;R):</span><br><span class="line">            <span class="keyword">if</span>(nums[i]+nums[L]+nums[R]==<span class="number">0</span>):</span><br><span class="line">                res.append([nums[i],nums[L],nums[R]])</span><br><span class="line">                <span class="keyword">while</span>(L&lt;R <span class="keyword">and</span> nums[L]==nums[L+<span class="number">1</span>]):</span><br><span class="line">                    L=L+<span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span>(L&lt;R <span class="keyword">and</span> nums[R]==nums[R<span class="number">-1</span>]):</span><br><span class="line">                    R=R<span class="number">-1</span></span><br><span class="line">                L=L+<span class="number">1</span></span><br><span class="line">                R=R<span class="number">-1</span></span><br><span class="line">            <span class="keyword">elif</span>(nums[i]+nums[L]+nums[R]&gt;<span class="number">0</span>):</span><br><span class="line">                R=R<span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                L=L+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>中等</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 14. 最长公共前缀</title>
    <url>/2019/12/24/LeetCode-14-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>编写一个函数来查找字符串数组中的最长公共前缀。</p>
<p>如果不存在公共前缀，返回空字符串 “”。</p>
<p>示例 1:</p>
<p>输入: [“flower”,”flow”,”flight”]<br>输出: “fl”<br>示例 2:</p>
<p>输入: [“dog”,”racecar”,”car”]<br>输出: “”<br>解释: 输入不存在公共前缀。<br>说明:</p>
<p>所有输入只包含小写字母 a-z 。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-common-prefix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-common-prefix</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>从第一个字符串开始遍历，如果该字符串不是其他字符串的前缀，则将该字符串长度减一。<br><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(strs: List[str])</span> -&gt; str:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    res = strs[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(strs)):</span><br><span class="line">        <span class="keyword">while</span> strs[i].find(res) != <span class="number">0</span>:</span><br><span class="line">            res = res[<span class="number">0</span>:len(res) - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><br><a id="more"></a><br><strong>C++解法</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strs.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    <span class="built_in">string</span> res = strs[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">while</span> (strs[i].<span class="built_in">find</span>(res) != <span class="number">0</span>) &#123;</span><br><span class="line">            res = res.substr(<span class="number">0</span>, res.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>简单</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 11. 盛水最多的容器</title>
    <url>/2019/12/24/LeetCode-11-%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<p>说明：你不能倾斜容器，且 n 的值至少为 2。</p>
<p><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt=""></p>
<p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色&gt; 部分）的最大值为 49。</p>
<p>示例:</p>
<p>输入: [1,8,6,2,5,4,8,3,7]<br>输出: 49</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/container-with-most-water" target="_blank" rel="noopener">https://leetcode-cn.com/problems/container-with-most-water</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ol>
<li>使用双指针法</li>
<li>当两个指针指向的数值不相等时，移动较短的那个指针，由于木桶效应，实际上决定容器盛水多少的是较短的那个指针和两个指针间的距离<br><strong>Python 解法</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(height: List[int])</span> -&gt; int:</span></span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    end = len(height) - <span class="number">1</span></span><br><span class="line">    res = min(height[end], height[start])*(end - start)</span><br><span class="line">    <span class="keyword">while</span> start &lt; end:</span><br><span class="line">        <span class="keyword">if</span> height[start] &lt; height[end]:</span><br><span class="line">            start += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end -= <span class="number">1</span></span><br><span class="line">        tmp = min(height[end], height[start])*(end - start)</span><br><span class="line">        res = max(res, tmp)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<strong>C++解法</strong><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; <span class="built_in">height</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = <span class="built_in">height</span>.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> maxVal = INT_MIN;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">height</span>[left] &lt; <span class="built_in">height</span>[right])&#123;</span><br><span class="line">            maxVal = <span class="built_in">max</span>(maxVal, <span class="built_in">height</span>[left] * (right - left));</span><br><span class="line">            left ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            maxVal = <span class="built_in">max</span>(maxVal, <span class="built_in">height</span>[right] * (right - left));</span><br><span class="line">            right --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>中等</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 10. 正则表达式匹配</title>
    <url>/2019/12/23/LeetCode-10-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 ‘.’ 和 ‘*’ 的正则表达式匹配。</p>
<p>‘.’ 匹配任意单个字符<br>‘*’ 匹配零个或多个前面的那一个元素<br>所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。</p>
<p>说明:</p>
<p>s 可能为空，且只包含从 a-z 的小写字母。<br>p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。</p>
<p><strong>示例</strong> 1:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">s &#x3D; &quot;aa&quot;</span><br><span class="line">p &#x3D; &quot;a&quot;</span><br><span class="line">输出: false</span><br><span class="line">解释: &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。</span><br></pre></td></tr></table></figure></p>
<p><strong>示例</strong> 2:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">s &#x3D; &quot;aa&quot;</span><br><span class="line">p &#x3D; &quot;a*&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: 因为 &#39;*&#39; 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 &#39;a&#39;。因此，字符串 &quot;aa&quot; 可被视为 &#39;a&#39; 重复了一次。</span><br></pre></td></tr></table></figure></p>
<p><strong>示例</strong> 3:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">s &#x3D; &quot;ab&quot;</span><br><span class="line">p &#x3D; &quot;.*&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: &quot;.*&quot; 表示可匹配零个或多个（&#39;*&#39;）任意字符（&#39;.&#39;）。</span><br></pre></td></tr></table></figure></p>
<p><strong>示例</strong> 4:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">s &#x3D; &quot;aab&quot;</span><br><span class="line">p &#x3D; &quot;c*a*b&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: 因为 &#39;*&#39; 表示零个或多个，这里 &#39;c&#39; 为 0 个, &#39;a&#39; 被重复一次。因此可以匹配字符串 &quot;aab&quot;。</span><br></pre></td></tr></table></figure></p>
<p><strong>示例</strong> 5:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">s &#x3D; &quot;mississippi&quot;</span><br><span class="line">p &#x3D; &quot;mis*is*p*.&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/regular-expression-matching" target="_blank" rel="noopener">https://leetcode-cn.com/problems/regular-expression-matching</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="直接调用正则库（略）"><a href="#直接调用正则库（略）" class="headerlink" title="直接调用正则库（略）"></a>直接调用正则库（略）</h2><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><ol>
<li>考虑最简单的情况，如果没有<code>.</code>，<code>*</code>，我们所需要对比的就只有两个字符串是否相同，那么最简单的情况可以写成以下方式<br><strong>Python 解法</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(s: str, p: str)</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> p: <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    first_s = s[<span class="number">0</span>]</span><br><span class="line">    first_p = p[<span class="number">0</span>]</span><br><span class="line">    tmpRes = (first_s == first_p)</span><br><span class="line">    <span class="keyword">return</span> tmpRes <span class="keyword">and</span> isMatch(s[<span class="number">1</span>:], p[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure></li>
<li>由于<code>.</code>可以匹配任意字符，则以上函数可以改写为：</li>
</ol>
<p><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(s: str, p: str)</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> p: <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    first_s = s[<span class="number">0</span>]</span><br><span class="line">    first_p = p[<span class="number">0</span>]</span><br><span class="line">    tmpRes = (first_p <span class="keyword">in</span> [first_s, <span class="string">'.'</span>])</span><br><span class="line">    <span class="keyword">return</span> tmpRes <span class="keyword">and</span> isMatch(s[<span class="number">1</span>:], p[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure></p>
<ol>
<li>最难的部分在于<code>*</code>。由于<code>*</code>指代前面的字符出现了0次或者一次，假设<code>p[j + 1] == &#39;*&#39;</code>那么可以有以下推论：<script type="math/tex; mode=display">
P(s[i:], p[j:]) = P(s[i:], p[j + 2:]) or P(s[i + 1:], p[j:])</script>根据这个，以上的函数可以改写为：</li>
</ol>
<p><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(s: str, p: str)</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> p: <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    first_s = s[<span class="number">0</span>]</span><br><span class="line">    first_p = p[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> len(p) &gt;= <span class="number">2</span> <span class="keyword">and</span> p[<span class="number">1</span>] == <span class="string">'*'</span>:</span><br><span class="line">        <span class="keyword">return</span> isMatch(s[:], p[<span class="number">2</span>:]) <span class="keyword">or</span> isMatch(s[<span class="number">1</span>:], p[:])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmpRes = (first_p <span class="keyword">in</span> [first_s, <span class="string">'.'</span>])</span><br><span class="line">        <span class="keyword">return</span> tmpRes <span class="keyword">and</span> isMatch(s[<span class="number">1</span>:], p[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><br>将以上函数风格进行优化<br><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(s: str, p: str)</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> p: <span class="keyword">return</span> <span class="keyword">not</span> s </span><br><span class="line">    first = bool(s) <span class="keyword">and</span> p[<span class="number">0</span>] <span class="keyword">in</span> [s[<span class="number">0</span>], <span class="string">'.'</span>]</span><br><span class="line">    <span class="keyword">if</span> len(p) &gt;= <span class="number">2</span> <span class="keyword">and</span> p[<span class="number">1</span>] == <span class="string">"*"</span>:</span><br><span class="line">        <span class="keyword">return</span> (self.isMatch(s, p[<span class="number">2</span>:])) <span class="keyword">or</span> (first <span class="keyword">and</span> self.isMatch(s[<span class="number">1</span>:], p)) </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> first <span class="keyword">and</span> self.isMatch(s[<span class="number">1</span>:], p[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>困难</tag>
        <tag>动态规划</tag>
        <tag>回溯算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 9. 回文数</title>
    <url>/2019/12/23/LeetCode-9-%E5%9B%9E%E6%96%87%E6%95%B0/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 121</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><br><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: -121</span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><br><strong>示例 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/palindrome-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/palindrome-number</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h2><ol>
<li>将数字转换为字符串</li>
<li>前后各取一个指针进行对比<br><strong>Python 解法</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(x: int)</span> -&gt; bool:</span></span><br><span class="line">    tmpstr = str(x)</span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    end = len(tmpstr) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt;= end:</span><br><span class="line">        <span class="keyword">if</span> tmpstr[start] == tmpstr[end]:</span><br><span class="line">            start += <span class="number">1</span></span><br><span class="line">            end -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="计算数字的首末位"><a href="#计算数字的首末位" class="headerlink" title="计算数字的首末位"></a>计算数字的首末位</h2><p>对于数字的末位，直接取余就可以了，对于数字的首位，我们可以这么算。<br>首先用一个变量记录数字的最高位，<br>比如 12321，可以标记 help 为 10000，<br>第一个末位为 11，第一个首位为 12321/10000=1，<br>接下来我们需要计算 232 是否为回文，怎么计算呢？<br>我们需要去掉首位和末位。<br>可以采用 x % help / 10 的方式<br>12321%10000==2321 可以将最高位去掉，然后 2321/10==232 可以将最低为去掉。<br>最后不要忘记将 help/100。<br><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(x: int)</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    help = <span class="number">1</span></span><br><span class="line">    tmp = x</span><br><span class="line">    <span class="keyword">while</span> tmp &gt;= <span class="number">10</span>:</span><br><span class="line">        tmp /= <span class="number">10</span></span><br><span class="line">        help *= <span class="number">10</span></span><br><span class="line">    <span class="keyword">while</span> x != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">10</span> != x // help):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        x = x % help / <span class="number">10</span></span><br><span class="line">        help /= <span class="number">100</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>简单</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 8. String to Integer字符串转换整型</title>
    <url>/2019/12/22/LeetCode-8-String-to-Integer%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>请你来实现一个 <code>atoi</code> 函数，使其能将字符串转换成整数。</p>
<p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p>
<p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p>
<p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p>
<p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p>
<p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p>
<p>说明：</p>
<p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;42&quot;</span><br><span class="line">输出: 42</span><br></pre></td></tr></table></figure><br><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;   -42&quot;</span><br><span class="line">输出: -42</span><br><span class="line">解释: 第一个非空白字符为 &#39;-&#39;, 它是一个负号。</span><br><span class="line">     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</span><br></pre></td></tr></table></figure><br><strong>示例 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;4193 with words&quot;</span><br><span class="line">输出: 4193</span><br><span class="line">解释: 转换截止于数字 &#39;3&#39; ，因为它的下一个字符不为数字。</span><br></pre></td></tr></table></figure><br><strong>示例 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;words and 987&quot;</span><br><span class="line">输出: 0</span><br><span class="line">解释: 第一个非空字符是 &#39;w&#39;, 但它不是数字或正、负号。</span><br><span class="line">     因此无法执行有效的转换。</span><br></pre></td></tr></table></figure><br><strong>示例 5:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;-91283472332&quot;</span><br><span class="line">输出: -2147483648</span><br><span class="line">解释: 数字 &quot;-91283472332&quot; 超过 32 位有符号整数范围。 </span><br><span class="line">     因此返回 INT_MIN (−231) 。</span><br></pre></td></tr></table></figure></p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/string-to-integer-atoi" target="_blank" rel="noopener">https://leetcode-cn.com/problems/string-to-integer-atoi</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(str: str)</span> -&gt; int:</span></span><br><span class="line">    str = str.strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> str:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'0'</span> &lt;= str[<span class="number">0</span>] &lt;= <span class="string">'9'</span> <span class="keyword">or</span> str[<span class="number">0</span>] <span class="keyword">in</span> <span class="string">'+-'</span>:</span><br><span class="line">        start = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> start &lt; len(str):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'0'</span> &lt;= str[start] &lt;= <span class="string">'9'</span>:</span><br><span class="line">                start += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> start == <span class="number">1</span> <span class="keyword">and</span> str[<span class="number">0</span>] <span class="keyword">in</span> <span class="string">'+-'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        res = int(str[:start])</span><br><span class="line">        <span class="keyword">if</span> res &lt;= <span class="number">-2</span>**<span class="number">31</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-2</span>**<span class="number">31</span></span><br><span class="line">        <span class="keyword">elif</span> res &gt;= <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>中等</tag>
        <tag>字符串</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 7. Reverse Integer整数反转</title>
    <url>/2019/12/22/LeetCode-7-Reverse-Integer%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 123</span><br><span class="line">输出: 321</span><br></pre></td></tr></table></figure><br><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: -123</span><br><span class="line">输出: -321</span><br></pre></td></tr></table></figure><br><strong>示例 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 120</span><br><span class="line">输出: 21</span><br></pre></td></tr></table></figure><br>注意:</p>
<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-integer" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-integer</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ol>
<li>取符号位</li>
<li>求整数的绝对值并将其转化为字符串</li>
<li>翻转字符串，并转换为int，最后加上符号位<br><strong>Python 解法</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(x: int)</span> -&gt; int:</span></span><br><span class="line">    sign = <span class="number">1</span> <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line">    tmpStr = str(abs(x))</span><br><span class="line">    res = sign * int(tmpStr[::<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">return</span>  res <span class="keyword">if</span> <span class="number">-2</span>**<span class="number">31</span> &lt;= res &lt;= <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>简单</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 6.ZigZag Conversion Z字形变换</title>
    <url>/2019/12/22/LeetCode-6-ZigZag-Conversion-Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p>
<p>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">L   C   I   R</span><br><span class="line">E T O E S I I G</span><br><span class="line">E   D   H   N</span><br></pre></td></tr></table></figure><br>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。</p>
<p>请你实现这个将字符串进行指定行数变换的函数：</p>
<p>string convert(string s, int numRows);<br><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: s &#x3D; &quot;LEETCODEISHIRING&quot;, numRows &#x3D; 3</span><br><span class="line">输出: &quot;LCIRETOESIIGEDHN&quot;</span><br></pre></td></tr></table></figure><br><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: s &#x3D; &quot;LEETCODEISHIRING&quot;, numRows &#x3D; 4</span><br><span class="line">输出: &quot;LDREOEIIECIHNTSG&quot;</span><br></pre></td></tr></table></figure><br>解释:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">L     D     R</span><br><span class="line">E   O E   I I</span><br><span class="line">E C   I H   N</span><br><span class="line">T     S     G</span><br></pre></td></tr></table></figure><br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/zigzag-conversion" target="_blank" rel="noopener">https://leetcode-cn.com/problems/zigzag-conversion</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(s: str, numRows: int)</span> -&gt; str:</span></span><br><span class="line">    result = []</span><br><span class="line">    appendorder = list(range(numRows)) + list(range(numRows - <span class="number">2</span>, <span class="number">0</span>, <span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">    str_index = <span class="number">0</span></span><br><span class="line">    order_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> str_index &lt; len(s):</span><br><span class="line">        <span class="keyword">if</span> appendorder[order_index] &gt;= len(result):</span><br><span class="line">            result.append(<span class="string">""</span>)</span><br><span class="line">        result[appendorder[order_index]] += s[str_index]</span><br><span class="line">        order_index += <span class="number">1</span></span><br><span class="line">        str_index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> order_index == len(appendorder):</span><br><span class="line">            order_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(result)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>中等</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 5. Longest Palindromic Substring最长回文子串</title>
    <url>/2019/12/21/LeetCode-5-Longest-Palindromic-Substring%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p>
<p><strong>示例 1：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;babad&quot;</span><br><span class="line">输出: &quot;bab&quot;</span><br><span class="line">注意: &quot;aba&quot; 也是一个有效答案。</span><br></pre></td></tr></table></figure><br><strong>示例 2：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;cbbd&quot;</span><br><span class="line">输出: &quot;bb&quot;</span><br></pre></td></tr></table></figure><br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-palindromic-substring" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-palindromic-substring</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="中心扩散法"><a href="#中心扩散法" class="headerlink" title="中心扩散法"></a>中心扩散法</h2><p>回文字符串一定是对称的，因此我们可以选择一个中心，向两边扩散判断字符串是否符合标准<br><img src="https://pic.leetcode-cn.com/1b9bfe346a4a9a5718b08149be11236a6db61b3922265d34f22632d4687aa0a8-image.png" alt=""><br><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(s: str)</span> -&gt; str:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> len(s) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> s </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_padding</span><span class="params">(left: int, right: int)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> right &lt; len(s):</span><br><span class="line">            <span class="keyword">if</span> s[left] == s[right]:</span><br><span class="line">                left -= <span class="number">1</span></span><br><span class="line">                right += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> s[left + <span class="number">1</span>: right], right - left - <span class="number">1</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">        odd, odd_length = _padding(i,i)</span><br><span class="line">        even, even_length = _padding(i, i + <span class="number">1</span>)</span><br><span class="line">        tmpStr = odd <span class="keyword">if</span> odd_length &gt; even_length <span class="keyword">else</span> even</span><br><span class="line">        res = res <span class="keyword">if</span> len(res) &gt; len(tmpStr) <span class="keyword">else</span> tmpStr</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><br><a id="more"></a></p>
<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>给出该子串<code>s[i:j + 1]</code> 为回文的传递方程</p>
<script type="math/tex; mode=display">
P(i,j) = (P(i + 1, j - 1) and s[i] == s[j])</script><p><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(s: str)</span> -&gt; str:</span></span><br><span class="line">        size = len(s)</span><br><span class="line">        <span class="keyword">if</span> size &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        <span class="comment"># 二维 dp 问题</span></span><br><span class="line">        <span class="comment"># 状态：dp[l,r]: s[l:r] 包括 l，r ，表示的字符串是不是回文串</span></span><br><span class="line">        <span class="comment"># 设置为 None 是为了方便调试，看清楚代码执行流程</span></span><br><span class="line">        dp = [[<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(size)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(size)]</span><br><span class="line"></span><br><span class="line">        longest_l = <span class="number">1</span></span><br><span class="line">        res = s[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 因为只有 1 个字符的情况在最开始做了判断</span></span><br><span class="line">        <span class="comment"># 左边界一定要比右边界小，因此右边界从 1 开始</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> range(<span class="number">1</span>, size):</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> range(r):</span><br><span class="line">                <span class="comment"># 状态转移方程：如果头尾字符相等并且中间也是回文</span></span><br><span class="line">                <span class="comment"># 在头尾字符相等的前提下，如果收缩以后不构成区间（最多只有 1 个元素），直接返回 True 即可</span></span><br><span class="line">                <span class="comment"># 否则要继续看收缩以后的区间的回文性</span></span><br><span class="line">                <span class="comment"># 重点理解 or 的短路性质在这里的作用</span></span><br><span class="line">                <span class="keyword">if</span> s[l] == s[r] <span class="keyword">and</span> (r - l &lt;= <span class="number">2</span> <span class="keyword">or</span> dp[l + <span class="number">1</span>][r - <span class="number">1</span>]):</span><br><span class="line">                    dp[l][r] = <span class="literal">True</span></span><br><span class="line">                    cur_len = r - l + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> cur_len &gt; longest_l:</span><br><span class="line">                        longest_l = cur_len</span><br><span class="line">                        res = s[l:r + <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 调试语句</span></span><br><span class="line">            <span class="comment"># for item in dp:</span></span><br><span class="line">            <span class="comment">#     print(item)</span></span><br><span class="line">            <span class="comment"># print('---')</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>中等</tag>
        <tag>字符串</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 4.Median of Two Sorted Arrays寻找两个有序数组的中位数</title>
    <url>/2019/12/21/LeetCode-4-Median-of-Two-Sorted-Arrays%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。</p>
<p>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p>
<p>你可以假设 nums1 和 nums2 不会同时为空。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nums1 &#x3D; [1, 3]</span><br><span class="line">nums2 &#x3D; [2]</span><br><span class="line"></span><br><span class="line">则中位数是 2.0</span><br></pre></td></tr></table></figure><br><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nums1 &#x3D; [1, 2]</span><br><span class="line">nums2 &#x3D; [3, 4]</span><br><span class="line"></span><br><span class="line">则中位数是 (2 + 3)&#x2F;2 &#x3D; 2.5</span><br></pre></td></tr></table></figure><br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays" target="_blank" rel="noopener">https://leetcode-cn.com/problems/median-of-two-sorted-arrays</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="1-合并两个数组然后取中位数"><a href="#1-合并两个数组然后取中位数" class="headerlink" title="1. 合并两个数组然后取中位数"></a>1. 合并两个数组然后取中位数</h2><p><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1: List[int], nums2: List[int])</span> -&gt; float:</span></span><br><span class="line">    _temp = nums1 + nums2</span><br><span class="line">    _temp.sort()</span><br><span class="line">    _length = len(_temp)</span><br><span class="line">    <span class="keyword">if</span> _length % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (_temp[_length // <span class="number">2</span> - <span class="number">1</span>]+_temp[_length // <span class="number">2</span>])/<span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> _temp[(_length - <span class="number">1</span>) // <span class="number">2</span>]</span><br></pre></td></tr></table></figure><br><a id="more"></a><br><strong>C++解法</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums1.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> m = nums2.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmpNum;</span><br><span class="line">    tmpNum.insert(tmpNum.<span class="built_in">end</span>(), nums1.<span class="built_in">begin</span>(), nums1.<span class="built_in">end</span>());</span><br><span class="line">    tmpNum.insert(tmpNum.<span class="built_in">end</span>(), nums2.<span class="built_in">begin</span>(), nums2.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    sort(tmpNum.<span class="built_in">begin</span>(), tmpNum.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((n + m) % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> (<span class="keyword">double</span>)(tmpNum[(n + m)/<span class="number">2</span> - <span class="number">1</span>] + tmpNum[(n + m)/<span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> tmpNum[(n + m)/<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-二分法"><a href="#2-二分法" class="headerlink" title="2. 二分法"></a>2. 二分法</h2><p>摘自windliang大佬题解：</p>
<blockquote>
<p>题目要求 <code>O(log(n))</code>的时间复杂度看到 <code>log</code>，很明显，我们只有用到二分的方法才能达到。我们不妨用另一种思路，题目是求中位数，其实就是求第 <code>k</code> 小数的一种特殊情况，而求第 <code>k</code> 小数有一种算法。</p>
<p>假设我们要找第 <code>k</code> 小数，我们可以每次循环排除掉 <code>k/2</code> 个数。看下边一个例子。</p>
<p>假设我们要找第 <code>7</code> 小的数字。</p>
<p><img src="https://pic.leetcode-cn.com/735ea8129ab5b56b7058c6286217fa4bb5f8a198e4c8b2172fe0f75b29a966cd-image.png" alt="enter image description here"></p>
<p>我们比较两个数组的第 <code>k/2</code> 个数字，如果 <code>k</code> 是奇数，向下取整。也就是比较第 3 个数字，上边数组中的 4 和下边数组中的 3，如果哪个小，就表明该数组的前 <code>k/2</code> 个数字都不是第 <code>k</code> 小数字，所以可以排除。也就是 1，2，3 这三个数字不可能是第 7 小的数字，我们可&gt; 以把它排除掉。将 1349 和 45678910 两个数组作为新的数组进行比较。</p>
<p>更一般的情况 <code>A[1]</code> ，<code>A[2]</code> ，<code>A[3]</code>，<code>A[k/2]</code> … ，<code>B[1]</code>，<code>B[2]</code>，<code>B[3]</code>，<code>B[k/2]</code> … ，如果 <code>A[k/2]</code>&lt;<code>B[k/2]</code> ，那么<code>A[1]</code>，<code>A[2]</code>，<code>A[3]</code>，<code>A[k/2]</code>都不可能是第 <code>k</code> 小的数字。</p>
<p>A 数组中比 <code>A[k/2]</code> 小的数有 <code>k/2-1</code> 个，B 数组中，<code>B[k/2]</code> 比 <code>A[k/2]</code> 小，假设 <code>B[k/2]</code>前边的数字都比 <code>A[k/2]</code> 小，也只有 <code>k/2-1</code> 个，所以比 <code>A[k/2]</code> 小的数字最多有 <code>k/1-1+k/2-1=k-2</code>个，所以 <code>A[k/2]</code> 最多是第 <code>k-1</code> 小的数。而比 <code>A[k/2]</code> 小的数更不可能是第 <code>k</code> 小的数了，所以可以把它们排除。</p>
<p>橙色的部分表示已经去掉的数字。</p>
<p><img src="https://pic.leetcode-cn.com/09b8649cd2b8bbea74f7f632b098fed5f8404530ff44b5a0b54a360b3cf7dd8f-image.png" alt="enter image description here"></p>
<p>由于我们已经排除掉了 3 个数字，就是这 3 个数字一定在最前边，所以在两个新数组中，我们&gt; 只需要找第 7 - 3 = 4 小的数字就可以了，也就是 k = 4。此时两个数组，比较第 2 个数&gt; 字，3 &lt; 5，所以我们可以把小的那个数组中的 1 ，3 排除掉了。</p>
<p><img src="https://pic.leetcode-cn.com/f2d72fd3dff109ad810895b9a0c8d8782f47df6b2f24f9de72704961bc547fcb-image.png" alt="enter image description here"></p>
<p>我们又排除掉 2 个数字，所以现在找第 4 - 2 = 2 小的数字就可以了。此时比较两个数组中&gt; 的第 k / 2 = 1 个数，4 == 4，怎么办呢？由于两个数相等，所以我们无论去掉哪个数组中&gt; 的都行，因为去掉 1 个总会保留 1 个的，所以没有影响。为了统一，我们就假设 4 &gt; 4 吧，&gt; 所以此时将下边的 4 去掉。</p>
<p><img src="https://pic.leetcode-cn.com/3c89a8ea29f2e19057b57242c8bc37c5f09b6796b96c30f3d42caea21c12f294-image.png" alt="enter image description here"></p>
<p>由于又去掉 1 个数字，此时我们要找第 1 小的数字，所以只需判断两个数组中第一个数字哪个&gt; 小就可以了，也就是 4。</p>
<p>所以第 7 小的数字是 4。</p>
<p>我们每次都是取 <code>k/2</code> 的数进行比较，有时候可能会遇到数组长度小于 <code>k/2</code>的时候。<br><img src="https://pic.leetcode-cn.com/ad87d1f63a9bbd99e12605686290800ce61b03f9fb98d87f1d8c020d404421ac-image.png" alt="enter image description here"><br>此时 <code>k/2</code> 等于 3，而上边的数组长度是 2，我们此时将箭头指向它的末尾就可以了。这样的&gt; 话，由于 2 &lt; 3，所以就会导致上边的数组 1，2 都被排除。造成下边的情况。</p>
<p><img src="https://pic.leetcode-cn.com/7ea1963f184b1dcaddf951326ccbe7aa09cfbb9ebee7fffb2ede131853b3d1de-image.png" alt=""></p>
<p>由于 2 个元素被排除，所以此时 <code>k = 5</code>，又由于上边的数组已经空了，我们只需要返回下边的数组的第 5 个数字就可以了。</p>
<p>从上边可以看到，无论是找第奇数个还是第偶数个数字，对我们的算法并没有影响，而且在算法进行中，<code>k</code> 的值都有可能从奇数变为偶数，最终都会变为 1 或者由于一个数组空了，直接返回结果。</p>
<p>所以我们采用递归的思路，为了防止数组长度小于<code>k/2</code>，所以每次比较 <code>min(k/2，len(数组)</code>对应的数字，把小的那个对应的数组的数字排除，将两个新数组进入递归，并且 k 要减去排除的数字的个数。递归出口就是当 k=1 或者其中一个数字长度是 0 了。</p>
<p>作者：windliang<br>链接：<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br><strong>Python 解法</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1: List[int], nums2: List[int])</span> -&gt; float:</span></span><br><span class="line">    n = len(nums1)</span><br><span class="line">    m = len(nums2)</span><br><span class="line">    <span class="comment"># 将偶数情况和奇数情况合并，当是奇数时，会计算两次同样的k</span></span><br><span class="line">    left = (n + m + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    right = (n + m + <span class="number">2</span>) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(nums1: List[int], start1: int, end1: int, nums2: List[int], start2: int, end2: int, k: int)</span> -&gt; int:</span></span><br><span class="line">        l1 = end1 - start1 + <span class="number">1</span></span><br><span class="line">        l2 = end2 - start2 + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 始终保证l1 长度小于l2，如果有数组为空，则一定是num1</span></span><br><span class="line">        <span class="keyword">if</span> (l1 &gt; l2): <span class="keyword">return</span> helper(nums2, start2, end2, nums1, start1, end1, k)</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="number">0</span>): <span class="keyword">return</span> nums2[start2 + k - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>): <span class="keyword">return</span> min(nums1[start1], nums2[start2])</span><br><span class="line"></span><br><span class="line">        i = start1 + min(l1, k // <span class="number">2</span>) - <span class="number">1</span></span><br><span class="line">        j = start2 + min(l2, k // <span class="number">2</span>) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nums1[i] &gt; nums2[j]:</span><br><span class="line">            <span class="keyword">return</span> helper(nums1, start1, end1, nums2, j + <span class="number">1</span>, end2, k - (j - start2 + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> helper(nums1, i + <span class="number">1</span>, end1, nums2, start2, end2, k - (i - start1 + <span class="number">1</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (helper(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, left) + helper(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, right)) / <span class="number">2</span></span><br></pre></td></tr></table></figure><br><strong>C++解法</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums1.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> m = nums2.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> left = (n + m + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> right = (n + m + <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>)(findKthSmallest(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, left) + findKthSmallest(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, right)) / <span class="number">2.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findKthSmallest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="keyword">int</span> start1, <span class="keyword">int</span> end1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> start2, <span class="keyword">int</span> end2, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l1 = end1 - start1 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> l2 = end2 - start2 + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l1 &gt; l2) <span class="keyword">return</span> findKthSmallest(nums2, start2, end2, nums1, start1, end1, k);</span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="number">0</span>) <span class="keyword">return</span> nums2[start2 + k - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">min</span>(nums1[start1], nums2[start2]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = start1 + <span class="built_in">min</span>(l1, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j = start2 + <span class="built_in">min</span>(l2, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nums1[i] &gt; nums2[j]) <span class="keyword">return</span> findKthSmallest(nums1, start1, end1, nums2, j + <span class="number">1</span>, end2, k - (j - start2 + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> findKthSmallest(nums1, i + <span class="number">1</span>, end1, nums2, start2, end2, k - (i - start1 + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="3-从中位数定义出发，切割数组，实现二分"><a href="#3-从中位数定义出发，切割数组，实现二分" class="headerlink" title="3. 从中位数定义出发，切割数组，实现二分"></a>3. 从中位数定义出发，切割数组，实现二分</h1><p>TBD</p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>二分查找</tag>
        <tag>分治算法</tag>
        <tag>困难</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 3.Longest Substring Without Repeating Characters无重复最长子串</title>
    <url>/2019/12/19/LeetCode-3-Longest-Substring-Without-Repeating-Characters%E6%97%A0%E9%87%8D%E5%A4%8D%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><br><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><br><strong>示例 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure></p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路s"><a href="#解题思路s" class="headerlink" title="解题思路s"></a>解题思路s</h1><h2 id="利用集合构造滑动窗口"><a href="#利用集合构造滑动窗口" class="headerlink" title="利用集合构造滑动窗口"></a>利用集合构造滑动窗口</h2><ol>
<li>新建集合</li>
<li>新建快慢两个指针</li>
<li>先移动快指针，如果新加入字符不在集合中，则将其加入集合，并更新最大值</li>
<li>如果新加入字符已经在集合中，则向右移动慢指针，并同时从集合中删除指针指向的元素，直到字串中不存在重复元素</li>
</ol>
<p><strong>python</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(s: str)</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    lookup = set()</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    maxLength = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">        <span class="keyword">while</span> s[i] <span class="keyword">in</span> lookup:</span><br><span class="line">            lookup.remove(s[left])</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        lookup.add(s[i])</span><br><span class="line">        maxLength = max(maxLength, i - left + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> maxLength</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>C++</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">char</span>&gt; lookup;</span><br><span class="line">    <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (lookup.<span class="built_in">find</span>(s[i]) != lookup.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            lookup.erase(s[left]);</span><br><span class="line">            left ++;</span><br><span class="line">        &#125;</span><br><span class="line">        lookup.insert(s[i]);</span><br><span class="line">        maxLength = <span class="built_in">max</span>(maxLength, i - left + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><!--more--></p>
<h2 id="考虑优化"><a href="#考虑优化" class="headerlink" title="考虑优化"></a>考虑优化</h2><p>新加入字符已经在现有的窗口时,不需要对窗口一步一步缩减，可以直接将窗口的左指针移到该字符上一次出现的位置之后</p>
<p><strong>python</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(s: str)</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    lookup = &#123;&#125;</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    maxLength = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">        <span class="keyword">if</span> s[i] <span class="keyword">in</span> lookup <span class="keyword">and</span> left &lt;= lookup[s[i]]:</span><br><span class="line">            left = lookup[s[i]] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            maxLength = max(maxLength, i - left + <span class="number">1</span>)</span><br><span class="line">        lookup[s[i]] = i</span><br><span class="line">    <span class="keyword">return</span> maxLength</span><br></pre></td></tr></table></figure></p>
<p><strong>C++</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; lookup;</span><br><span class="line">    <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (lookup.<span class="built_in">find</span>(s[i]) != lookup.<span class="built_in">end</span>() &amp;&amp; left &lt;= lookup[s[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            left = lookup[s[i]] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            maxLength = <span class="built_in">max</span>(maxLength, i - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        lookup[s[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>哈希</tag>
        <tag>hashmap</tag>
        <tag>中等</tag>
        <tag>双指针</tag>
        <tag>字符串</tag>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 2. Add Two Numbers 两数相加</title>
    <url>/2019/12/19/LeetCode-2-Add-Two-Numbers-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给出两个 <strong>非空</strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 <strong>逆序</strong> 的方式存储的，并且它们的每个节点只能存储 <strong>一位</strong> 数字。</p>
<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>
<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 &#x3D; 807</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-two-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>使用变量<code>carry</code>来记录进位，每次只加两个链表的一位，更新<code>carry</code></p>
<h2 id="递归写法"><a href="#递归写法" class="headerlink" title="递归写法"></a>递归写法</h2><p><strong>Python</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">    head = ListNode(<span class="number">0</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(l1: ListNode, l2: ListNode, carry: int, tmp: ListNode)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1 <span class="keyword">and</span> <span class="keyword">not</span> l2 <span class="keyword">and</span> carry != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        x = l1.val <span class="keyword">if</span> l1 <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        y = l2.val <span class="keyword">if</span> l2 <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        value = (x + y + carry) % <span class="number">10</span></span><br><span class="line">        carry = (x + y + carry) // <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        tmp.next = ListNode(value)</span><br><span class="line">        tmp = tmp.next</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1 <span class="keyword">and</span> <span class="keyword">not</span> l2:</span><br><span class="line">            helper(<span class="literal">None</span>, <span class="literal">None</span>, carry, tmp)</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> l1:</span><br><span class="line">            helper(<span class="literal">None</span>, l2.next, carry, tmp)</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> l2:</span><br><span class="line">            helper(l1.next, <span class="literal">None</span>, carry, tmp)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            helper(l1.next, l2.next, carry, tmp)</span><br><span class="line">    helper(l1, l2, <span class="number">0</span>, head)</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>C++</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode l2)</span></span>&#123;</span><br><span class="line">    ListNode* head =<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    helper(l1, l2, <span class="number">0</span>, head);</span><br><span class="line">    <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(ListNode* l1, ListNode* l2, <span class="keyword">int</span> carry, ListNode* tmp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="literal">NULL</span> &amp;&amp; l2 == <span class="literal">NULL</span> &amp;&amp; carry == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    x = l1?l1-&gt;val:<span class="number">0</span>;</span><br><span class="line">    y = l2?l2-&gt;val:<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    value = (x + y + carry) % <span class="number">10</span>;</span><br><span class="line">    carry = (x + y + carry) / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    tmp-&gt;next = <span class="keyword">new</span> ListNode(value);</span><br><span class="line">    tmp = tmp-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="literal">NULL</span> &amp;&amp; l2 == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        helper(<span class="literal">NULL</span>, <span class="literal">NULL</span>, carry, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l1 == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        helper(<span class="literal">NULL</span>, l2-&gt;next, carry, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l2 == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        helper(l1-&gt;next, <span class="literal">NULL</span>, carry, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        helper(l1-&gt;next, l2-&gt;next, carry, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="迭代写法"><a href="#迭代写法" class="headerlink" title="迭代写法"></a>迭代写法</h2><p><strong>Python</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">    carry = <span class="number">0</span></span><br><span class="line">    head = ListNode(<span class="number">0</span>)</span><br><span class="line">    tmp = head</span><br><span class="line">    <span class="keyword">while</span> l1 <span class="keyword">or</span> l2 <span class="keyword">or</span> carry:</span><br><span class="line">        x = l1.val <span class="keyword">if</span> l1 <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        y = l2.val <span class="keyword">if</span> l2 <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        tmp.next = ListNode((x + y + carry) % <span class="number">10</span>)</span><br><span class="line">        carry = (x + y + carry) // <span class="number">10</span></span><br><span class="line">        tmp = tmp.next</span><br><span class="line"></span><br><span class="line">        l1 = l1.next <span class="keyword">if</span> l1 <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">        l2 = l2.next <span class="keyword">if</span> l2 <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> carry == <span class="number">1</span>:</span><br><span class="line">        tmp.next = ListNode(carry)</span><br><span class="line">    <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure></p>
<p><strong>C++</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode l2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    ListNode* head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode* tmp = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (l1 || l2 || carry != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = l1?l1-&gt;val:<span class="number">0</span>;</span><br><span class="line">        y = l2?l2-&gt;val:<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        tmp-&gt;next = <span class="keyword">new</span> ListNode((x + y + carry) % <span class="number">10</span>);</span><br><span class="line">        carry = (x + y + carry) / <span class="number">10</span>;</span><br><span class="line">        tmp = tmp-&gt;next;</span><br><span class="line"></span><br><span class="line">        l1 = l1?l1-&gt;next:<span class="literal">NULL</span>;</span><br><span class="line">        l2 = l2?l2-&gt;next:<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (carry == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp-&gt;next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>链表</tag>
        <tag>中等</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode - 1. Two Sum 两数之和</title>
    <url>/2019/12/19/LeetCode-1-Two-Sum-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 两个<br>整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;示例:</span><br><span class="line"></span><br><span class="line">&gt;给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class="line"></span><br><span class="line">&gt;因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span><br><span class="line">&gt;所以返回 [0, 1]</span><br></pre></td></tr></table></figure><br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="1-暴力解法"><a href="#1-暴力解法" class="headerlink" title="1. 暴力解法"></a>1. 暴力解法</h2><p>嵌套循环遍历该数组，寻找和为<code>target</code>的数组对，时间复杂度 <strong>O(N^2)</strong></p>
<p>实现过于简单，不做陈述。</p>
<h2 id="2-哈希"><a href="#2-哈希" class="headerlink" title="2. 哈希"></a>2. 哈希</h2><ol>
<li>遍历数组，将其值作为key，下标作为value存入哈希表中</li>
<li>第二次遍历数组，使用target减去当前数值，确认是否差在数组中存在<br>时间复杂度 <strong>O(N)</strong></li>
</ol>
<p><strong>Python 解法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">    tmpDict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        tmpDict[nums[i]] = i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        <span class="keyword">if</span> target - nums[i] <span class="keyword">in</span> tmpDict <span class="keyword">and</span> i != tmpDict[target - nums[i]]:</span><br><span class="line">            <span class="keyword">return</span> [i, tmpDict[target - nums[i]]]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>C++ 解法</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result(<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; nums.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">map</span>[nums[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; nums.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>.count(target - nums[i]) &amp;&amp; <span class="built_in">map</span>[target - nums[i]] != i)</span><br><span class="line">        &#123;</span><br><span class="line">            result[<span class="number">0</span>] = i;</span><br><span class="line">            result[<span class="number">1</span>] = <span class="built_in">map</span>[target - nums[i]];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--more-->
<h2 id="3-考虑优化遍历一遍哈希"><a href="#3-考虑优化遍历一遍哈希" class="headerlink" title="3. 考虑优化遍历一遍哈希"></a>3. 考虑优化遍历一遍哈希</h2><p><strong>Python解法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">    tmpDict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        <span class="keyword">if</span> target - nums[i] <span class="keyword">in</span> tmpDict:</span><br><span class="line">            <span class="keyword">return</span> [i, tmpDict[target - nums[i]]]</span><br><span class="line">        tmpDict[nums[i]] = i</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<p><strong>C++解法</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="built_in">map</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; nums.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>.count(target - nums[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;i, <span class="built_in">map</span>[target - nums[i]]&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">map</span>[nums[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode题解</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>哈希</tag>
        <tag>hashmap</tag>
        <tag>简单</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>多维混合Copula的风速建模</title>
    <url>/2017/04/13/2017-04-13-%E5%A4%9A%E7%BB%B4%E6%B7%B7%E5%90%88Copula%E7%9A%84%E9%A3%8E%E9%80%9F%E5%BB%BA%E6%A8%A1/</url>
    <content><![CDATA[<h1 id="多维混合Copula参数估计"><a href="#多维混合Copula参数估计" class="headerlink" title="多维混合Copula参数估计"></a>多维混合Copula参数估计</h1><h2 id="EM算法主体部分"><a href="#EM算法主体部分" class="headerlink" title="EM算法主体部分"></a>EM算法主体部分</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">tic</span><br><span class="line">U=QWC;</span><br><span class="line">V=BDQC;</span><br><span class="line">Z=GHKC;</span><br><span class="line">M=CMC;</span><br><span class="line"><span class="comment">%初始化</span></span><br><span class="line">S=<span class="number">5</span>;</span><br><span class="line">th=<span class="number">0.001</span></span><br><span class="line">omega=[<span class="number">1</span>/<span class="number">5</span>,<span class="number">1</span>/<span class="number">5</span>,<span class="number">1</span>/<span class="number">5</span>,<span class="number">1</span>/<span class="number">5</span>,<span class="number">1</span>/<span class="number">5</span>];</span><br><span class="line">a1=copulafit(<span class="string">'Gaussian'</span>,[U,V,Z,M]);</span><br><span class="line">[a2,nuhat]=copulafit(<span class="string">'t'</span>,[U,V,Z,M]);</span><br><span class="line">a3=copula4fit(<span class="string">'Gumbel'</span>,[U,V,Z,M]);</span><br><span class="line">a4=copula4fit(<span class="string">'Clayton'</span>,[U,V,Z,M]);</span><br><span class="line">a5=copula4fit(<span class="string">'Frank'</span>,[U,V,Z,M]);</span><br><span class="line">theta=&#123;a1,a2,a3,a4,a5&#125;;</span><br><span class="line">tturntheta_old=<span class="built_in">zeros</span>(<span class="number">35</span>,<span class="number">1</span>);</span><br><span class="line">N=<span class="built_in">numel</span>(U);</span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line">tt=<span class="built_in">zeros</span>(N,<span class="number">4</span>);</span><br><span class="line">nn=<span class="built_in">zeros</span>(N,<span class="number">4</span>);</span><br><span class="line">tt(:,<span class="number">1</span>)=tinv(U(:),nuhat);</span><br><span class="line">tt(:,<span class="number">2</span>)=tinv(V(:),nuhat);</span><br><span class="line">tt(:,<span class="number">3</span>)=tinv(Z(:),nuhat);</span><br><span class="line">tt(:,<span class="number">4</span>)=tinv(M(:),nuhat);</span><br><span class="line">nn(:,<span class="number">1</span>)=norminv(U(:));</span><br><span class="line">nn(:,<span class="number">2</span>)=norminv(V(:));</span><br><span class="line">nn(:,<span class="number">3</span>)=norminv(Z(:));</span><br><span class="line">nn(:,<span class="number">4</span>)=norminv(M(:));</span><br><span class="line">t=<span class="built_in">inf</span>;</span><br><span class="line">COPULA=<span class="built_in">zeros</span>(N,S);</span><br><span class="line">list1=cell(<span class="number">6</span>,<span class="number">101</span>);</span><br><span class="line">list2=<span class="built_in">zeros</span>(<span class="number">5</span>,<span class="number">101</span>);</span><br><span class="line">puz=<span class="built_in">zeros</span>(N,S);</span><br><span class="line">puz1=<span class="built_in">zeros</span>(N,S);</span><br><span class="line">turntheta_old=<span class="built_in">zeros</span>(<span class="number">15</span>,<span class="number">1</span>);</span><br><span class="line">lower=[-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,-<span class="built_in">inf</span>,<span class="number">1.001</span>,<span class="number">0.001</span>,-<span class="built_in">inf</span>];</span><br><span class="line">turntheta=<span class="built_in">zeros</span>(<span class="number">15</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> t&gt;=th&amp;&amp;count&lt;=<span class="number">100</span></span><br><span class="line">    theta_old=theta;</span><br><span class="line">    omega_old=omega;</span><br><span class="line"></span><br><span class="line"><span class="comment">%保证搜索过程中仍为正定矩阵</span></span><br><span class="line">    [A1,B1]=eig(theta_old&#123;<span class="number">1</span>&#125;);</span><br><span class="line">    [A2,B2]=eig(theta_old&#123;<span class="number">2</span>&#125;);</span><br><span class="line">    C1=A1*<span class="built_in">sqrt</span>(B1);</span><br><span class="line">    C2=A2*<span class="built_in">sqrt</span>(B2);</span><br><span class="line"></span><br><span class="line">    tturntheta_old(<span class="number">1</span>:<span class="number">16</span>)=<span class="built_in">reshape</span>(C1,[<span class="number">16</span>,<span class="number">1</span>]);</span><br><span class="line">    tturntheta_old(<span class="number">17</span>:<span class="number">32</span>)=<span class="built_in">reshape</span>(C2,[<span class="number">16</span>,<span class="number">1</span>]);</span><br><span class="line">    tturntheta_old(<span class="number">33</span>)=theta_old&#123;<span class="number">3</span>&#125;;</span><br><span class="line">    tturntheta_old(<span class="number">34</span>)=theta_old&#123;<span class="number">4</span>&#125;;</span><br><span class="line">    tturntheta_old(<span class="number">35</span>)=theta_old&#123;<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    COPULA(:,<span class="number">1</span>)=copulapdf(<span class="string">'Gaussian'</span>,[U,V,Z,M],theta_old&#123;<span class="number">1</span>&#125;);</span><br><span class="line">    COPULA(:,<span class="number">2</span>)=copulapdf(<span class="string">'t'</span>,[U,V,Z,M],theta_old&#123;<span class="number">2</span>&#125;,nuhat);</span><br><span class="line">    COPULA(:,<span class="number">3</span>)=copula4pdf(<span class="string">'Gumbel'</span>,[U,V,Z,M],theta_old&#123;<span class="number">3</span>&#125;);</span><br><span class="line">    COPULA(:,<span class="number">4</span>)=copula4pdf(<span class="string">'Clayton'</span>,[U,V,Z,M],theta_old&#123;<span class="number">4</span>&#125;);</span><br><span class="line">    COPULA(:,<span class="number">5</span>)=copula4pdf(<span class="string">'Frank'</span>,[U,V,Z,M],theta_old&#123;<span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line">    puz(:,<span class="number">1</span>)=COPULA(:,<span class="number">1</span>)*omega_old(<span class="number">1</span>);</span><br><span class="line">    puz(:,<span class="number">2</span>)=COPULA(:,<span class="number">2</span>)*omega_old(<span class="number">2</span>);</span><br><span class="line">    puz(:,<span class="number">3</span>)=COPULA(:,<span class="number">3</span>)*omega_old(<span class="number">3</span>);</span><br><span class="line">    puz(:,<span class="number">4</span>)=COPULA(:,<span class="number">4</span>)*omega_old(<span class="number">4</span>);</span><br><span class="line">    puz(:,<span class="number">5</span>)=COPULA(:,<span class="number">5</span>)*omega_old(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:N</span><br><span class="line">        puz1(<span class="built_in">i</span>,<span class="number">1</span>)=puz(<span class="built_in">i</span>,<span class="number">1</span>)/sum(puz(<span class="built_in">i</span>,:));</span><br><span class="line">        puz1(<span class="built_in">i</span>,<span class="number">2</span>)=puz(<span class="built_in">i</span>,<span class="number">2</span>)/sum(puz(<span class="built_in">i</span>,:));</span><br><span class="line">        puz1(<span class="built_in">i</span>,<span class="number">3</span>)=puz(<span class="built_in">i</span>,<span class="number">3</span>)/sum(puz(<span class="built_in">i</span>,:));</span><br><span class="line">        puz1(<span class="built_in">i</span>,<span class="number">4</span>)=puz(<span class="built_in">i</span>,<span class="number">4</span>)/sum(puz(<span class="built_in">i</span>,:));</span><br><span class="line">        puz1(<span class="built_in">i</span>,<span class="number">5</span>)=puz(<span class="built_in">i</span>,<span class="number">5</span>)/sum(puz(<span class="built_in">i</span>,:));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    omega(<span class="number">1</span>)=sum(puz1(:,<span class="number">1</span>))/N;</span><br><span class="line">    omega(<span class="number">2</span>)=sum(puz1(:,<span class="number">2</span>))/N;</span><br><span class="line">    omega(<span class="number">3</span>)=sum(puz1(:,<span class="number">3</span>))/N;</span><br><span class="line">    omega(<span class="number">4</span>)=sum(puz1(:,<span class="number">4</span>))/N;</span><br><span class="line">    omega(<span class="number">5</span>)=sum(puz1(:,<span class="number">5</span>))/N;</span><br><span class="line">    omega</span><br><span class="line">    [tturntheta,fval,exitflag,output]=update4theta(N,U,V,Z,M,tturntheta_old,puz1,tt,nn,lower,nuhat);</span><br><span class="line"></span><br><span class="line">    CC1=<span class="built_in">reshape</span>(tturntheta(<span class="number">1</span>:<span class="number">16</span>),[<span class="number">4</span>,<span class="number">4</span>]);</span><br><span class="line">    CC2=<span class="built_in">reshape</span>(tturntheta(<span class="number">17</span>:<span class="number">32</span>),[<span class="number">4</span>,<span class="number">4</span>]);</span><br><span class="line">    CC1=CC1*CC1';</span><br><span class="line">    CC2=CC2*CC2';</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span>(eig(CC1)&lt;<span class="number">0.000000001</span>)&gt;<span class="number">0</span>)</span><br><span class="line">        CC1=CC1+<span class="built_in">eps</span>*<span class="built_in">eye</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span>(eig(CC2)&lt;<span class="number">0.000000001</span>)&gt;<span class="number">0</span>)</span><br><span class="line">        CC2=CC2+<span class="built_in">eps</span>*<span class="built_in">eye</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    theta&#123;<span class="number">1</span>&#125;=[<span class="number">1</span>,CC1(<span class="number">1</span>,<span class="number">2</span>)/<span class="built_in">sqrt</span>(CC1(<span class="number">1</span>,<span class="number">1</span>)*CC1(<span class="number">2</span>,<span class="number">2</span>)),CC1(<span class="number">1</span>,<span class="number">3</span>)/<span class="built_in">sqrt</span>(CC1(<span class="number">1</span>,<span class="number">1</span>)*CC1(<span class="number">3</span>,<span class="number">3</span>)),CC1(<span class="number">1</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(CC1(<span class="number">1</span>,<span class="number">1</span>)*CC1(<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line">            CC1(<span class="number">1</span>,<span class="number">2</span>)/<span class="built_in">sqrt</span>(CC1(<span class="number">1</span>,<span class="number">1</span>)*CC1(<span class="number">2</span>,<span class="number">2</span>)),<span class="number">1</span>,CC1(<span class="number">2</span>,<span class="number">3</span>)/<span class="built_in">sqrt</span>(CC1(<span class="number">2</span>,<span class="number">2</span>)*CC1(<span class="number">3</span>,<span class="number">3</span>)),CC1(<span class="number">2</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(CC1(<span class="number">2</span>,<span class="number">2</span>)*CC1(<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line">            CC1(<span class="number">1</span>,<span class="number">3</span>)/<span class="built_in">sqrt</span>(CC1(<span class="number">1</span>,<span class="number">1</span>)*CC1(<span class="number">3</span>,<span class="number">3</span>)),CC1(<span class="number">2</span>,<span class="number">3</span>)/<span class="built_in">sqrt</span>(CC1(<span class="number">2</span>,<span class="number">2</span>)*CC1(<span class="number">3</span>,<span class="number">3</span>)),<span class="number">1</span>,CC1(<span class="number">3</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(CC1(<span class="number">3</span>,<span class="number">3</span>)*CC1(<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line">            CC1(<span class="number">1</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(CC1(<span class="number">1</span>,<span class="number">1</span>)*CC1(<span class="number">4</span>,<span class="number">4</span>)),CC1(<span class="number">2</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(CC1(<span class="number">2</span>,<span class="number">2</span>)*CC1(<span class="number">4</span>,<span class="number">4</span>)),CC1(<span class="number">3</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(CC1(<span class="number">3</span>,<span class="number">3</span>)*CC1(<span class="number">4</span>,<span class="number">4</span>)),<span class="number">1</span>];</span><br><span class="line">    theta&#123;<span class="number">2</span>&#125;=[<span class="number">1</span>,CC2(<span class="number">1</span>,<span class="number">2</span>)/<span class="built_in">sqrt</span>(CC2(<span class="number">1</span>,<span class="number">1</span>)*CC2(<span class="number">2</span>,<span class="number">2</span>)),CC2(<span class="number">1</span>,<span class="number">3</span>)/<span class="built_in">sqrt</span>(CC2(<span class="number">1</span>,<span class="number">1</span>)*CC2(<span class="number">3</span>,<span class="number">3</span>)),CC2(<span class="number">1</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(CC2(<span class="number">1</span>,<span class="number">1</span>)*CC2(<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line">            CC2(<span class="number">1</span>,<span class="number">2</span>)/<span class="built_in">sqrt</span>(CC2(<span class="number">1</span>,<span class="number">1</span>)*CC2(<span class="number">2</span>,<span class="number">2</span>)),<span class="number">1</span>,CC2(<span class="number">2</span>,<span class="number">3</span>)/<span class="built_in">sqrt</span>(CC2(<span class="number">2</span>,<span class="number">2</span>)*CC2(<span class="number">3</span>,<span class="number">3</span>)),CC2(<span class="number">2</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(CC2(<span class="number">2</span>,<span class="number">2</span>)*CC2(<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line">            CC2(<span class="number">1</span>,<span class="number">3</span>)/<span class="built_in">sqrt</span>(CC2(<span class="number">1</span>,<span class="number">1</span>)*CC2(<span class="number">3</span>,<span class="number">3</span>)),CC2(<span class="number">2</span>,<span class="number">3</span>)/<span class="built_in">sqrt</span>(CC2(<span class="number">2</span>,<span class="number">2</span>)*CC2(<span class="number">3</span>,<span class="number">3</span>)),<span class="number">1</span>,CC2(<span class="number">3</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(CC2(<span class="number">3</span>,<span class="number">3</span>)*CC2(<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line">            CC2(<span class="number">1</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(CC2(<span class="number">1</span>,<span class="number">1</span>)*CC2(<span class="number">4</span>,<span class="number">4</span>)),CC2(<span class="number">2</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(CC2(<span class="number">2</span>,<span class="number">2</span>)*CC2(<span class="number">4</span>,<span class="number">4</span>)),CC2(<span class="number">3</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(CC2(<span class="number">3</span>,<span class="number">3</span>)*CC2(<span class="number">4</span>,<span class="number">4</span>)),<span class="number">1</span>];</span><br><span class="line">    theta&#123;<span class="number">3</span>&#125;=tturntheta(<span class="number">33</span>);</span><br><span class="line">    theta&#123;<span class="number">4</span>&#125;=tturntheta(<span class="number">34</span>);</span><br><span class="line">    theta&#123;<span class="number">5</span>&#125;=tturntheta(<span class="number">35</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    theta;</span><br><span class="line">    list1&#123;<span class="number">1</span>,count+<span class="number">1</span>&#125;=theta&#123;<span class="number">1</span>&#125;;</span><br><span class="line">    list1&#123;<span class="number">2</span>,count+<span class="number">1</span>&#125;=theta&#123;<span class="number">2</span>&#125;;</span><br><span class="line">    list1&#123;<span class="number">3</span>,count+<span class="number">1</span>&#125;=theta&#123;<span class="number">3</span>&#125;;</span><br><span class="line">    list1&#123;<span class="number">4</span>,count+<span class="number">1</span>&#125;=theta&#123;<span class="number">4</span>&#125;;</span><br><span class="line">    list1&#123;<span class="number">5</span>,count+<span class="number">1</span>&#125;=theta&#123;<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    theta&#123;<span class="number">1</span>&#125;</span><br><span class="line">    theta&#123;<span class="number">2</span>&#125;</span><br><span class="line">    theta&#123;<span class="number">3</span>&#125;</span><br><span class="line">    theta&#123;<span class="number">4</span>&#125;</span><br><span class="line">    theta&#123;<span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">    list2(:,count+<span class="number">1</span>)=omega;</span><br><span class="line">    t=<span class="built_in">max</span>([norm(tturntheta(:)-tturntheta_old(:));norm(omega_old(:)-omega(:))])</span><br><span class="line">    count=count+<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">toc</span><br></pre></td></tr></table></figure>
<p><strong>注：在多维模式下最应注意的是搜索过程中多维高斯Copula与t-Copula的相依结构参数应该保持正定</strong></p>
<blockquote>
<p>保持矩阵正定的方法<br>假设 $A$ 矩阵正定，则;<br>$A=Y<em>\lambda</em>Y^T$,其中 $\lambda$ 为对角线上为矩阵$A$的特征值的对角矩阵，$Y$为对应各特征值的特征向量矩阵。<br>因此对于$B=Y<em>\sqrt{\lambda}$，有$A=B</em>B^T$。<br>因此只需对$B$中的元素进行搜索就能保证最后合成的$A$一定为正定。</p>
</blockquote>
<a id="more"></a>
<h2 id="非线性优化部分"><a href="#非线性优化部分" class="headerlink" title="非线性优化部分"></a>非线性优化部分</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[turntheta,fval,exitflag,output]</span>=<span class="title">update4theta</span><span class="params">(N,U,V,Z,M,ttheta,puz,t,n,lower,nuhat)</span></span></span><br><span class="line">tic</span><br><span class="line">options=optimset(<span class="string">'Display'</span>,<span class="string">'iter-detailed'</span>,<span class="string">'MaxFunEvals'</span>,<span class="number">10000</span>,<span class="string">'TolFun'</span>,<span class="number">1e-8</span>,<span class="string">'TolX'</span>,<span class="number">1e-10</span>,<span class="string">'LargeScale'</span>,<span class="string">'on'</span>,<span class="string">'HessUpdate'</span>,<span class="string">'bfgs'</span>,<span class="string">'UseParallel'</span>,<span class="number">1</span>);</span><br><span class="line">[turntheta,fval,exitflag,output]=fmincon(@u4theta,ttheta,[],[],[],[],lower,[],[],options);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">u4theta</span><span class="params">(ttheta)</span></span></span><br><span class="line">    theta=cell(<span class="number">5</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    X1=<span class="built_in">reshape</span>(ttheta(<span class="number">1</span>:<span class="number">16</span>),[<span class="number">4</span>,<span class="number">4</span>]);</span><br><span class="line">    X2=<span class="built_in">reshape</span>(ttheta(<span class="number">17</span>:<span class="number">32</span>),[<span class="number">4</span>,<span class="number">4</span>]);</span><br><span class="line">    X1=X1*X1';</span><br><span class="line">    X2=X2*X2';</span><br><span class="line"></span><br><span class="line">    theta&#123;<span class="number">1</span>&#125;=[<span class="number">1</span>,X1(<span class="number">1</span>,<span class="number">2</span>)/<span class="built_in">sqrt</span>(X1(<span class="number">1</span>,<span class="number">1</span>)*X1(<span class="number">2</span>,<span class="number">2</span>)),X1(<span class="number">1</span>,<span class="number">3</span>)/<span class="built_in">sqrt</span>(X1(<span class="number">1</span>,<span class="number">1</span>)*X1(<span class="number">3</span>,<span class="number">3</span>)),X1(<span class="number">1</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(X1(<span class="number">1</span>,<span class="number">1</span>)*X1(<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line">            X1(<span class="number">1</span>,<span class="number">2</span>)/<span class="built_in">sqrt</span>(X1(<span class="number">1</span>,<span class="number">1</span>)*X1(<span class="number">2</span>,<span class="number">2</span>)),<span class="number">1</span>,X1(<span class="number">2</span>,<span class="number">3</span>)/<span class="built_in">sqrt</span>(X1(<span class="number">2</span>,<span class="number">2</span>)*X1(<span class="number">3</span>,<span class="number">3</span>)),X1(<span class="number">2</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(X1(<span class="number">2</span>,<span class="number">2</span>)*X1(<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line">            X1(<span class="number">1</span>,<span class="number">3</span>)/<span class="built_in">sqrt</span>(X1(<span class="number">1</span>,<span class="number">1</span>)*X1(<span class="number">3</span>,<span class="number">3</span>)),X1(<span class="number">2</span>,<span class="number">3</span>)/<span class="built_in">sqrt</span>(X1(<span class="number">2</span>,<span class="number">2</span>)*X1(<span class="number">3</span>,<span class="number">3</span>)),<span class="number">1</span>,X1(<span class="number">3</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(X1(<span class="number">3</span>,<span class="number">3</span>)*X1(<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line">            X1(<span class="number">1</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(X1(<span class="number">1</span>,<span class="number">1</span>)*X1(<span class="number">4</span>,<span class="number">4</span>)),X1(<span class="number">2</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(X1(<span class="number">2</span>,<span class="number">2</span>)*X1(<span class="number">4</span>,<span class="number">4</span>)),X1(<span class="number">3</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(X1(<span class="number">3</span>,<span class="number">3</span>)*X1(<span class="number">4</span>,<span class="number">4</span>)),<span class="number">1</span>];</span><br><span class="line">    theta&#123;<span class="number">2</span>&#125;=[<span class="number">1</span>,X2(<span class="number">1</span>,<span class="number">2</span>)/<span class="built_in">sqrt</span>(X2(<span class="number">1</span>,<span class="number">1</span>)*X2(<span class="number">2</span>,<span class="number">2</span>)),X2(<span class="number">1</span>,<span class="number">3</span>)/<span class="built_in">sqrt</span>(X2(<span class="number">1</span>,<span class="number">1</span>)*X2(<span class="number">3</span>,<span class="number">3</span>)),X2(<span class="number">1</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(X2(<span class="number">1</span>,<span class="number">1</span>)*X2(<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line">            X2(<span class="number">1</span>,<span class="number">2</span>)/<span class="built_in">sqrt</span>(X2(<span class="number">1</span>,<span class="number">1</span>)*X2(<span class="number">2</span>,<span class="number">2</span>)),<span class="number">1</span>,X2(<span class="number">2</span>,<span class="number">3</span>)/<span class="built_in">sqrt</span>(X2(<span class="number">2</span>,<span class="number">2</span>)*X2(<span class="number">3</span>,<span class="number">3</span>)),X2(<span class="number">2</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(X2(<span class="number">2</span>,<span class="number">2</span>)*X2(<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line">            X2(<span class="number">1</span>,<span class="number">3</span>)/<span class="built_in">sqrt</span>(X2(<span class="number">1</span>,<span class="number">1</span>)*X2(<span class="number">3</span>,<span class="number">3</span>)),X2(<span class="number">2</span>,<span class="number">3</span>)/<span class="built_in">sqrt</span>(X2(<span class="number">2</span>,<span class="number">2</span>)*X2(<span class="number">3</span>,<span class="number">3</span>)),<span class="number">1</span>,X2(<span class="number">3</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(X2(<span class="number">3</span>,<span class="number">3</span>)*X2(<span class="number">4</span>,<span class="number">4</span>));</span><br><span class="line">            X2(<span class="number">1</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(X2(<span class="number">1</span>,<span class="number">1</span>)*X2(<span class="number">4</span>,<span class="number">4</span>)),X2(<span class="number">2</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(X2(<span class="number">2</span>,<span class="number">2</span>)*X2(<span class="number">4</span>,<span class="number">4</span>)),X2(<span class="number">3</span>,<span class="number">4</span>)/<span class="built_in">sqrt</span>(X2(<span class="number">3</span>,<span class="number">3</span>)*X2(<span class="number">4</span>,<span class="number">4</span>)),<span class="number">1</span>];</span><br><span class="line">    theta&#123;<span class="number">3</span>&#125;=ttheta(<span class="number">33</span>);</span><br><span class="line">    theta&#123;<span class="number">4</span>&#125;=ttheta(<span class="number">34</span>);</span><br><span class="line">    theta&#123;<span class="number">5</span>&#125;=ttheta(<span class="number">35</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> theta&#123;<span class="number">5</span>&#125;==<span class="number">0</span></span><br><span class="line">    theta&#123;<span class="number">5</span>&#125;=theta&#123;<span class="number">5</span>&#125;+<span class="number">0.0001</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">th1=theta&#123;<span class="number">1</span>&#125;;</span><br><span class="line">th2=theta&#123;<span class="number">2</span>&#125;;</span><br><span class="line">th3=theta&#123;<span class="number">3</span>&#125;;</span><br><span class="line">th4=theta&#123;<span class="number">4</span>&#125;;</span><br><span class="line">th5=theta&#123;<span class="number">5</span>&#125;;</span><br><span class="line">y=<span class="number">0</span>;</span><br><span class="line">Y=<span class="built_in">zeros</span>(<span class="number">1</span>,N);</span><br><span class="line"><span class="keyword">parfor</span> <span class="built_in">j</span>=<span class="number">1</span>:N</span><br><span class="line">    Y(<span class="built_in">j</span>)=<span class="built_in">log</span>(det(th1)^(<span class="number">-1</span>/<span class="number">2</span>)*<span class="built_in">exp</span>(<span class="number">-1</span>/<span class="number">2</span>*n(<span class="built_in">j</span>,:)*(th1^(<span class="number">1</span>)-<span class="built_in">eye</span>(<span class="number">4</span>))*n(<span class="built_in">j</span>,:)'))*puz(<span class="built_in">j</span>,<span class="number">1</span>)+...</span><br><span class="line">         <span class="built_in">log</span>(det(th2)^(<span class="number">-1</span>/<span class="number">2</span>)*<span class="built_in">gamma</span>((nuhat+<span class="number">4</span>)/<span class="number">2</span>)*<span class="built_in">gamma</span>(nuhat/<span class="number">2</span>)^(<span class="number">3</span>)*(<span class="number">1</span>+t(<span class="built_in">j</span>,:)*th2^(<span class="number">-1</span>)*t(<span class="built_in">j</span>,:)'/nuhat)^(-(nuhat+<span class="number">4</span>)/<span class="number">2</span>)/((<span class="built_in">gamma</span>((nuhat+<span class="number">1</span>)/<span class="number">2</span>))^<span class="number">4</span>*(<span class="number">1</span>+t(<span class="built_in">j</span>,<span class="number">1</span>)^<span class="number">2</span>/nuhat)^(-(nuhat+<span class="number">1</span>)/<span class="number">2</span>)*(<span class="number">1</span>+t(<span class="built_in">j</span>,<span class="number">2</span>)^<span class="number">2</span>/nuhat)^(-(nuhat+<span class="number">1</span>)/<span class="number">2</span>)*(<span class="number">1</span>+t(<span class="built_in">j</span>,<span class="number">3</span>)^<span class="number">2</span>/nuhat)^(-(nuhat+<span class="number">1</span>)/<span class="number">2</span>)*(<span class="number">1</span>+t(<span class="built_in">j</span>,<span class="number">4</span>)^<span class="number">2</span>/nuhat)^(-(nuhat+<span class="number">1</span>)/<span class="number">2</span>)))*puz(<span class="built_in">j</span>,<span class="number">2</span>)+...</span><br><span class="line">         <span class="built_in">log</span>((<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^th3)^(<span class="number">1</span>/th3))*(-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*((-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^th3)^(<span class="number">4</span>/th3 - <span class="number">4</span>))/(M(<span class="built_in">j</span>)*U(<span class="built_in">j</span>)*V(<span class="built_in">j</span>)*Z(<span class="built_in">j</span>)) + (th3^<span class="number">2</span>*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^th3)^(<span class="number">1</span>/th3))*(-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(<span class="number">1</span>/th3 - <span class="number">1</span>)^<span class="number">2</span>*((-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^th3)^(<span class="number">2</span>/th3 - <span class="number">4</span>))/(M(<span class="built_in">j</span>)*U(<span class="built_in">j</span>)*V(<span class="built_in">j</span>)*Z(<span class="built_in">j</span>)) + (th3^<span class="number">2</span>*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^th3)^(<span class="number">1</span>/th3))*(-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(<span class="number">2</span>/th3 - <span class="number">2</span>)*(<span class="number">2</span>/th3 - <span class="number">3</span>)*((-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^th3)^(<span class="number">2</span>/th3 - <span class="number">4</span>))/(M(<span class="built_in">j</span>)*U(<span class="built_in">j</span>)*V(<span class="built_in">j</span>)*Z(<span class="built_in">j</span>)) - (<span class="number">2</span>*th3*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^th3)^(<span class="number">1</span>/th3))*(-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(<span class="number">1</span>/th3 - <span class="number">1</span>)*((-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^th3)^(<span class="number">1</span>/th3 - <span class="number">2</span>)*((-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^th3)^(<span class="number">2</span>/th3 - <span class="number">2</span>))/(M(<span class="built_in">j</span>)*U(<span class="built_in">j</span>)*V(<span class="built_in">j</span>)*Z(<span class="built_in">j</span>)) - (<span class="number">2</span>*th3*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^th3)^(<span class="number">1</span>/th3))*(-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(<span class="number">2</span>/th3 - <span class="number">2</span>)*((-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^th3)^(<span class="number">1</span>/th3 - <span class="number">1</span>)*((-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^th3)^(<span class="number">2</span>/th3 - <span class="number">3</span>))/(M(<span class="built_in">j</span>)*U(<span class="built_in">j</span>)*V(<span class="built_in">j</span>)*Z(<span class="built_in">j</span>)) - (th3^<span class="number">3</span>*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^th3)^(<span class="number">1</span>/th3))*(-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(<span class="number">1</span>/th3 - <span class="number">1</span>)*(<span class="number">1</span>/th3 - <span class="number">2</span>)*(<span class="number">1</span>/th3 - <span class="number">3</span>)*((-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^th3)^(<span class="number">1</span>/th3 - <span class="number">4</span>))/(M(<span class="built_in">j</span>)*U(<span class="built_in">j</span>)*V(<span class="built_in">j</span>)*Z(<span class="built_in">j</span>)) + (<span class="number">2</span>*th3^<span class="number">2</span>*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^th3)^(<span class="number">1</span>/th3))*(-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^(th3 - <span class="number">1</span>)*(<span class="number">1</span>/th3 - <span class="number">1</span>)*(<span class="number">1</span>/th3 - <span class="number">2</span>)*((-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^th3)^(<span class="number">1</span>/th3 - <span class="number">1</span>)*((-<span class="built_in">log</span>(M(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^th3 + (-<span class="built_in">log</span>(Z(<span class="built_in">j</span>)))^th3)^(<span class="number">1</span>/th3 - <span class="number">3</span>))/(M(<span class="built_in">j</span>)*U(<span class="built_in">j</span>)*V(<span class="built_in">j</span>)*Z(<span class="built_in">j</span>)))*puz(<span class="built_in">j</span>,<span class="number">3</span>)+...</span><br><span class="line">         <span class="built_in">log</span>((th4^<span class="number">3</span>*(<span class="number">1</span>/th4 + <span class="number">1</span>)*(<span class="number">1</span>/th4 + <span class="number">2</span>)*(<span class="number">1</span>/th4 + <span class="number">3</span>))/(M(<span class="built_in">j</span>)^(th4 + <span class="number">1</span>)*U(<span class="built_in">j</span>)^(th4 + <span class="number">1</span>)*V(<span class="built_in">j</span>)^(th4 + <span class="number">1</span>)*Z(<span class="built_in">j</span>)^(th4 + <span class="number">1</span>)*(<span class="number">1</span>/M(<span class="built_in">j</span>)^th4 + <span class="number">1</span>/U(<span class="built_in">j</span>)^th4 + <span class="number">1</span>/V(<span class="built_in">j</span>)^th4 + <span class="number">1</span>/Z(<span class="built_in">j</span>)^th4 - <span class="number">3</span>)^(<span class="number">1</span>/th4 + <span class="number">4</span>)))*puz(<span class="built_in">j</span>,<span class="number">4</span>)+...</span><br><span class="line">         <span class="built_in">log</span>((<span class="number">7</span>*th5^<span class="number">3</span>*<span class="built_in">exp</span>(<span class="number">2</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-M(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="number">2</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-U(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="number">2</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-V(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="number">2</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-Z(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)))*<span class="built_in">exp</span>(-M(<span class="built_in">j</span>)*th5)*<span class="built_in">exp</span>(-U(<span class="built_in">j</span>)*th5)*<span class="built_in">exp</span>(-V(<span class="built_in">j</span>)*th5)*<span class="built_in">exp</span>(-Z(<span class="built_in">j</span>)*th5)*(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)^<span class="number">2</span>)/((<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)))*(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>) + <span class="number">1</span>)^<span class="number">2</span>*(<span class="built_in">exp</span>(-M(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-U(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-V(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-Z(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)) + (<span class="number">6</span>*th5^<span class="number">3</span>*<span class="built_in">exp</span>(<span class="number">4</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-M(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="number">4</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-U(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="number">4</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-V(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="number">4</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-Z(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)))*<span class="built_in">exp</span>(-M(<span class="built_in">j</span>)*th5)*<span class="built_in">exp</span>(-U(<span class="built_in">j</span>)*th5)*<span class="built_in">exp</span>(-V(<span class="built_in">j</span>)*th5)*<span class="built_in">exp</span>(-Z(<span class="built_in">j</span>)*th5)*(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)^<span class="number">4</span>)/((<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)))*(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>) + <span class="number">1</span>)^<span class="number">4</span>*(<span class="built_in">exp</span>(-M(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-U(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-V(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-Z(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)) - (th5^<span class="number">3</span>*<span class="built_in">exp</span>(-M(<span class="built_in">j</span>)*th5)*<span class="built_in">exp</span>(-U(<span class="built_in">j</span>)*th5)*<span class="built_in">exp</span>(-V(<span class="built_in">j</span>)*th5)*<span class="built_in">exp</span>(-Z(<span class="built_in">j</span>)*th5)*<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)))*(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>))/((<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)))*(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>) + <span class="number">1</span>)*(<span class="built_in">exp</span>(-M(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-U(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-V(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-Z(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)) - (<span class="number">12</span>*th5^<span class="number">3</span>*<span class="built_in">exp</span>(<span class="number">2</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-M(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="number">2</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-U(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="number">2</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-V(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="number">2</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-Z(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)))*<span class="built_in">exp</span>(-M(<span class="built_in">j</span>)*th5)*<span class="built_in">exp</span>(-U(<span class="built_in">j</span>)*th5)*<span class="built_in">exp</span>(-V(<span class="built_in">j</span>)*th5)*<span class="built_in">exp</span>(-Z(<span class="built_in">j</span>)*th5)*<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)))*(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)^<span class="number">3</span>)/((<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>)))*(<span class="built_in">exp</span>(-th5) - <span class="number">1</span>) + <span class="number">1</span>)^<span class="number">3</span>*(<span class="built_in">exp</span>(-M(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-U(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-V(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-Z(<span class="built_in">j</span>)*th5) - <span class="number">1</span>)))*puz(<span class="built_in">j</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">y=-sum(Y);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">toc</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h1 id="参数估计结果"><a href="#参数估计结果" class="headerlink" title="参数估计结果"></a>参数估计结果</h1><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">rho_n=[<span class="number">1.0000</span>   <span class="number">-0.4594</span>    <span class="number">0.6594</span>    <span class="number">0.3254</span></span><br><span class="line">     <span class="number">-0.4594</span>    <span class="number">1.0000</span>   <span class="number">-0.8218</span>    <span class="number">0.6426</span></span><br><span class="line">      <span class="number">0.6594</span>   <span class="number">-0.8218</span>    <span class="number">1.0000</span>   <span class="number">-0.4552</span></span><br><span class="line">      <span class="number">0.3254</span>    <span class="number">0.6426</span>   <span class="number">-0.4552</span>    <span class="number">1.0000</span>];</span><br><span class="line"></span><br><span class="line">rho_t=[<span class="number">1.0000</span>    <span class="number">0.6856</span>    <span class="number">0.6195</span>    <span class="number">0.6621</span></span><br><span class="line">      <span class="number">0.6856</span>    <span class="number">1.0000</span>    <span class="number">0.9344</span>    <span class="number">0.3696</span></span><br><span class="line">      <span class="number">0.6195</span>    <span class="number">0.9344</span>    <span class="number">1.0000</span>    <span class="number">0.3127</span></span><br><span class="line">      <span class="number">0.6621</span>    <span class="number">0.3696</span>    <span class="number">0.3127</span>    <span class="number">1.0000</span>];</span><br><span class="line"></span><br><span class="line">rho_g=<span class="number">1.9479</span>;</span><br><span class="line"></span><br><span class="line">rho_c=<span class="number">0.0010</span>;</span><br><span class="line"></span><br><span class="line">rho_f=<span class="number">2.0234</span>;</span><br><span class="line"></span><br><span class="line">omega=[<span class="number">0</span>    <span class="number">0.7098</span>    <span class="number">0.1432</span>    <span class="number">0.0364</span>    <span class="number">0.1106</span>]</span><br></pre></td></tr></table></figure>
<p>欧式距离</p>
<p>$d_m=6.6293$</p>
<p>可以看出从欧氏距离上讲，确实混合Copula模型比单个Copula建模的效果要好。<br>由于高斯Copula在多维下并不能表现出尾部相关性，因此其权重参数为0。其余的Copula基本是按照各自拟合优度占据权重。</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>MATLAB</tag>
        <tag>EM算法</tag>
      </tags>
  </entry>
  <entry>
    <title>多维形式的Copula函数推导及建模</title>
    <url>/2017/04/06/2017-04-06-%E5%A4%9A%E7%BB%B4%E5%BD%A2%E5%BC%8F%E7%9A%84Copula%E5%87%BD%E6%95%B0%E6%8E%A8%E5%AF%BC%E5%8F%8A%E5%BB%BA%E6%A8%A1/</url>
    <content><![CDATA[<h1 id="两种Copula"><a href="#两种Copula" class="headerlink" title="两种Copula"></a>两种Copula</h1><p>Copula函数主要分为两种，一种为椭圆族Copula，一种为Archimedean-Copula。其中椭圆族Copula直接给出了其多维形式，具体详见<a href="http://xueshu.baidu.com/s?wd=paperuri%3A%28a48beacab57eaa1da8adc7ac58931c9a%29&amp;filter=sc_long_sign&amp;tn=SE_xueshusource_2kduw22v&amp;sc_vurl=http%3A%2F%2Fwww.docin.com%2Fp-204143270.html%3Fref%3D360%26ref%3D360%26ref%3D360&amp;ie=utf-8&amp;sc_us=15886197312218780659" target="_blank" rel="noopener">《MATLAB统计分析与应用：40个案例分析》</a>P189。而Archimedean-Copula的函数由于各种生成元的不同导致只给出了常用的二元形式。多维形式需要手动推导。</p>
<h1 id="对多维Archimedean-Copula推导"><a href="#对多维Archimedean-Copula推导" class="headerlink" title="对多维Archimedean-Copula推导"></a>对多维Archimedean-Copula推导</h1><h2 id="对于分布函数的推导"><a href="#对于分布函数的推导" class="headerlink" title="对于分布函数的推导"></a>对于分布函数的推导</h2><p>根据<a href="http://xueshu.baidu.com/s?wd=paperuri%3A%28a48beacab57eaa1da8adc7ac58931c9a%29&amp;filter=sc_long_sign&amp;tn=SE_xueshusource_2kduw22v&amp;sc_vurl=http%3A%2F%2Fwww.docin.com%2Fp-204143270.html%3Fref%3D360%26ref%3D360%26ref%3D360&amp;ie=utf-8&amp;sc_us=15886197312218780659" target="_blank" rel="noopener">书中</a>P190给出的生成元与基础形式，推导出各自生成元的反函数，然后将生成元带入，得到四维Copula分布函数。<br><a id="more"></a><br><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Gumbelcdf =</span><br><span class="line"><span class="built_in">exp</span>(-((-<span class="built_in">log</span>(U)).^a+(-<span class="built_in">log</span>(V)).^a+(-<span class="built_in">log</span>(Z)).^a+(-<span class="built_in">log</span>(M)).^a).^(<span class="number">1.</span>/a))</span><br><span class="line"></span><br><span class="line">Claytoncdf =</span><br><span class="line">(U.^(-a)+V.^(-a)+Z.^(-a)+M.^(-a)<span class="number">-3</span>).^(<span class="number">-1.</span>/a)</span><br><span class="line"></span><br><span class="line">Frankcdf =</span><br><span class="line">-<span class="built_in">log</span>(<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>) + <span class="number">1</span>)./a</span><br></pre></td></tr></table></figure></p>
<h2 id="对于密度函数的推导"><a href="#对于密度函数的推导" class="headerlink" title="对于密度函数的推导"></a>对于密度函数的推导</h2><p>根据定义，密度函数是对分布函数中的多个样本进行多次求偏导得到的。由于函数较为复杂，手动推导会带来很大的麻烦，因而采用MATLAB程序进行推导。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all;</span><br><span class="line">syms U V Z M a d</span><br><span class="line">S1=<span class="string">'exp(-((-log(U))^a+(-log(V))^a+(-log(Z))^a+(-log(M))^a)^(1/a))'</span>;</span><br><span class="line">d=S1;</span><br><span class="line">v=[U V Z M];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">    d=diff(d,v(<span class="built_in">i</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">Gum=d</span><br><span class="line">S2=<span class="string">'(U^(-a)+V^(-a)+Z^(-a)+M^(-a)-3)^(-1/a)'</span></span><br><span class="line">d=S2;</span><br><span class="line">v=[U V Z M];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">    d=diff(d,v(<span class="built_in">i</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">Clay=d</span><br><span class="line">S3=<span class="string">'-log(exp(log((exp(-M*a) - 1)/(exp(-a) - 1)) + log((exp(-U*a) - 1)/(exp(-a) - 1)) + log((exp(-V*a) - 1)/(exp(-a) - 1)) + log((exp(-Z*a) - 1)/(exp(-a) - 1)))*(exp(-a) - 1) + 1)/a'</span>;</span><br><span class="line">d=S3;</span><br><span class="line">v=[U V Z M];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">    d=diff(d,v(<span class="built_in">i</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">Frank=d</span><br></pre></td></tr></table></figure>
<p>求得结果</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Gum =</span><br><span class="line">(<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a)).*(-<span class="built_in">log</span>(M)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(U)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(V)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(Z)).^(a - <span class="number">1</span>).*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">4.</span>/a - <span class="number">4</span>))./(M.*U.*V.*Z) + (a.^<span class="number">2.</span>*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a)).*(-<span class="built_in">log</span>(M)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(U)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(V)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(Z)).^(a - <span class="number">1</span>).*(<span class="number">1.</span>/a - <span class="number">1</span>).^<span class="number">2.</span>*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">2.</span>/a - <span class="number">4</span>))./(M.*U.*V.*Z) + (a.^<span class="number">2.</span>*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a)).*(-<span class="built_in">log</span>(M)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(U)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(V)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(Z)).^(a - <span class="number">1</span>).*(<span class="number">2.</span>/a - <span class="number">2</span>).*(<span class="number">2.</span>/a - <span class="number">3</span>).*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">2.</span>/a - <span class="number">4</span>))./(M.*U.*V.*Z) - (<span class="number">2.</span>*a.*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a)).*(-<span class="built_in">log</span>(M)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(U)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(V)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(Z)).^(a - <span class="number">1</span>).*(<span class="number">1.</span>/a - <span class="number">1</span>).*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a - <span class="number">2</span>).*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">2.</span>/a - <span class="number">2</span>))./(M.*U.*V.*Z) - (<span class="number">2.</span>*a.*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a)).*(-<span class="built_in">log</span>(M)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(U)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(V)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(Z)).^(a - <span class="number">1</span>).*(<span class="number">2.</span>/a - <span class="number">2</span>).*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a - <span class="number">1</span>).*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">2.</span>/a - <span class="number">3</span>))./(M.*U.*V.*Z) - (a.^<span class="number">3.</span>*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a)).*(-<span class="built_in">log</span>(M)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(U)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(V)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(Z)).^(a - <span class="number">1</span>).*(<span class="number">1.</span>/a - <span class="number">1</span>).*(<span class="number">1.</span>/a - <span class="number">2</span>).*(<span class="number">1.</span>/a - <span class="number">3</span>).*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a - <span class="number">4</span>))./(M.*U.*V.*Z) + (<span class="number">2.</span>*a.^<span class="number">2.</span>*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a)).*(-<span class="built_in">log</span>(M)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(U)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(V)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(Z)).^(a - <span class="number">1</span>).*(<span class="number">1.</span>/a - <span class="number">1</span>).*(<span class="number">1.</span>/a - <span class="number">2</span>).*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a - <span class="number">1</span>).*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a - <span class="number">3</span>))./(M.*U.*V.*Z)</span><br><span class="line"></span><br><span class="line">Clay =</span><br><span class="line">(a.^<span class="number">3.</span>*(<span class="number">1.</span>/a + <span class="number">1</span>).*(<span class="number">1.</span>/a + <span class="number">2</span>).*(<span class="number">1.</span>/a + <span class="number">3</span>))./(M.^(a + <span class="number">1</span>).*U.^(a + <span class="number">1</span>).*V.^(a + <span class="number">1</span>).*Z.^(a + <span class="number">1</span>).*(<span class="number">1.</span>/M.^a + <span class="number">1.</span>/U.^a + <span class="number">1.</span>/V.^a + <span class="number">1.</span>/Z.^a - <span class="number">3</span>).^(<span class="number">1.</span>/a + <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">Frank =</span><br><span class="line">(<span class="number">7.</span>*a.^<span class="number">3.</span>*<span class="built_in">exp</span>(<span class="number">2.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">2.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">2.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">2.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*<span class="built_in">exp</span>(-M.*a).*<span class="built_in">exp</span>(-U.*a).*<span class="built_in">exp</span>(-V.*a).*<span class="built_in">exp</span>(-Z.*a).*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>).^<span class="number">2</span>)./((<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>) + <span class="number">1</span>).^<span class="number">2.</span>*(<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)) + (<span class="number">6.</span>*a.^<span class="number">3.</span>*<span class="built_in">exp</span>(<span class="number">4.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">4.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">4.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">4.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*<span class="built_in">exp</span>(-M.*a).*<span class="built_in">exp</span>(-U.*a).*<span class="built_in">exp</span>(-V.*a).*<span class="built_in">exp</span>(-Z.*a).*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>).^<span class="number">4</span>)./((<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>) + <span class="number">1</span>).^<span class="number">4.</span>*(<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)) - (a.^<span class="number">3.</span>*<span class="built_in">exp</span>(-M.*a).*<span class="built_in">exp</span>(-U.*a).*<span class="built_in">exp</span>(-V.*a).*<span class="built_in">exp</span>(-Z.*a).*<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))./((<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>) + <span class="number">1</span>).*(<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)) - (<span class="number">12.</span>*a.^<span class="number">3.</span>*<span class="built_in">exp</span>(<span class="number">2.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">2.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">2.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">2.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*<span class="built_in">exp</span>(-M.*a).*<span class="built_in">exp</span>(-U.*a).*<span class="built_in">exp</span>(-V.*a).*<span class="built_in">exp</span>(-Z.*a).*<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>).^<span class="number">3</span>)./((<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>) + <span class="number">1</span>).^<span class="number">3.</span>*(<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p><em>注：以上是经过修正后能直接进行矩阵计算的结果，修正方法为将原结果中的`</em>,^,/<code>转换为</code>.<em>,.^,./`</em></p>
<h1 id="多维Copula参数估计"><a href="#多维Copula参数估计" class="headerlink" title="多维Copula参数估计"></a>多维Copula参数估计</h1><p>MATLAB自带的函数不支持多维的Archimdean-Copula的参数估计与函数计算，因此需要自己写出极大似然估计算法。由于MATLAB自带的极大似然估计函数<code>mle</code>不支持多维变量的输入，因此先计算出对数似然函数，然后利用非线性优化函数<code>fmincon</code>求解对应的参数值</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">para</span>=<span class="title">copula4fit</span><span class="params">(name,data)</span></span></span><br><span class="line">options = optimset(<span class="string">'Algorithm'</span>,<span class="string">'interior-point'</span>,<span class="string">'MaxFunEvals'</span>,<span class="number">1000</span>,<span class="string">'Display'</span>,<span class="string">'iter-detailed'</span>,<span class="string">'TolCon'</span>,<span class="number">10</span>^<span class="number">-12</span>,<span class="string">'TolFun'</span>,<span class="number">10</span>^<span class="number">-4</span>,<span class="string">'TolX'</span>,<span class="number">10</span>^<span class="number">-6</span>);</span><br><span class="line"><span class="keyword">switch</span> name</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Gumbel'</span></span><br><span class="line"></span><br><span class="line">        lower = <span class="number">1.1</span>;</span><br><span class="line">        a = <span class="number">2</span>;</span><br><span class="line">        [ para LL6] = fmincon(@mlepdffun_G,a,[],[],[],[],lower,[],[],options);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Clayton'</span></span><br><span class="line">        lower = <span class="number">0.0001</span>;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        [ para LL2] = fmincon(@mlepdffun_C,a,[],[],[],[],lower,[],[],options);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Frank'</span></span><br><span class="line">        theta0 = <span class="number">1</span>;</span><br><span class="line">        [ para LL5] = fmincon(@mlepdffun_F,theta0,[],[],[],[],[],[],[],options);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">mlepdffun_G</span><span class="params">(a)</span></span></span><br><span class="line">    U=data(:,<span class="number">1</span>);</span><br><span class="line">    V=data(:,<span class="number">2</span>);</span><br><span class="line">    Z=data(:,<span class="number">3</span>);</span><br><span class="line">    M=data(:,<span class="number">4</span>);</span><br><span class="line">    N=<span class="built_in">numel</span>(U);</span><br><span class="line">    Y=<span class="built_in">zeros</span>(<span class="built_in">size</span>(U));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">parfor</span> <span class="built_in">i</span>=<span class="number">1</span>:N</span><br><span class="line">        Y(<span class="built_in">i</span>)=<span class="built_in">log</span>((<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^a)^(<span class="number">1</span>/a))*(-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*((-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^a)^(<span class="number">4</span>/a - <span class="number">4</span>))/(M(<span class="built_in">i</span>)*U(<span class="built_in">i</span>)*V(<span class="built_in">i</span>)*Z(<span class="built_in">i</span>)) + (a^<span class="number">2</span>*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^a)^(<span class="number">1</span>/a))*(-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(<span class="number">1</span>/a - <span class="number">1</span>)^<span class="number">2</span>*((-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^a)^(<span class="number">2</span>/a - <span class="number">4</span>))/(M(<span class="built_in">i</span>)*U(<span class="built_in">i</span>)*V(<span class="built_in">i</span>)*Z(<span class="built_in">i</span>)) + (a^<span class="number">2</span>*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^a)^(<span class="number">1</span>/a))*(-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(<span class="number">2</span>/a - <span class="number">2</span>)*(<span class="number">2</span>/a - <span class="number">3</span>)*((-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^a)^(<span class="number">2</span>/a - <span class="number">4</span>))/(M(<span class="built_in">i</span>)*U(<span class="built_in">i</span>)*V(<span class="built_in">i</span>)*Z(<span class="built_in">i</span>)) - (<span class="number">2</span>*a*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^a)^(<span class="number">1</span>/a))*(-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(<span class="number">1</span>/a - <span class="number">1</span>)*((-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^a)^(<span class="number">1</span>/a - <span class="number">2</span>)*((-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^a)^(<span class="number">2</span>/a - <span class="number">2</span>))/(M(<span class="built_in">i</span>)*U(<span class="built_in">i</span>)*V(<span class="built_in">i</span>)*Z(<span class="built_in">i</span>)) - (<span class="number">2</span>*a*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^a)^(<span class="number">1</span>/a))*(-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(<span class="number">2</span>/a - <span class="number">2</span>)*((-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^a)^(<span class="number">1</span>/a - <span class="number">1</span>)*((-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^a)^(<span class="number">2</span>/a - <span class="number">3</span>))/(M(<span class="built_in">i</span>)*U(<span class="built_in">i</span>)*V(<span class="built_in">i</span>)*Z(<span class="built_in">i</span>)) - (a^<span class="number">3</span>*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^a)^(<span class="number">1</span>/a))*(-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(<span class="number">1</span>/a - <span class="number">1</span>)*(<span class="number">1</span>/a - <span class="number">2</span>)*(<span class="number">1</span>/a - <span class="number">3</span>)*((-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^a)^(<span class="number">1</span>/a - <span class="number">4</span>))/(M(<span class="built_in">i</span>)*U(<span class="built_in">i</span>)*V(<span class="built_in">i</span>)*Z(<span class="built_in">i</span>)) + (<span class="number">2</span>*a^<span class="number">2</span>*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^a)^(<span class="number">1</span>/a))*(-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^(a - <span class="number">1</span>)*(<span class="number">1</span>/a - <span class="number">1</span>)*(<span class="number">1</span>/a - <span class="number">2</span>)*((-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^a)^(<span class="number">1</span>/a - <span class="number">1</span>)*((-<span class="built_in">log</span>(M(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(U(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(V(<span class="built_in">i</span>)))^a + (-<span class="built_in">log</span>(Z(<span class="built_in">i</span>)))^a)^(<span class="number">1</span>/a - <span class="number">3</span>))/(M(<span class="built_in">i</span>)*U(<span class="built_in">i</span>)*V(<span class="built_in">i</span>)*Z(<span class="built_in">i</span>)));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    y=-sum(Y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">mlepdffun_C</span><span class="params">(a)</span></span></span><br><span class="line">    U=data(:,<span class="number">1</span>);</span><br><span class="line">    V=data(:,<span class="number">2</span>);</span><br><span class="line">    Z=data(:,<span class="number">3</span>);</span><br><span class="line">    M=data(:,<span class="number">4</span>);</span><br><span class="line">    N=<span class="built_in">numel</span>(U);</span><br><span class="line">    Y=<span class="built_in">zeros</span>(<span class="built_in">size</span>(U));</span><br><span class="line">    <span class="keyword">parfor</span> <span class="built_in">i</span>=<span class="number">1</span>:N</span><br><span class="line">        Y(<span class="built_in">i</span>)=<span class="built_in">log</span>((a^<span class="number">3</span>*(<span class="number">1</span>/a + <span class="number">1</span>)*(<span class="number">1</span>/a + <span class="number">2</span>)*(<span class="number">1</span>/a + <span class="number">3</span>))/(M(<span class="built_in">i</span>)^(a + <span class="number">1</span>)*U(<span class="built_in">i</span>)^(a + <span class="number">1</span>)*V(<span class="built_in">i</span>)^(a + <span class="number">1</span>)*Z(<span class="built_in">i</span>)^(a + <span class="number">1</span>)*(<span class="number">1</span>/M(<span class="built_in">i</span>)^a + <span class="number">1</span>/U(<span class="built_in">i</span>)^a + <span class="number">1</span>/V(<span class="built_in">i</span>)^a + <span class="number">1</span>/Z(<span class="built_in">i</span>)^a - <span class="number">3</span>)^(<span class="number">1</span>/a + <span class="number">4</span>)));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    y=-sum(Y);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">mlepdffun_F</span><span class="params">(a)</span></span></span><br><span class="line">    U=data(:,<span class="number">1</span>);</span><br><span class="line">    V=data(:,<span class="number">2</span>);</span><br><span class="line">    Z=data(:,<span class="number">3</span>);</span><br><span class="line">    M=data(:,<span class="number">4</span>);</span><br><span class="line">    N=<span class="built_in">numel</span>(U);</span><br><span class="line">    Y=<span class="built_in">zeros</span>(<span class="built_in">size</span>(U));</span><br><span class="line">    <span class="keyword">parfor</span> <span class="built_in">i</span>=<span class="number">1</span>:N</span><br><span class="line">        Y(<span class="built_in">i</span>)=<span class="built_in">log</span>((<span class="number">7</span>*a^<span class="number">3</span>*<span class="built_in">exp</span>(<span class="number">2</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-M(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">2</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-U(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">2</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-V(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">2</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-Z(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)))*<span class="built_in">exp</span>(-M(<span class="built_in">i</span>)*a)*<span class="built_in">exp</span>(-U(<span class="built_in">i</span>)*a)*<span class="built_in">exp</span>(-V(<span class="built_in">i</span>)*a)*<span class="built_in">exp</span>(-Z(<span class="built_in">i</span>)*a)*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)^<span class="number">2</span>)/((<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)))*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>) + <span class="number">1</span>)^<span class="number">2</span>*(<span class="built_in">exp</span>(-M(<span class="built_in">i</span>)*a) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-U(<span class="built_in">i</span>)*a) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-V(<span class="built_in">i</span>)*a) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-Z(<span class="built_in">i</span>)*a) - <span class="number">1</span>)) + (<span class="number">6</span>*a^<span class="number">3</span>*<span class="built_in">exp</span>(<span class="number">4</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-M(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">4</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-U(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">4</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-V(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">4</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-Z(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)))*<span class="built_in">exp</span>(-M(<span class="built_in">i</span>)*a)*<span class="built_in">exp</span>(-U(<span class="built_in">i</span>)*a)*<span class="built_in">exp</span>(-V(<span class="built_in">i</span>)*a)*<span class="built_in">exp</span>(-Z(<span class="built_in">i</span>)*a)*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)^<span class="number">4</span>)/((<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)))*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>) + <span class="number">1</span>)^<span class="number">4</span>*(<span class="built_in">exp</span>(-M(<span class="built_in">i</span>)*a) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-U(<span class="built_in">i</span>)*a) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-V(<span class="built_in">i</span>)*a) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-Z(<span class="built_in">i</span>)*a) - <span class="number">1</span>)) - (a^<span class="number">3</span>*<span class="built_in">exp</span>(-M(<span class="built_in">i</span>)*a)*<span class="built_in">exp</span>(-U(<span class="built_in">i</span>)*a)*<span class="built_in">exp</span>(-V(<span class="built_in">i</span>)*a)*<span class="built_in">exp</span>(-Z(<span class="built_in">i</span>)*a)*<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)))*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))/((<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)))*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>) + <span class="number">1</span>)*(<span class="built_in">exp</span>(-M(<span class="built_in">i</span>)*a) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-U(<span class="built_in">i</span>)*a) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-V(<span class="built_in">i</span>)*a) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-Z(<span class="built_in">i</span>)*a) - <span class="number">1</span>)) - (<span class="number">12</span>*a^<span class="number">3</span>*<span class="built_in">exp</span>(<span class="number">2</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-M(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">2</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-U(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">2</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-V(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">2</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-Z(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)))*<span class="built_in">exp</span>(-M(<span class="built_in">i</span>)*a)*<span class="built_in">exp</span>(-U(<span class="built_in">i</span>)*a)*<span class="built_in">exp</span>(-V(<span class="built_in">i</span>)*a)*<span class="built_in">exp</span>(-Z(<span class="built_in">i</span>)*a)*<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)))*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)^<span class="number">3</span>)/((<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z(<span class="built_in">i</span>)*a) - <span class="number">1</span>)/(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)))*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>) + <span class="number">1</span>)^<span class="number">3</span>*(<span class="built_in">exp</span>(-M(<span class="built_in">i</span>)*a) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-U(<span class="built_in">i</span>)*a) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-V(<span class="built_in">i</span>)*a) - <span class="number">1</span>)*(<span class="built_in">exp</span>(-Z(<span class="built_in">i</span>)*a) - <span class="number">1</span>)));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    y=-sum(Y);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h1 id="多维Copula函数值计算"><a href="#多维Copula函数值计算" class="headerlink" title="多维Copula函数值计算"></a>多维Copula函数值计算</h1><h2 id="多维分布函数"><a href="#多维分布函数" class="headerlink" title="多维分布函数"></a>多维分布函数</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>=<span class="title">copula4cdf</span><span class="params">(name,data,a)</span></span></span><br><span class="line">U=data(:,<span class="number">1</span>);</span><br><span class="line">V=data(:,<span class="number">2</span>);</span><br><span class="line">Z=data(:,<span class="number">3</span>);</span><br><span class="line">M=data(:,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">switch</span> name</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Gumbel'</span></span><br><span class="line">        c=<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(U)).^a+(-<span class="built_in">log</span>(V)).^a+(-<span class="built_in">log</span>(Z)).^a+(-<span class="built_in">log</span>(M)).^a).^(<span class="number">1.</span>/a));</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Clayton'</span></span><br><span class="line">        c=(U.^(-a)+V.^(-a)+Z.^(-a)+M.^(-a)<span class="number">-3</span>).^(<span class="number">-1.</span>/a);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Frank'</span></span><br><span class="line">        c=-<span class="built_in">log</span>(<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>) + <span class="number">1</span>)./a;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="多维密度函数"><a href="#多维密度函数" class="headerlink" title="多维密度函数"></a>多维密度函数</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p</span>=<span class="title">copula4pdf</span><span class="params">(name,data,a)</span></span></span><br><span class="line">U=data(:,<span class="number">1</span>);</span><br><span class="line">V=data(:,<span class="number">2</span>);</span><br><span class="line">Z=data(:,<span class="number">3</span>);</span><br><span class="line">M=data(:,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">switch</span> name</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Gumbel'</span></span><br><span class="line">        p=(<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a)).*(-<span class="built_in">log</span>(M)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(U)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(V)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(Z)).^(a - <span class="number">1</span>).*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">4.</span>/a - <span class="number">4</span>))./(M.*U.*V.*Z) + (a.^<span class="number">2.</span>*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a)).*(-<span class="built_in">log</span>(M)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(U)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(V)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(Z)).^(a - <span class="number">1</span>).*(<span class="number">1.</span>/a - <span class="number">1</span>).^<span class="number">2.</span>*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">2.</span>/a - <span class="number">4</span>))./(M.*U.*V.*Z) + (a.^<span class="number">2.</span>*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a)).*(-<span class="built_in">log</span>(M)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(U)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(V)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(Z)).^(a - <span class="number">1</span>).*(<span class="number">2.</span>/a - <span class="number">2</span>).*(<span class="number">2.</span>/a - <span class="number">3</span>).*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">2.</span>/a - <span class="number">4</span>))./(M.*U.*V.*Z) - (<span class="number">2.</span>*a.*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a)).*(-<span class="built_in">log</span>(M)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(U)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(V)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(Z)).^(a - <span class="number">1</span>).*(<span class="number">1.</span>/a - <span class="number">1</span>).*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a - <span class="number">2</span>).*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">2.</span>/a - <span class="number">2</span>))./(M.*U.*V.*Z) - (<span class="number">2.</span>*a.*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a)).*(-<span class="built_in">log</span>(M)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(U)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(V)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(Z)).^(a - <span class="number">1</span>).*(<span class="number">2.</span>/a - <span class="number">2</span>).*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a - <span class="number">1</span>).*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">2.</span>/a - <span class="number">3</span>))./(M.*U.*V.*Z) - (a.^<span class="number">3.</span>*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a)).*(-<span class="built_in">log</span>(M)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(U)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(V)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(Z)).^(a - <span class="number">1</span>).*(<span class="number">1.</span>/a - <span class="number">1</span>).*(<span class="number">1.</span>/a - <span class="number">2</span>).*(<span class="number">1.</span>/a - <span class="number">3</span>).*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a - <span class="number">4</span>))./(M.*U.*V.*Z) + (<span class="number">2.</span>*a.^<span class="number">2.</span>*<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a)).*(-<span class="built_in">log</span>(M)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(U)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(V)).^(a - <span class="number">1</span>).*(-<span class="built_in">log</span>(Z)).^(a - <span class="number">1</span>).*(<span class="number">1.</span>/a - <span class="number">1</span>).*(<span class="number">1.</span>/a - <span class="number">2</span>).*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a - <span class="number">1</span>).*((-<span class="built_in">log</span>(M)).^a + (-<span class="built_in">log</span>(U)).^a + (-<span class="built_in">log</span>(V)).^a + (-<span class="built_in">log</span>(Z)).^a).^(<span class="number">1.</span>/a - <span class="number">3</span>))./(M.*U.*V.*Z);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Clayton'</span></span><br><span class="line">        p=(a.^<span class="number">3.</span>*(<span class="number">1.</span>/a + <span class="number">1</span>).*(<span class="number">1.</span>/a + <span class="number">2</span>).*(<span class="number">1.</span>/a + <span class="number">3</span>))./(M.^(a + <span class="number">1</span>).*U.^(a + <span class="number">1</span>).*V.^(a + <span class="number">1</span>).*Z.^(a + <span class="number">1</span>).*(<span class="number">1.</span>/M.^a + <span class="number">1.</span>/U.^a + <span class="number">1.</span>/V.^a + <span class="number">1.</span>/Z.^a - <span class="number">3</span>).^(<span class="number">1.</span>/a + <span class="number">4</span>));</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Frank'</span></span><br><span class="line">        p=(<span class="number">7.</span>*a.^<span class="number">3.</span>*<span class="built_in">exp</span>(<span class="number">2.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">2.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">2.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">2.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*<span class="built_in">exp</span>(-M.*a).*<span class="built_in">exp</span>(-U.*a).*<span class="built_in">exp</span>(-V.*a).*<span class="built_in">exp</span>(-Z.*a).*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>).^<span class="number">2</span>)./((<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>) + <span class="number">1</span>).^<span class="number">2.</span>*(<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)) + (<span class="number">6.</span>*a.^<span class="number">3.</span>*<span class="built_in">exp</span>(<span class="number">4.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">4.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">4.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">4.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*<span class="built_in">exp</span>(-M.*a).*<span class="built_in">exp</span>(-U.*a).*<span class="built_in">exp</span>(-V.*a).*<span class="built_in">exp</span>(-Z.*a).*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>).^<span class="number">4</span>)./((<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>) + <span class="number">1</span>).^<span class="number">4.</span>*(<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)) - (a.^<span class="number">3.</span>*<span class="built_in">exp</span>(-M.*a).*<span class="built_in">exp</span>(-U.*a).*<span class="built_in">exp</span>(-V.*a).*<span class="built_in">exp</span>(-Z.*a).*<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))./((<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>) + <span class="number">1</span>).*(<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)) - (<span class="number">12.</span>*a.^<span class="number">3.</span>*<span class="built_in">exp</span>(<span class="number">2.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">2.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">2.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="number">2.</span>*<span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*<span class="built_in">exp</span>(-M.*a).*<span class="built_in">exp</span>(-U.*a).*<span class="built_in">exp</span>(-V.*a).*<span class="built_in">exp</span>(-Z.*a).*<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>).^<span class="number">3</span>)./((<span class="built_in">exp</span>(<span class="built_in">log</span>((<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>)) + <span class="built_in">log</span>((<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>)./(<span class="built_in">exp</span>(-a) - <span class="number">1</span>))).*(<span class="built_in">exp</span>(-a) - <span class="number">1</span>) + <span class="number">1</span>).^<span class="number">3.</span>*(<span class="built_in">exp</span>(-M.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-U.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-V.*a) - <span class="number">1</span>).*(<span class="built_in">exp</span>(-Z.*a) - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h1 id="多维单一Copula建模"><a href="#多维单一Copula建模" class="headerlink" title="多维单一Copula建模"></a>多维单一Copula建模</h1><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">rho_n=copulafit(<span class="string">'Gaussian'</span>,[QWC,BDQC,GHKC,CMC]);</span><br><span class="line">[rho_t,df]=copulafit(<span class="string">'t'</span>,[QWC,BDQC,GHKC,CMC]);</span><br><span class="line">rho_g=copula4fit(<span class="string">'Gumbel'</span>,[QWC,BDQC,GHKC,CMC]);</span><br><span class="line">rho_c=copula4fit(<span class="string">'Clayton'</span>,[QWC,BDQC,GHKC,CMC]);</span><br><span class="line">rho_f=copula4fit(<span class="string">'Frank'</span>,[QWC,BDQC,GHKC,CMC]);</span><br><span class="line">[fx,xsort]=ecdf(qw);</span><br><span class="line">[fy,ysort]=ecdf(bdq);</span><br><span class="line">[fz,zsort]=ecdf(ghk);</span><br><span class="line">[fn,nsort]=ecdf(cm);</span><br><span class="line">U1=spline(xsort(<span class="number">2</span>:<span class="keyword">end</span>),fx(<span class="number">2</span>:<span class="keyword">end</span>),qw);</span><br><span class="line">U2=spline(ysort(<span class="number">2</span>:<span class="keyword">end</span>),fy(<span class="number">2</span>:<span class="keyword">end</span>),bdq);</span><br><span class="line">U3=spline(zsort(<span class="number">2</span>:<span class="keyword">end</span>),fz(<span class="number">2</span>:<span class="keyword">end</span>),ghk);</span><br><span class="line">U4=spline(nsort(<span class="number">2</span>:<span class="keyword">end</span>),fn(<span class="number">2</span>:<span class="keyword">end</span>),cm);</span><br><span class="line">C=@(u1,u2,u3,u4)<span class="built_in">mean</span>((U1&lt;=u1).*(U2&lt;=u2).*(U3&lt;=u3).*(U4&lt;=u4));</span><br><span class="line">CU=<span class="built_in">zeros</span>(<span class="built_in">size</span>(U1(:)));</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">numel</span>(U1)</span><br><span class="line">    CU(<span class="built_in">i</span>)=C(U1(<span class="built_in">i</span>),U2(<span class="built_in">i</span>),U3(<span class="built_in">i</span>),U4(<span class="built_in">i</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">C_n=copulacdf(<span class="string">'Gaussian'</span>,[QWC,BDQC,GHKC,CMC],rho_n);</span><br><span class="line">C_t=copulacdf(<span class="string">'t'</span>,[QWC,BDQC,GHKC,CMC],rho_t,df);</span><br><span class="line">C_g=copula4cdf(<span class="string">'Gumbel'</span>,[QWC,BDQC,GHKC,CMC],rho_g);</span><br><span class="line">C_c=copula4cdf(<span class="string">'Clayton'</span>,[QWC,BDQC,GHKC,CMC],rho_c);</span><br><span class="line">C_f=copula4cdf(<span class="string">'Frank'</span>,[QWC,BDQC,GHKC,CMC],rho_f);</span><br><span class="line"></span><br><span class="line">d_n=(CU-C_n)'*(CU-C_n);</span><br><span class="line">d_t=(CU-C_t)'*(CU-C_t);</span><br><span class="line">d_g=(CU-C_g)'*(CU-C_g);</span><br><span class="line">d_c=(CU-C_c)'*(CU-C_c);</span><br><span class="line">d_f=(CU-C_f)'*(CU-C_f);</span><br></pre></td></tr></table></figure>
<h2 id="结果及评价"><a href="#结果及评价" class="headerlink" title="结果及评价"></a>结果及评价</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">rho_n =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span>    <span class="number">0.6339</span>    <span class="number">0.5346</span>    <span class="number">0.6108</span></span><br><span class="line">    <span class="number">0.6339</span>    <span class="number">1.0000</span>    <span class="number">0.8092</span>    <span class="number">0.3639</span></span><br><span class="line">    <span class="number">0.5346</span>    <span class="number">0.8092</span>    <span class="number">1.0000</span>    <span class="number">0.3028</span></span><br><span class="line">    <span class="number">0.6108</span>    <span class="number">0.3639</span>    <span class="number">0.3028</span>    <span class="number">1.0000</span></span><br><span class="line"></span><br><span class="line">rho_t =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span>    <span class="number">0.6441</span>    <span class="number">0.5591</span>    <span class="number">0.6179</span></span><br><span class="line">    <span class="number">0.6441</span>    <span class="number">1.0000</span>    <span class="number">0.8427</span>    <span class="number">0.3769</span></span><br><span class="line">    <span class="number">0.5591</span>    <span class="number">0.8427</span>    <span class="number">1.0000</span>    <span class="number">0.3204</span></span><br><span class="line">    <span class="number">0.6179</span>    <span class="number">0.3769</span>    <span class="number">0.3204</span>    <span class="number">1.0000</span></span><br><span class="line"></span><br><span class="line">rho_g =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.5298</span></span><br><span class="line"></span><br><span class="line">rho_c =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.4995</span></span><br><span class="line"></span><br><span class="line">rho_f =</span><br><span class="line"></span><br><span class="line">    <span class="number">3.5044</span></span><br></pre></td></tr></table></figure>
<h2 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h2><p>欧式距离</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">d_n =</span><br><span class="line"></span><br><span class="line">   <span class="number">11.0717</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d_t =</span><br><span class="line"></span><br><span class="line">    <span class="number">7.0748</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d_g =</span><br><span class="line"></span><br><span class="line">   <span class="number">48.8770</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d_c =</span><br><span class="line"></span><br><span class="line">  <span class="number">258.5072</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d_f =</span><br><span class="line"></span><br><span class="line">   <span class="number">48.3227</span></span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>欧氏距离</th>
<th>$d_n$</th>
<th>$d_t$</th>
<th>$d_G$</th>
<th>$d_C$</th>
<th>$d_F$</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算值</td>
<td>11.0717</td>
<td>7.0748</td>
<td>48.8770</td>
<td>258.5072</td>
<td>48.3227</td>
</tr>
</tbody>
</table>
</div>
<p>我认为在对于多维变量的处理上，由于Archimedean-Copula函数仅仅通过一个变量来描述其多位相关性并不是很合理，因而通过一个结构相依矩阵来表述相关性的t-Copula与Normal-Copula就与源数据拟合方面表现的就更好</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>MATLAB</tag>
        <tag>多维Copula</tag>
      </tags>
  </entry>
  <entry>
    <title>阶段性总结</title>
    <url>/2017/03/29/2017-03-29-%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="风速的随机性数学表述"><a href="#风速的随机性数学表述" class="headerlink" title="风速的随机性数学表述"></a>风速的随机性数学表述</h1><p>通过查阅文献可以得知，可以使用双参数威布尔分布来描述风速的概率分布</p>
<p>双参数威布尔函数</p>
<script type="math/tex; mode=display">F_w(x)=1-exp(-({x \over c})^k)</script><p>其概率密度函数为</p>
<script type="math/tex; mode=display">P(x)={k \over c} ({k \over c})^{k-1}exp(-({x \over c})^k)</script><p>式中 $k$ 为形状参数，无量纲； $c$ 为尺度参数，反映风电场的平均风速，单位为 $m/s$ 。</p>
<h2 id="程序验证随机性"><a href="#程序验证随机性" class="headerlink" title="程序验证随机性"></a>程序验证随机性</h2><p>通过将风速数据的频数分布图与根据风速数据拟合的威布尔分布概率密度函数曲线进行对比可以发现，使用双参数威布尔分布去拟合风速数据是完全合理的。下图中红色的曲线为威布尔分布概率密度函数曲线，蓝色部分为风速的频率分布直方图。</p>
<p><img src="http://oag5ozkgs.bkt.clouddn.com/4in1_1.jpg" alt="图1 风速频数分布直方图"></p>
<h2 id="场间风速的关系"><a href="#场间风速的关系" class="headerlink" title="场间风速的关系"></a>场间风速的关系</h2><p>通过对拟合后的风速数据的分布函数绘制频数分布直方图可以简单的看出场间风速的一些关系。下图为桥湾（1）、北大桥（2）、干河口（3）以及昌马（4）四个风电场两两之间的风速频数分布直方图</p>
<p><img src="http://oag5ozkgs.bkt.clouddn.com/6in1.jpg" alt="图2 场间风速频数直方图"></p>
<p>对于以上的关系可以通过地理以及气象等知识进行解释。下图是四个风电场的地理位置关系。<br><img src="http://oag5ozkgs.bkt.clouddn.com/%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE.jpg" alt="Alt text"></p>
<ul>
<li>桥湾（1）与北大桥（2）间地理位置是东西平行，在东西风向盛行的酒泉地区两者风况有较大的相似，所以线性相关性较大，如图2-1</li>
<li>干河口（3）与桥湾（1）的地理位置虽然接近东西平行，但是距离较远，因此线性相关性较低，如图2-2</li>
<li>桥湾（1）与昌马（4）间地理位置接近南北垂直，但是由于两者间距离较近，所以线性相关性也较为明显，如图2-3</li>
<li>干河口（3）与北大桥（2）的地理位置接近东西平行的，在东西风向盛行的酒泉地区两者风况有较大的相似。如图2-4可以看出存在较大的线性相关性。</li>
<li>昌马（4）与北大桥（2）的距离较远，因此线性相关性较差，如图2-5</li>
<li>干河口（3）与昌马（4）的距离最远，因此线性相关性也最差，如图2-6<a id="more"></a>
<h1 id="对场间风速进行建模"><a href="#对场间风速进行建模" class="headerlink" title="对场间风速进行建模"></a>对场间风速进行建模</h1></li>
</ul>
<h2 id="通过单个copula函数对场间风速进行建模"><a href="#通过单个copula函数对场间风速进行建模" class="headerlink" title="通过单个copula函数对场间风速进行建模"></a>通过单个copula函数对场间风速进行建模</h2><p><strong>参数估计结果</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>风电场组合</th>
<th>$\rho_{Norm}$</th>
<th>$\rho_t$</th>
<th>$k$</th>
<th>$\theta_G$</th>
<th>$\theta_C$</th>
<th>$\theta_F$</th>
</tr>
</thead>
<tbody>
<tr>
<td>桥湾与北大桥</td>
<td>0.6339</td>
<td>0.6386</td>
<td>9.1619</td>
<td>1.8533</td>
<td>0.6913</td>
<td>5.0402</td>
</tr>
<tr>
<td>桥湾与干河口</td>
<td>0.5346</td>
<td>0.5364</td>
<td>9.7829</td>
<td>1.6350</td>
<td>0.4847</td>
<td>3.8853</td>
</tr>
<tr>
<td>桥湾与昌马</td>
<td>0.6108</td>
<td>0.6169</td>
<td>10.4474</td>
<td>1.7697</td>
<td>0.6530</td>
<td>4.8459</td>
</tr>
<tr>
<td>北大桥与干河口</td>
<td>0.8092</td>
<td>0.8479</td>
<td>2.7192</td>
<td>2.9270</td>
<td>1.4685</td>
<td>9.8959</td>
</tr>
<tr>
<td>北大桥与昌马</td>
<td>0.3639</td>
<td>0.3630</td>
<td>33.9054</td>
<td>1.3098</td>
<td>0.3072</td>
<td>2.3697</td>
</tr>
<tr>
<td>干河口与昌马</td>
<td>0.3028</td>
<td>0.3026</td>
<td>21.9903</td>
<td>1.2628</td>
<td>0.2141</td>
<td>1.9736</td>
</tr>
</tbody>
</table>
</div>
<p><strong>对建模结果进行评价</strong></p>
<p>与根据风速数据建立的经验Copula函数进行对比</p>
<p>使用Q-Q图进行校验（非定量分析）</p>
<p><img src="http://oag5ozkgs.bkt.clouddn.com/2in1_1.jpg" alt="qq图2"><br><img src="http://oag5ozkgs.bkt.clouddn.com/3in1_1.jpg" alt="qq图3"></p>
<p>通过<a href="http://fatelancer.top/2017/02/27/Copula%E9%A3%8E%E9%80%9F%E5%BB%BA%E6%A8%A1%E7%9B%B8%E5%85%B3%EF%BC%881%EF%BC%89/#copula函数的拟合优度校验与经验copula函数对比" target="_blank" rel="noopener">Q-Q图的判定原则</a>可知，各类Copula函数差别很明显，其 中Gumbel-Copula，Frank-Copula，t-Copula函数曲线均较为接近45°曲线，拟合效果相对较好。以下采用统计法</p>
<p>使用K-S校验进行定量分析</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>风电场组合</th>
<th>$k_N$</th>
<th>$k_t$</th>
<th>$k_G$</th>
<th>$k_C$</th>
<th>$k_F$</th>
</tr>
</thead>
<tbody>
<tr>
<td>桥湾，北大桥</td>
<td>0.0406</td>
<td>0.0395</td>
<td>0.0302</td>
<td>0.0520</td>
<td>0.0364</td>
</tr>
<tr>
<td>桥湾，干河口</td>
<td>0.0260</td>
<td>0.0219</td>
<td>0.0156</td>
<td>0.0489</td>
<td>0.0208</td>
</tr>
<tr>
<td>桥湾，昌马</td>
<td>0.0260</td>
<td>0.0239</td>
<td>0.0156</td>
<td>0.0499</td>
<td>0.0239</td>
</tr>
<tr>
<td>北大桥，干河口</td>
<td>0.0395</td>
<td>0.0343</td>
<td>0.0302</td>
<td>0.0468</td>
<td>0.0323</td>
</tr>
<tr>
<td>北大桥，昌马</td>
<td>0.0239</td>
<td>0.0239</td>
<td>0.0156</td>
<td>0.0385</td>
<td>0.0166</td>
</tr>
<tr>
<td>干河口，昌马</td>
<td>0.0208</td>
<td>0.0208</td>
<td>0.0146</td>
<td>0.0385</td>
<td>0.0156</td>
</tr>
</tbody>
</table>
</div>
<p>通过<a href="http://fatelancer.top/2017/02/27/Copula%E9%A3%8E%E9%80%9F%E5%BB%BA%E6%A8%A1%E7%9B%B8%E5%85%B3%EF%BC%881%EF%BC%89/#copula函数的拟合优度校验与经验copula函数对比" target="_blank" rel="noopener">K-S检验法的判定原则</a>可知，在六种不同的风电场组合中，Gumbel-Copula，Frank-Copula，t-Copula这三种Copula函数的 $KS$ 统计值相对较小，而Normal-Copula，Clayton-Copula的统计值相对较大</p>
<p>秩相关性测度</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>数据来源</th>
<th>Kendall秩相关系数 $\tau$</th>
<th>Spearman秩相关系数 $\rho_s$</th>
</tr>
</thead>
<tbody>
<tr>
<td>原始观测数据</td>
<td>0.4816</td>
<td>0.6628</td>
</tr>
<tr>
<td>Normal-Copula</td>
<td>0.4371</td>
<td>0.6159</td>
</tr>
<tr>
<td>t-Copula</td>
<td>0.4410</td>
<td>0.6151</td>
</tr>
<tr>
<td>Gumbel-Copula</td>
<td>0.4604</td>
<td>0.6366</td>
</tr>
<tr>
<td>Clayton-Copula</td>
<td>0.2569</td>
<td>0.3751</td>
</tr>
<tr>
<td>Frank-Copula</td>
<td>0.4592</td>
<td>0.6465</td>
</tr>
</tbody>
</table>
</div>
<p>通过与经验函数的Kendall秩相关系数，Spearman秩相关系数进行对比可以发现Gumbel-Copula，Frank-Copula，t-Copula这三种Copula函数与原始数据保持着良好的秩相关性，而Normal-Copula，Clayton-Copula的秩相关性较差。</p>
<p>使用欧式距离进行分析</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>风电场组合</th>
<th>$d_N$</th>
<th>$d_t$</th>
<th>$d_G$</th>
<th>$d_C$</th>
<th>$d_F$</th>
</tr>
</thead>
<tbody>
<tr>
<td>桥湾，北大桥</td>
<td>2.8924</td>
<td>2.8209</td>
<td>1.3953</td>
<td>9.1763</td>
<td>2.4125</td>
</tr>
<tr>
<td>桥湾，干河口</td>
<td>2.7285</td>
<td>2.6970</td>
<td>1.1862</td>
<td>8.2528</td>
<td>2.2180</td>
</tr>
<tr>
<td>桥湾，昌马</td>
<td>2.3450</td>
<td>2.2558</td>
<td>1.3469</td>
<td>8.3662</td>
<td>1.8227</td>
</tr>
<tr>
<td>北大桥，干河口</td>
<td>3.6952</td>
<td>2.4590</td>
<td>1.6097</td>
<td>10.9923</td>
<td>1.6888</td>
</tr>
<tr>
<td>北大桥，昌马</td>
<td>1.7187</td>
<td>1.7470</td>
<td>1.5995</td>
<td>5.0238</td>
<td>1.3692</td>
</tr>
<tr>
<td>干河口，昌马</td>
<td>1.8369</td>
<td>1.8561</td>
<td>1.3731</td>
<td>4.8842</td>
<td>1.4301</td>
</tr>
</tbody>
</table>
</div>
<p>可以看到在以上6种风电场组合中Gumbel-Copula，Frank-Copula，t-Copula这三种Copula函数与经验Copula函数的欧氏距离较小，而Normal-Copula，Clayton-Copula与经验函数的欧氏距离较大</p>
<h2 id="使用多个Copula函数进行混合对风速进行建模"><a href="#使用多个Copula函数进行混合对风速进行建模" class="headerlink" title="使用多个Copula函数进行混合对风速进行建模"></a>使用多个Copula函数进行混合对风速进行建模</h2><p>通过查阅文献可以知道，多个Copula函数通过加权相加后仍然是Copula函数</p>
<p>由于Copula函数并非线性函数，简单的通过单个Copula函数拟合效果来选择使用哪几个Copula函数来进行混合可能不够准确，可能会存在两个单一表现并不好的Copula函数混合后结果却比较好的情况。</p>
<p>因此，将论文中的三个Copula混合模型拓展至五个常用Copula进行混合建模。</p>
<p>由于混合时运算量过大，因此选取干河口与北大桥的场间风速为例进行建模</p>
<p><strong>三个Copula混合的参数结果</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Copula函数</th>
<th>$\theta$</th>
<th>$\omega$</th>
<th>$k$</th>
</tr>
</thead>
<tbody>
<tr>
<td>t-Copula</td>
<td>0.1244</td>
<td>0.0822</td>
<td>3</td>
</tr>
<tr>
<td>Gumbel-Copula</td>
<td>4.1127</td>
<td>0.7495</td>
<td></td>
</tr>
<tr>
<td>Frank-Copula</td>
<td>6.5931</td>
<td>0.1683</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>即</p>
<script type="math/tex; mode=display">
C(u,v;a)=0.7495C_{Gumbel}(u,v;4.1127)+0.1683C_{Frank}(u,v;6.5931)
+0.0822C_t(u,v;0.1244,3)</script><p><strong>五个Copula混合的参数结果</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Copula函数</th>
<th>$\theta$</th>
<th>$\omega$</th>
<th>$k$</th>
</tr>
</thead>
<tbody>
<tr>
<td>t-Copula</td>
<td>0.9678</td>
<td>0.1075</td>
<td>2.7192</td>
</tr>
<tr>
<td>Gumbel-Copula</td>
<td>3.7781</td>
<td>0.5502</td>
<td></td>
</tr>
<tr>
<td>Frank-Copula</td>
<td>9.8959</td>
<td>0.1946</td>
<td></td>
</tr>
<tr>
<td>Norm-Copula</td>
<td>0.9250</td>
<td>0.0613</td>
<td></td>
</tr>
<tr>
<td>Clayton-Copula</td>
<td>0.0049</td>
<td>0.0864</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>即</p>
<script type="math/tex; mode=display">
\begin{aligned}
C(u,v;a)= & 0.1075C_t(u,v;0.9678,2.7192)+0.0613C_N(u,v;0.9250)
+\\
& 0.5502C_{Gumbel}(u,v;3.7781)+0.1946C_{Frank}(u,v;9.8959)+0.0864C_{Clayton}(u,v;0.0049)
\end{aligned}</script><p><strong>模型评价</strong></p>
<p>Q-Q图校验</p>
<p><img src="http://oag5ozkgs.bkt.clouddn.com/mcopula.jpg" alt="3个Copula函数混合Q-Q图"></p>
<p><img src="http://oag5ozkgs.bkt.clouddn.com/mcopula_new.jpg" alt="5个Copula函数混合Q-Q图"></p>
<p>由于不是定量分析，对比效果不明显，以下采用定量分析，但是可以对比单个Copula时的QQ图<br><img src="http://oag5ozkgs.bkt.clouddn.com/im1.jpg" alt="qq图2"><br><img src="http://oag5ozkgs.bkt.clouddn.com/im2.jpg" alt="qq图3"></p>
<p>可以明显看出混合Copula的效果比单个Copula效果要好。</p>
<p>K-S检验</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>风电场组合</th>
<th>$k_N$</th>
<th>$k_t$</th>
<th>$k_G$</th>
<th>$k_C$</th>
<th>$k_F$</th>
<th>$K_{3M}$</th>
<th>$K_{5M}$</th>
</tr>
</thead>
<tbody>
<tr>
<td>北大桥，干河口</td>
<td>0.0395</td>
<td>0.0343</td>
<td>0.0302</td>
<td>0.0468</td>
<td>0.0323</td>
<td>0.0271</td>
<td>0.0260</td>
</tr>
</tbody>
</table>
</div>
<p>可以看出5个Copula混合时的模型较3个Copula混合时的效果更好</p>
<p>欧氏距离</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>风电场组合</th>
<th>$d_N$</th>
<th>$d_t$</th>
<th>$d_G$</th>
<th>$d_C$</th>
<th>$d_F$</th>
<th>$d_{3M}$</th>
<th>$d_{5M}$</th>
</tr>
</thead>
<tbody>
<tr>
<td>北大桥，干河口</td>
<td>3.6952</td>
<td>2.4590</td>
<td>1.6097</td>
<td>10.9923</td>
<td>1.6888</td>
<td>1.3220</td>
<td>1.2730</td>
</tr>
</tbody>
</table>
</div>
<p>从欧氏距离上也能够得到与KS检验中同样的结果</p>
<h2 id="使用多元Copula进行4维风电场间风速建模"><a href="#使用多元Copula进行4维风电场间风速建模" class="headerlink" title="使用多元Copula进行4维风电场间风速建模"></a>使用多元Copula进行4维风电场间风速建模</h2><p><strong>使用单一多维Copula建模</strong></p>
<p>分别得到了Normal-Copula与t-Copula的多元风速相依结构矩阵</p>
<script type="math/tex; mode=display">\rho_n=\begin{bmatrix}
1 & 0.6339 & 0.5346 & 0.6108\\
0.6339 & 1 & 0.8092 & 0.3639\\
0.5346 & 0.8092 & 1 & 0.3028\\
0.6108 & 0.3639 & 0.3028 & 1
\end{bmatrix}</script><script type="math/tex; mode=display">\rho_t=\begin{bmatrix}
1 &0.6441  &0.5591  &0.6179 \\
0.6441 &1  &0.8527  &0.3769 \\
0.5591 &0.8527  &1  &0.3204 \\
0.6179 &0.3769  &0.3204  &1
\end{bmatrix}</script><script type="math/tex; mode=display">k_t=7.8639</script><p><strong>模型评价</strong></p>
<p>K-S校验</p>
<script type="math/tex; mode=display">k_G=0.0281\\k_t=0.0401</script><p>欧氏距离</p>
<script type="math/tex; mode=display">d_G=11.0717\\d_t=7.0748</script><p>后来通过查阅文献得知KS校验不能在多维问题中使用，多维问题主要使用欧氏距离进行分析</p>
<p><strong>使用多维混合Copula两种思路</strong></p>
<ul>
<li><p>使用多维的Copula直接进行混合<br>问题： Archimedean Copula族的Copula函数需要手动计算多维形式，并手动编程通过MLE方法估算函数参数，MATLAB自带的fit函数仅支持二元的Archimedean Copula参数估计。并且在计算4维t-Copula概率密度函数时的计算量非常大，单句指令需要运算三个小时，当嵌套至EM算法的迭代中时将耗费更多的时间，预计计算时间将达到十几天。</p>
</li>
<li><p>通过pair-Copula将多个二维Copula函数进行合并，直至出现四维Copula<br>问题：暂时没有找到对于pair-Copula构建过程较为详细的文献，还处在摸索阶段</p>
</li>
</ul>
<h1 id="光伏的随机性表达"><a href="#光伏的随机性表达" class="headerlink" title="光伏的随机性表达"></a>光伏的随机性表达</h1><h2 id="通过核密度估计来表达长时间内的光伏照射强度"><a href="#通过核密度估计来表达长时间内的光伏照射强度" class="headerlink" title="通过核密度估计来表达长时间内的光伏照射强度"></a>通过核密度估计来表达长时间内的光伏照射强度</h2><p>定义<br>  :   设$x_1,x_2,…,x_n$为随机变量$x$的样本，令随机变量$x$的概率密度函数为$f(x)$，则 $f(x)$ 的核密度估计为：</p>
<script type="math/tex; mode=display">f_h(x)={1 \over nh}{\displaystyle \sum_{j=1}^n{K({x-x_j \over h})}}={1 \over n}{\displaystyle \sum_{j=1}^n{K_h(x-x_j)}}</script><p>  其中$n$为样本容量，$h$ 为平滑系数，$K(·)$ 为核函数</p>
<p><strong>结果</strong></p>
<p><img src="http://oag5ozkgs.bkt.clouddn.com/1.jpg" alt="频率分布"></p>
<p>可以看到在长时间尺度上（上例为半年）核密度估计的拟合程度很高，但是在稍短的时间尺度上（一个月）则效果较差，如下图</p>
<p><img src="http://oag5ozkgs.bkt.clouddn.com/1_2.jpg" alt=""></p>
<p>该种情况可以通过<a href="http://blog.csdn.net/matlab_matlab/article/details/56286868" target="_blank" rel="noopener">调整窗的宽度来提高拟合优度</a>，如下图为窗宽度为2.5时重新拟合一个月的光伏强度结果</p>
<p><img src="http://oag5ozkgs.bkt.clouddn.com/1_3.jpg" alt="当width=2.5时拟合结果"></p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>所有代码详见<a href="https://github.com/fatelancer/Copula_Wind" target="_blank" rel="noopener">Copula_Wind</a></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>Copula</tag>
        <tag>风速建模</tag>
      </tags>
  </entry>
  <entry>
    <title>混合Copula建模修正——更多Copula函数的加入</title>
    <url>/2017/03/23/2017-03-23-%E6%B7%B7%E5%90%88Copula%E5%BB%BA%E6%A8%A1%E4%BF%AE%E6%AD%A3/</url>
    <content><![CDATA[<h1 id="修正的原因"><a href="#修正的原因" class="headerlink" title="修正的原因"></a>修正的原因</h1><p>由于Copula函数并非线性函数，简单的通过单个Copula函数拟合效果来选择使用哪几个Copula函数来进行混合可能不够准确，可能会存在两个单一表现并不好的Copula函数混合后结果却比较好的情况。</p>
<p>因此，将原来的混合Copula模型拓展至五个常用Copula进行混合建模。</p>
<h1 id="修正后的代码"><a href="#修正后的代码" class="headerlink" title="修正后的代码"></a>修正后的代码</h1><h2 id="EM算法主体部分"><a href="#EM算法主体部分" class="headerlink" title="EM算法主体部分"></a>EM算法主体部分</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">U=GHKC;</span><br><span class="line">V=BDQC;</span><br><span class="line"><span class="comment">% 初始化</span></span><br><span class="line">S=<span class="number">5</span>;</span><br><span class="line">th=<span class="number">0.01</span>;</span><br><span class="line">omega=[<span class="number">1</span>/<span class="number">5</span>,<span class="number">1</span>/<span class="number">5</span>,<span class="number">1</span>/<span class="number">5</span>,<span class="number">1</span>/<span class="number">5</span>,<span class="number">1</span>/<span class="number">5</span>];</span><br><span class="line">[a,nuhat]=copulafit(<span class="string">'t'</span>,[U,V]);</span><br><span class="line">a2=copulafit(<span class="string">'Gumbel'</span>,[U,V]);</span><br><span class="line">a3=copulafit(<span class="string">'Frank'</span>,[U,V]);</span><br><span class="line">a4=copulafit(<span class="string">'Gaussian'</span>,[U,V]);</span><br><span class="line">a5=copulafit(<span class="string">'Clayton'</span>,[U,V]);</span><br><span class="line">theta=[a(<span class="number">1</span>,<span class="number">2</span>),a2,a3,a4(<span class="number">1</span>,<span class="number">2</span>),a5];</span><br><span class="line">[N,~]=<span class="built_in">size</span>(U);</span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line">tt=<span class="built_in">zeros</span>(N,<span class="number">2</span>);</span><br><span class="line">nn=<span class="built_in">zeros</span>(N,<span class="number">2</span>);</span><br><span class="line">tt(:,<span class="number">1</span>)=tinv(U(:),nuhat);</span><br><span class="line">tt(:,<span class="number">2</span>)=tinv(V(:),nuhat);</span><br><span class="line">nn(:,<span class="number">1</span>)=norminv(U(:));</span><br><span class="line">nn(:,<span class="number">2</span>)=norminv(V(:));</span><br><span class="line">t=<span class="built_in">inf</span>;</span><br><span class="line">COPULA=<span class="built_in">zeros</span>(N,S);</span><br><span class="line">list1=<span class="built_in">zeros</span>(<span class="number">5</span>,<span class="number">101</span>);</span><br><span class="line">list2=<span class="built_in">zeros</span>(<span class="number">5</span>,<span class="number">101</span>);</span><br><span class="line">puz=<span class="built_in">zeros</span>(N,S);</span><br><span class="line">puz1=<span class="built_in">zeros</span>(N,S);</span><br><span class="line">turntheta_old=<span class="built_in">zeros</span>(<span class="number">1</span>,S);</span><br><span class="line">tic</span><br><span class="line"><span class="keyword">while</span> t&gt;=th&amp;&amp;count&lt;=<span class="number">50</span>;</span><br><span class="line">    theta_old=theta;</span><br><span class="line">    omega_old=omega;</span><br><span class="line">    <span class="comment">%转化为无约束限制的参数</span></span><br><span class="line">    turntheta_old(<span class="number">1</span>)=<span class="built_in">tan</span>(<span class="built_in">pi</span>*theta_old(<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">    turntheta_old(<span class="number">2</span>)=<span class="built_in">log</span>(theta_old(<span class="number">2</span>)<span class="number">-1</span>);</span><br><span class="line">    turntheta_old(<span class="number">4</span>)=<span class="built_in">tan</span>(<span class="built_in">pi</span>*theta_old(<span class="number">4</span>)/<span class="number">2</span>);</span><br><span class="line">    turntheta_old(<span class="number">5</span>)=<span class="built_in">log</span>(theta_old(<span class="number">5</span>));</span><br><span class="line">    COPULA(:,<span class="number">1</span>)=copulapdf(<span class="string">'t'</span>,[U(:) V(:)],theta_old(<span class="number">1</span>),nuhat);</span><br><span class="line">    COPULA(:,<span class="number">2</span>)=copulapdf(<span class="string">'Gumbel'</span>,[U(:) V(:)],theta_old(<span class="number">2</span>));</span><br><span class="line">    COPULA(:,<span class="number">3</span>)=copulapdf(<span class="string">'Frank'</span>,[U(:) V(:)],theta_old(<span class="number">3</span>));</span><br><span class="line">    COPULA(:,<span class="number">4</span>)=copulapdf(<span class="string">'Gaussian'</span>,[U(:) V(:)],theta_old(<span class="number">4</span>));</span><br><span class="line">    COPULA(:,<span class="number">5</span>)=copulapdf(<span class="string">'Clayton'</span>,[U(:) V(:)],theta_old(<span class="number">5</span>));</span><br><span class="line">    puz(:,<span class="number">1</span>)=COPULA(:,<span class="number">1</span>)*omega_old(<span class="number">1</span>);</span><br><span class="line">    puz(:,<span class="number">2</span>)=COPULA(:,<span class="number">2</span>)*omega_old(<span class="number">2</span>);</span><br><span class="line">    puz(:,<span class="number">3</span>)=COPULA(:,<span class="number">3</span>)*omega_old(<span class="number">3</span>);</span><br><span class="line">    puz(:,<span class="number">4</span>)=COPULA(:,<span class="number">4</span>)*omega_old(<span class="number">4</span>);</span><br><span class="line">    puz(:,<span class="number">5</span>)=COPULA(:,<span class="number">5</span>)*omega_old(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:N</span><br><span class="line">        puz1(<span class="built_in">i</span>,<span class="number">1</span>)=puz(<span class="built_in">i</span>,<span class="number">1</span>)/sum(puz(<span class="built_in">i</span>,:));</span><br><span class="line">        puz1(<span class="built_in">i</span>,<span class="number">2</span>)=puz(<span class="built_in">i</span>,<span class="number">2</span>)/sum(puz(<span class="built_in">i</span>,:));</span><br><span class="line">        puz1(<span class="built_in">i</span>,<span class="number">3</span>)=puz(<span class="built_in">i</span>,<span class="number">3</span>)/sum(puz(<span class="built_in">i</span>,:));</span><br><span class="line">        puz1(<span class="built_in">i</span>,<span class="number">4</span>)=puz(<span class="built_in">i</span>,<span class="number">4</span>)/sum(puz(<span class="built_in">i</span>,:));</span><br><span class="line">        puz1(<span class="built_in">i</span>,<span class="number">5</span>)=puz(<span class="built_in">i</span>,<span class="number">5</span>)/sum(puz(<span class="built_in">i</span>,:));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    omega(<span class="number">1</span>)=sum(puz1(:,<span class="number">1</span>))/N;</span><br><span class="line">    omega(<span class="number">2</span>)=sum(puz1(:,<span class="number">2</span>))/N;</span><br><span class="line">    omega(<span class="number">3</span>)=sum(puz1(:,<span class="number">3</span>))/N;</span><br><span class="line">    omega(<span class="number">4</span>)=sum(puz1(:,<span class="number">4</span>))/N;</span><br><span class="line">    omega(<span class="number">5</span>)=sum(puz1(:,<span class="number">5</span>))/N;</span><br><span class="line">    omega</span><br><span class="line">    tic</span><br><span class="line">    [turntheta,fval,exitflag,output,grad,hessian]=updatetheta(N,U,V,turntheta_old,puz1,tt,nn,nuhat);</span><br><span class="line">    toc</span><br><span class="line">    theta(<span class="number">1</span>)=<span class="built_in">atan</span>(turntheta(<span class="number">1</span>))*<span class="number">2</span>/<span class="built_in">pi</span>;</span><br><span class="line">    theta(<span class="number">2</span>)=<span class="built_in">exp</span>(turntheta(<span class="number">2</span>))+<span class="number">1</span>;</span><br><span class="line">    theta(<span class="number">4</span>)=<span class="built_in">atan</span>(turntheta(<span class="number">4</span>))*<span class="number">2</span>/<span class="built_in">pi</span>;</span><br><span class="line">    theta(<span class="number">5</span>)=<span class="built_in">exp</span>(turntheta(<span class="number">5</span>));</span><br><span class="line">    theta</span><br><span class="line">    list1(:,count+<span class="number">1</span>)=theta;</span><br><span class="line">    list2(:,count+<span class="number">1</span>)=omega;</span><br><span class="line">    t=<span class="built_in">max</span>([norm(theta_old(:)-theta(:));norm(omega_old(:)-omega(:))])</span><br><span class="line">    count=count+<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">toc</span><br><span class="line">beep</span><br></pre></td></tr></table></figure>
<p>代码中涉及对参数进行数学变换将其参数从各自有限定义域转为$(-\infty,+ \infty)$</p>
<p>其中:</p>
<ul>
<li>t-Copula与正态Copula参数定义域为$(-1,1)$</li>
<li>Gumbel-Copula参数定义域为$(1,+\infty)$</li>
<li>Clayton-Copula参数定义域为$(0,+\infty)$</li>
<li>Frank-Copula参数定义域为$(-\infty,+\infty)$</li>
</ul>
<a id="more"></a>
<h2 id="参数更新部分"><a href="#参数更新部分" class="headerlink" title="参数更新部分"></a>参数更新部分</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[turntheta,fval,exitflag,output,grad,hessian]</span>=<span class="title">updatetheta</span><span class="params">(N,U,V,theta,puz,t,n,nuhat)</span></span></span><br><span class="line">options=optimset(<span class="string">'Display'</span>,<span class="string">'iter-detailed'</span>,<span class="string">'MaxFunEvals'</span>,<span class="number">1000</span>,<span class="string">'TolFun'</span>,<span class="number">1e-6</span>,<span class="string">'TolX'</span>,<span class="number">1e-10</span>,<span class="string">'LargeScale'</span>,<span class="string">'on'</span>,<span class="string">'FinDiffType'</span>,<span class="string">'central'</span>,<span class="string">'HessUpdate'</span>,<span class="string">'bfgs'</span>);</span><br><span class="line">[turntheta,fval,exitflag,output,grad,hessian]=fminunc(@utheta,theta,options);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">utheta</span><span class="params">(theta)</span></span></span><br><span class="line"><span class="keyword">if</span> theta(<span class="number">3</span>)==<span class="number">0</span></span><br><span class="line">    theta(<span class="number">3</span>)=theta(<span class="number">3</span>)+<span class="number">0.0001</span>;  <span class="comment">%防止出现 Frank  Copula 的相依结构参数为 0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">y=<span class="number">0</span>;</span><br><span class="line">th=<span class="built_in">eye</span>(<span class="number">2</span>);</span><br><span class="line">th1=<span class="built_in">eye</span>(<span class="number">2</span>);</span><br><span class="line">th(<span class="number">1</span>,<span class="number">2</span>)=<span class="built_in">atan</span>(theta(<span class="number">1</span>))*<span class="number">2</span>/<span class="built_in">pi</span>;</span><br><span class="line">th(<span class="number">2</span>,<span class="number">1</span>)=<span class="built_in">atan</span>(theta(<span class="number">1</span>))*<span class="number">2</span>/<span class="built_in">pi</span>;</span><br><span class="line">th1(<span class="number">1</span>,<span class="number">2</span>)=<span class="built_in">atan</span>(theta(<span class="number">4</span>))*<span class="number">2</span>/<span class="built_in">pi</span>;</span><br><span class="line">th1(<span class="number">2</span>,<span class="number">1</span>)=<span class="built_in">atan</span>(theta(<span class="number">4</span>))*<span class="number">2</span>/<span class="built_in">pi</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:N</span><br><span class="line"></span><br><span class="line">    y=y+<span class="built_in">log</span>(((det(th))^(<span class="number">-1</span>/<span class="number">2</span>))*<span class="built_in">gamma</span>((nuhat+<span class="number">2</span>)/<span class="number">2</span>)*<span class="built_in">gamma</span>(nuhat/<span class="number">2</span>)*(<span class="number">1</span>+t(<span class="built_in">j</span>,:)*th^(<span class="number">-1</span>)*t(<span class="built_in">j</span>,:)'/nuhat)^(-(nuhat+<span class="number">2</span>)/<span class="number">2</span>)/((<span class="built_in">gamma</span>((nuhat+<span class="number">1</span>)/<span class="number">2</span>))^<span class="number">2</span>*((<span class="number">1</span>+t(<span class="built_in">j</span>,<span class="number">1</span>)^<span class="number">2</span>/nuhat)^(-(nuhat+<span class="number">1</span>)/<span class="number">2</span>)*(<span class="number">1</span>+t(<span class="built_in">j</span>,<span class="number">2</span>)^<span class="number">2</span>/nuhat)^(-(nuhat+<span class="number">1</span>)/<span class="number">2</span>))))*puz(<span class="built_in">j</span>,<span class="number">1</span>)+...</span><br><span class="line">        <span class="built_in">log</span>(<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^(<span class="built_in">exp</span>(theta(<span class="number">2</span>))+<span class="number">1</span>)+(-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^(<span class="built_in">exp</span>(theta(<span class="number">2</span>))+<span class="number">1</span>))^(<span class="number">1</span>/(<span class="built_in">exp</span>(theta(<span class="number">2</span>))+<span class="number">1</span>)))*(<span class="built_in">log</span>(U(<span class="built_in">j</span>))*<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^((<span class="built_in">exp</span>(theta(<span class="number">2</span>))+<span class="number">1</span>)<span class="number">-1</span>)*(((-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^((<span class="built_in">exp</span>(theta(<span class="number">2</span>))+<span class="number">1</span>))+(-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^((<span class="built_in">exp</span>(theta(<span class="number">2</span>))+<span class="number">1</span>)))^(<span class="number">1</span>/(<span class="built_in">exp</span>(theta(<span class="number">2</span>))+<span class="number">1</span>))+(<span class="built_in">exp</span>(theta(<span class="number">2</span>))+<span class="number">1</span>)<span class="number">-1</span>)/(U(<span class="built_in">j</span>)*V(<span class="built_in">j</span>)*((-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^((<span class="built_in">exp</span>(theta(<span class="number">2</span>))+<span class="number">1</span>))+(-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^((<span class="built_in">exp</span>(theta(<span class="number">2</span>))+<span class="number">1</span>)))^(<span class="number">2</span><span class="number">-1</span>/(<span class="built_in">exp</span>(theta(<span class="number">2</span>))+<span class="number">1</span>))))*puz(<span class="built_in">j</span>,<span class="number">2</span>)+...</span><br><span class="line">        <span class="built_in">log</span>(theta(<span class="number">3</span>)*(<span class="number">1</span>-<span class="built_in">exp</span>(-theta(<span class="number">3</span>)))*<span class="built_in">exp</span>(-theta(<span class="number">3</span>)*(U(<span class="built_in">j</span>)+V(<span class="built_in">j</span>)))/((<span class="number">1</span>-<span class="built_in">exp</span>(-theta(<span class="number">3</span>)))-(<span class="number">1</span>-<span class="built_in">exp</span>(-theta(<span class="number">3</span>)*U(<span class="built_in">j</span>)))*(<span class="number">1</span>-<span class="built_in">exp</span>(-theta(<span class="number">3</span>)*V(<span class="built_in">j</span>))))^<span class="number">2</span>)*puz(<span class="built_in">j</span>,<span class="number">3</span>)+...</span><br><span class="line">        <span class="built_in">log</span>((det(th1))^(<span class="number">-1</span>/<span class="number">2</span>)*<span class="built_in">exp</span>(<span class="number">-1</span>/<span class="number">2</span>*n(<span class="built_in">j</span>,:)*(th1^(<span class="number">-1</span>)-<span class="built_in">eye</span>(<span class="number">2</span>))*n(<span class="built_in">j</span>,:)'))*puz(<span class="built_in">j</span>,<span class="number">4</span>)+...</span><br><span class="line">        <span class="built_in">log</span>((<span class="number">1</span>+<span class="built_in">exp</span>(theta(<span class="number">5</span>)))*(U(<span class="built_in">j</span>)*V(<span class="built_in">j</span>))^(-<span class="built_in">exp</span>(theta(<span class="number">5</span>))<span class="number">-1</span>)*(U(<span class="built_in">j</span>)^(-<span class="built_in">exp</span>(theta(<span class="number">5</span>)))+V(<span class="built_in">j</span>)^(-<span class="built_in">exp</span>(theta(<span class="number">5</span>)))<span class="number">-1</span>)^(<span class="number">-2</span><span class="number">-1</span>/<span class="built_in">exp</span>(theta(<span class="number">5</span>))))*puz(<span class="built_in">j</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">y=-y;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h1 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h1><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><div class="table-container">
<table>
<thead>
<tr>
<th>Copula函数</th>
<th>$\theta$</th>
<th>$\omega$</th>
<th>$k$</th>
</tr>
</thead>
<tbody>
<tr>
<td>t-Copula</td>
<td>0.9678</td>
<td>0.1075</td>
<td>2.7192</td>
</tr>
<tr>
<td>Gumbel-Copula</td>
<td>3.7781</td>
<td>0.5502</td>
<td></td>
</tr>
<tr>
<td>Frank-Copula</td>
<td>9.8959</td>
<td>0.1946</td>
<td></td>
</tr>
<tr>
<td>Norm-Copula</td>
<td>0.9250</td>
<td>0.0613</td>
<td></td>
</tr>
<tr>
<td>Clayton-Copula</td>
<td>0.0049</td>
<td>0.0864</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<h2 id="Q-Q图"><a href="#Q-Q图" class="headerlink" title="Q-Q图"></a>Q-Q图</h2><p>与3个Copula函数混合时的模型相比：</p>
<p><img src="http://oag5ozkgs.bkt.clouddn.com/mcopula.jpg" alt="3个Copula函数混合Q-Q图"></p>
<p><img src="http://oag5ozkgs.bkt.clouddn.com/mcopula_new.jpg" alt="5个Copula函数混合Q-Q图"></p>
<p>由于不是定量分析，对比效果不明显，以下采用定量分析</p>
<h2 id="KS检验"><a href="#KS检验" class="headerlink" title="KS检验"></a>KS检验</h2><div class="table-container">
<table>
<thead>
<tr>
<th>风电场组合</th>
<th>$k_N$</th>
<th>$k_t$</th>
<th>$k_G$</th>
<th>$k_C$</th>
<th>$k_F$</th>
<th>$K_{3M}$</th>
<th>$K_{5M}$</th>
</tr>
</thead>
<tbody>
<tr>
<td>北大桥，干河口</td>
<td>0.0395</td>
<td>0.0343</td>
<td>0.0302</td>
<td>0.0468</td>
<td>0.0323</td>
<td>0.0271</td>
<td>0.0260</td>
</tr>
</tbody>
</table>
</div>
<p>可以看出5个Copula混合时的模型较3个Copula混合时的效果更好</p>
<h2 id="欧式距离"><a href="#欧式距离" class="headerlink" title="欧式距离"></a>欧式距离</h2><div class="table-container">
<table>
<thead>
<tr>
<th>风电场组合</th>
<th>$d_N$</th>
<th>$d_t$</th>
<th>$d_G$</th>
<th>$d_C$</th>
<th>$d_F$</th>
<th>$d_{3M}$</th>
<th>$d_{5M}$</th>
</tr>
</thead>
<tbody>
<tr>
<td>北大桥，干河口</td>
<td>3.6952</td>
<td>2.4590</td>
<td>1.6097</td>
<td>10.9923</td>
<td>1.6888</td>
<td>1.3220</td>
<td>1.2730</td>
</tr>
</tbody>
</table>
</div>
<p>从欧氏距离上也能够得到与KS检验中同样的结果</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>综上，可以将混合Copula模型更新为如下形式</p>
<script type="math/tex; mode=display">
\begin{aligned}
C(u,v;a)= & 0.1075C_t(u,v;0.9678,2.7192)+0.0613C_N(u,v;0.9250)
+\\
& 0.5502C_{Gumbel}(u,v;3.7781)+0.1946C_{Frank}(u,v;9.8959)+0.0864C_{Clayton}(u,v;0.0049)
\end{aligned}</script><p>PS:以上程序跑了9个小时，由于本人电脑运算处理速度问题，暂且限制在该精度下，但是结果仍可更加精确，后面会使用工作站进行进一步的精确计算</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>MATLAB</tag>
        <tag>混合Copula</tag>
      </tags>
  </entry>
  <entry>
    <title>光伏建模（2）——核密度估计实现</title>
    <url>/2017/03/17/2017-03-17-%E5%85%89%E4%BC%8F%E5%BB%BA%E6%A8%A1%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E6%A0%B8%E5%AF%86%E5%BA%A6%E4%BC%B0%E8%AE%A1%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="数据录入"><a href="#数据录入" class="headerlink" title="数据录入"></a>数据录入</h1><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">solar=xlsread(<span class="string">'E:\学习\毕设\数据资料\数据资料\windfarm data\敦煌太阳能测光数据1-7\一月\太阳能测光数据_2010-01-01 - 2010-02-01.xls'</span>);</span><br><span class="line">solardata=solar(:,<span class="number">2</span>);</span><br><span class="line">SData=cell(<span class="number">1</span>,<span class="number">7</span>);</span><br><span class="line">SData(<span class="number">1</span>)=&#123;solar&#125;;</span><br><span class="line"></span><br><span class="line">solar=xlsread(<span class="string">'E:\学习\毕设\数据资料\数据资料\windfarm data\敦煌太阳能测光数据1-7\二月\太阳能测光数据_2010-02.xls'</span>);</span><br><span class="line">solardata=[solardata; solar(:,<span class="number">2</span>)]</span><br><span class="line">SData(<span class="number">2</span>)=&#123;solar&#125;;</span><br><span class="line"></span><br><span class="line">solar=xlsread(<span class="string">'E:\学习\毕设\数据资料\数据资料\windfarm data\敦煌太阳能测光数据1-7\三月\太阳能测光数据_2010-03-01 - 2010-04-01.xls'</span>);</span><br><span class="line">solardata=[solardata; solar(:,<span class="number">2</span>)]</span><br><span class="line">SData(<span class="number">3</span>)=&#123;solar&#125;;</span><br><span class="line"></span><br><span class="line">solar=xlsread(<span class="string">'E:\学习\毕设\数据资料\数据资料\windfarm data\敦煌太阳能测光数据1-7\四月\太阳能测光数据_2010-04-01 - 2010-05-01.xls'</span>);</span><br><span class="line">solardata=[solardata; solar(:,<span class="number">2</span>)]</span><br><span class="line">SData(<span class="number">4</span>)=&#123;solar&#125;;</span><br><span class="line"></span><br><span class="line">solar=xlsread(<span class="string">'E:\学习\毕设\数据资料\数据资料\windfarm data\敦煌太阳能测光数据1-7\五月\太阳能测光数据_2010-05-01 - 2010-06-01.xls'</span>);</span><br><span class="line">solardata=[solardata; solar(:,<span class="number">2</span>)]</span><br><span class="line">SData(<span class="number">5</span>)=&#123;solar&#125;;</span><br><span class="line"></span><br><span class="line">solar=xlsread(<span class="string">'E:\学习\毕设\数据资料\数据资料\windfarm data\敦煌太阳能测光数据1-7\六月\太阳能测光数据_2010-06-01 - 2010-07-01.xls'</span>);</span><br><span class="line">solardata=[solardata; solar(:,<span class="number">2</span>)]</span><br><span class="line">SData(<span class="number">6</span>)=&#123;solar&#125;;</span><br><span class="line"></span><br><span class="line">solar=xlsread(<span class="string">'E:\学习\毕设\数据资料\数据资料\windfarm data\敦煌太阳能测光数据1-7\七月\太阳能测光数据2010-7-1-2010-8-1.xls'</span>);</span><br><span class="line">solardata=[solardata; solar(:,<span class="number">3</span>)]</span><br><span class="line">SData(<span class="number">7</span>)=&#123;solar&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="使用核密度估计对长时间内的光伏强度进行估计"><a href="#使用核密度估计对长时间内的光伏强度进行估计" class="headerlink" title="使用核密度估计对长时间内的光伏强度进行估计"></a>使用核密度估计对长时间内的光伏强度进行估计</h1><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[fsd,sdc]=ecdf(solardata);</span><br><span class="line">[fks,ksc]=ksdensity(solardata,[<span class="number">-100</span>:<span class="number">1</span>:<span class="number">1200</span>]);</span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">ecdfhist(fsd,sdc,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(ksc,fks,<span class="string">'-r'</span>)</span><br></pre></td></tr></table></figure>
<p><em>在默认情况下核函数选取的是高斯核函数，事实上在所有核函数中，高斯与epanechnikov这两种核函数拟合效果较好</em></p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="http://oag5ozkgs.bkt.clouddn.com/1.jpg" alt="频率分布"></p>
<p>可以看到在长时间尺度上（上例为半年）核密度估计的拟合程度很高，但是在稍短的时间尺度上（一个月）则效果较差，如下图</p>
<p><img src="http://oag5ozkgs.bkt.clouddn.com/1_2.jpg" alt=""></p>
<p>该种情况可以通过<a href="http://blog.csdn.net/matlab_matlab/article/details/56286868" target="_blank" rel="noopener">调整窗的宽度来提高拟合优度</a>，如下图为窗宽度为2.5时重新拟合一个月的光伏强度结果</p>
<p><img src="http://oag5ozkgs.bkt.clouddn.com/1_3.jpg" alt="当width=2.5时拟合结果"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>MATLAB</tag>
        <tag>核密度估计</tag>
      </tags>
  </entry>
  <entry>
    <title>光伏建模——核密度估计而非Beta分布</title>
    <url>/2017/03/15/2017-03-15-%E5%85%89%E4%BC%8F%E5%BB%BA%E6%A8%A1/</url>
    <content><![CDATA[<h1 id="光伏建模与风速建模的不同"><a href="#光伏建模与风速建模的不同" class="headerlink" title="光伏建模与风速建模的不同"></a>光伏建模与风速建模的不同</h1><ul>
<li>对与风速建模而言，其符合双参数威布尔分布表示其样本数据符合双参数威布尔数据样本的特征</li>
<li>对于光伏建模而言，所谓的使用beta分布拟合光伏实际意义为在短时间内（一天之内）光照强度的曲线可以通过beta分布的概率密度函数去近似拟合</li>
</ul>
<p>此二者有本质区别，因此如果仅通过曲线拟合表示光伏建模数据不能称作光伏建模随机性的数学表述，因此在缺乏先验的情况下只能求助于仅基于样本数据核密度估计</p>
<a id="more"></a>
<h1 id="非参数核密度估计"><a href="#非参数核密度估计" class="headerlink" title="非参数核密度估计"></a>非参数核密度估计</h1><p>定义<br>  :   设$x_1,x_2,…,x_n$为随机变量$x$的样本，令随机变量$x$的概率密度函数为$f(x)$，则 $f(x)$ 的核密度估计为： </p>
<script type="math/tex; mode=display">f_h(x)={1 \over nh}{\displaystyle \sum_{j=1}^n{K({x-x_j \over h})}}={1 \over n}{\displaystyle \sum_{j=1}^n{K_h(x-x_j)}}</script><p>  其中$n$为样本容量，$h$ 为平滑系数，$K(·)$ 为核函数</p>
<iframe src="http://www.cnblogs.com/wt869054461/p/5935992.html" width="100%" height="700px" frameborder="0" scrolling="auto"> </iframe>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>核密度估计</tag>
      </tags>
  </entry>
  <entry>
    <title>混合Copula风速建模——代码实现与结果分析</title>
    <url>/2017/03/10/2017-03-10-%E6%B7%B7%E5%90%88Copula%E9%A3%8E%E9%80%9F%E5%BB%BA%E6%A8%A1%E2%80%94%E2%80%94%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%B8%8E%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p><em>由于仿真一次所耗时间较长，因此选择北大桥与干河口风电场作为代表</em></p>
<h1 id="EM算法估计混合Copula参数"><a href="#EM算法估计混合Copula参数" class="headerlink" title="EM算法估计混合Copula参数"></a>EM算法估计混合Copula参数</h1><h2 id="EM主体"><a href="#EM主体" class="headerlink" title="EM主体"></a>EM主体</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">U=GHK;</span><br><span class="line">V=BDQ;</span><br><span class="line"><span class="comment">% 初始化</span></span><br><span class="line">S=<span class="number">3</span>;</span><br><span class="line">th=<span class="number">0.01</span>;</span><br><span class="line">omega=[<span class="number">1</span>/<span class="number">3</span>,<span class="number">1</span>/<span class="number">3</span>,<span class="number">1</span>/<span class="number">3</span>];</span><br><span class="line">[a,nuhat]=copulafit(<span class="string">'t'</span>,[U,V]);</span><br><span class="line">a2=copulafit(<span class="string">'Gumbel'</span>,[U,V]);</span><br><span class="line">a3=copulafit(<span class="string">'Frank'</span>,[U,V]);</span><br><span class="line">theta=[a(<span class="number">1</span>,<span class="number">2</span>),a2,a3];</span><br><span class="line">[N,~]=<span class="built_in">size</span>(U);</span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line">tt=<span class="built_in">zeros</span>(N,<span class="number">2</span>);</span><br><span class="line">t=<span class="built_in">inf</span>;</span><br><span class="line">COPULA=<span class="built_in">zeros</span>(N,S);</span><br><span class="line">list1=<span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">101</span>);</span><br><span class="line">list2=<span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">101</span>);</span><br><span class="line">puz=<span class="built_in">zeros</span>(N,S);</span><br><span class="line">puz1=<span class="built_in">zeros</span>(N,S);</span><br><span class="line"><span class="keyword">while</span> t&gt;=th&amp;&amp;count&lt;=<span class="number">100</span>;</span><br><span class="line">    theta_old=theta;</span><br><span class="line">    omega_old=omega;</span><br><span class="line">    COPULA(:,<span class="number">1</span>)=copulapdf(<span class="string">'t'</span>,[U(:) V(:)],theta_old(<span class="number">1</span>),nuhat);</span><br><span class="line">    COPULA(:,<span class="number">2</span>)=copulapdf(<span class="string">'Gumbel'</span>,[U(:) V(:)],theta_old(<span class="number">2</span>));</span><br><span class="line">    COPULA(:,<span class="number">3</span>)=copulapdf(<span class="string">'Frank'</span>,[U(:) V(:)],theta_old(<span class="number">3</span>));</span><br><span class="line">    puz(:,<span class="number">1</span>)=COPULA(:,<span class="number">1</span>)*omega_old(<span class="number">1</span>);</span><br><span class="line">    puz(:,<span class="number">2</span>)=COPULA(:,<span class="number">2</span>)*omega_old(<span class="number">2</span>);</span><br><span class="line">    puz(:,<span class="number">3</span>)=COPULA(:,<span class="number">3</span>)*omega_old(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:N</span><br><span class="line">        puz1(<span class="built_in">i</span>,<span class="number">1</span>)=puz(<span class="built_in">i</span>,<span class="number">1</span>)/sum(puz(<span class="built_in">i</span>,:));</span><br><span class="line">        puz1(<span class="built_in">i</span>,<span class="number">2</span>)=puz(<span class="built_in">i</span>,<span class="number">2</span>)/sum(puz(<span class="built_in">i</span>,:));</span><br><span class="line">        puz1(<span class="built_in">i</span>,<span class="number">3</span>)=puz(<span class="built_in">i</span>,<span class="number">3</span>)/sum(puz(<span class="built_in">i</span>,:));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    omega(<span class="number">1</span>)=sum(puz1(:,<span class="number">1</span>))/N;</span><br><span class="line">    omega(<span class="number">2</span>)=sum(puz1(:,<span class="number">2</span>))/N;</span><br><span class="line">    omega(<span class="number">3</span>)=sum(puz1(:,<span class="number">3</span>))/N;</span><br><span class="line">    omega</span><br><span class="line">    tt(:,<span class="number">1</span>)=tinv(U(:),nuhat);</span><br><span class="line">    tt(:,<span class="number">2</span>)=tinv(V(:),nuhat);</span><br><span class="line">    [turntheta,fval,exitflag,output,grad,hessian]=updatetheta(N,U,V,theta_old,puz1,tt,nuhat);</span><br><span class="line">    theta=turntheta;</span><br><span class="line">    theta</span><br><span class="line">    list1(:,count+<span class="number">1</span>)=theta;</span><br><span class="line">    list2(:,count+<span class="number">1</span>)=omega;</span><br><span class="line">    t=<span class="built_in">max</span>([norm(theta_old(:)-theta(:));norm(omega_old(:)-omega(:))])</span><br><span class="line">    count=count+<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="参数更新（非线性优化bfgs）"><a href="#参数更新（非线性优化bfgs）" class="headerlink" title="参数更新（非线性优化bfgs）"></a>参数更新（非线性优化bfgs）</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[turntheta,fval,exitflag,output,grad,hessian]</span>=<span class="title">updatetheta</span><span class="params">(N,U,V,theta,puz,t,nuhat)</span></span></span><br><span class="line">options=optimset(<span class="string">'Display'</span>,<span class="string">'iter-detailed'</span>,<span class="string">'TolFun'</span>,<span class="number">1e-10</span>,<span class="string">'TolX'</span>,<span class="number">1e-10</span>,<span class="string">'LargeScale'</span>,<span class="string">'off'</span>,<span class="string">'FinDiffType'</span>,<span class="string">'central'</span>,<span class="string">'HessUpdate'</span>,<span class="string">'bfgs'</span>);</span><br><span class="line">[turntheta,fval,exitflag,output,grad,hessian]=fminunc(@utheta,theta,options);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">y</span>=<span class="title">utheta</span><span class="params">(theta)</span></span></span><br><span class="line"><span class="keyword">if</span> theta(<span class="number">3</span>)==<span class="number">0</span></span><br><span class="line">    theta(<span class="number">3</span>)=theta(<span class="number">3</span>)+<span class="number">0.0001</span>;  <span class="comment">%防止出现 Frank  Copula 的相依结构参数为 0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">y=<span class="number">0</span>;</span><br><span class="line">th=<span class="built_in">eye</span>(<span class="number">2</span>);</span><br><span class="line">th(<span class="number">1</span>,<span class="number">2</span>)=theta(<span class="number">1</span>);</span><br><span class="line">th(<span class="number">2</span>,<span class="number">1</span>)=theta(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:N</span><br><span class="line"></span><br><span class="line">    y=y+<span class="built_in">log</span>(((det(th))^(<span class="number">-1</span>/<span class="number">2</span>))*<span class="built_in">gamma</span>((nuhat+<span class="number">2</span>)/<span class="number">2</span>)*<span class="built_in">gamma</span>(nuhat/<span class="number">2</span>)*(<span class="number">1</span>+t(<span class="built_in">j</span>,:)*th^(<span class="number">-1</span>)*t(<span class="built_in">j</span>,:)'/nuhat)^(-(nuhat+<span class="number">2</span>)/<span class="number">2</span>)/((<span class="built_in">gamma</span>((nuhat+<span class="number">1</span>)/<span class="number">2</span>))^<span class="number">2</span>*((<span class="number">1</span>+t(<span class="built_in">j</span>,<span class="number">1</span>)^<span class="number">2</span>/nuhat)^(-(nuhat+<span class="number">1</span>)/<span class="number">2</span>)*(<span class="number">1</span>+t(<span class="built_in">j</span>,<span class="number">2</span>)^<span class="number">2</span>/nuhat)^(-(nuhat+<span class="number">1</span>)/<span class="number">2</span>))))*puz(<span class="built_in">j</span>,<span class="number">1</span>)+...</span><br><span class="line">        <span class="built_in">log</span>(<span class="built_in">exp</span>(-((-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^theta(<span class="number">2</span>)+(-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^theta(<span class="number">2</span>))^(<span class="number">1</span>/theta(<span class="number">2</span>)))*(<span class="built_in">log</span>(U(<span class="built_in">j</span>))*<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^(theta(<span class="number">2</span>)<span class="number">-1</span>)*(((-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^(theta(<span class="number">2</span>))+(-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^(theta(<span class="number">2</span>)))^(<span class="number">1</span>/theta(<span class="number">2</span>))+theta(<span class="number">2</span>)<span class="number">-1</span>)/(U(<span class="built_in">j</span>)*V(<span class="built_in">j</span>)*((-<span class="built_in">log</span>(U(<span class="built_in">j</span>)))^(theta(<span class="number">2</span>))+(-<span class="built_in">log</span>(V(<span class="built_in">j</span>)))^(theta(<span class="number">2</span>)))^(<span class="number">2</span><span class="number">-1</span>/theta(<span class="number">2</span>))))*puz(<span class="built_in">j</span>,<span class="number">2</span>)+...</span><br><span class="line">        <span class="built_in">log</span>(theta(<span class="number">3</span>)*(<span class="number">1</span>-<span class="built_in">exp</span>(-theta(<span class="number">3</span>)))*<span class="built_in">exp</span>(-theta(<span class="number">3</span>)*(U(<span class="built_in">j</span>)+V(<span class="built_in">j</span>)))/((<span class="number">1</span>-<span class="built_in">exp</span>(-theta(<span class="number">3</span>)))-(<span class="number">1</span>-<span class="built_in">exp</span>(-theta(<span class="number">3</span>)*U(<span class="built_in">j</span>)))*(<span class="number">1</span>-<span class="built_in">exp</span>(-theta(<span class="number">3</span>)*V(<span class="built_in">j</span>))))^<span class="number">2</span>)*puz(<span class="built_in">j</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">y=-y;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><div class="table-container">
<table>
<thead>
<tr>
<th>Copula函数</th>
<th>$\theta$</th>
<th>$\omega$</th>
<th>$k$</th>
</tr>
</thead>
<tbody>
<tr>
<td>t-Copula</td>
<td>0.1244</td>
<td>0.0822</td>
<td>3</td>
</tr>
<tr>
<td>Gumbel-Copula</td>
<td>4.1127</td>
<td>0.7495</td>
<td></td>
</tr>
<tr>
<td>Frank-Copula</td>
<td>6.5931</td>
<td>0.1683</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>即</p>
<script type="math/tex; mode=display">C(u,v;a)=0.7495C_{Gumbel}(u,v;4.1127)+0.1683C_{Frank}(u,v;6.5931)+0.0822C_t(u,v;0.1244,3)</script><h1 id="结果评价"><a href="#结果评价" class="headerlink" title="结果评价"></a>结果评价</h1><h2 id="Q-Q图"><a href="#Q-Q图" class="headerlink" title="Q-Q图"></a>Q-Q图</h2><p><img src="http://oag5ozkgs.bkt.clouddn.com/mcopula.jpg" alt="mixed-Copula"><br>可以与之前单一Copula的仿真QQ图进行比较<br><img src="http://oag5ozkgs.bkt.clouddn.com/im1.jpg" alt="qq图2"><br><img src="http://oag5ozkgs.bkt.clouddn.com/im2.jpg" alt="qq图3"><br>可以明显的看出拟合优度上混合Copula有很大的优势</p>
<h2 id="K-S检验"><a href="#K-S检验" class="headerlink" title="K-S检验"></a>K-S检验</h2><div class="table-container">
<table>
<thead>
<tr>
<th>风电场组合</th>
<th>$k_N$</th>
<th>$k_t$</th>
<th>$k_G$</th>
<th>$k_C$</th>
<th>$k_F$</th>
<th>$K_M$</th>
</tr>
</thead>
<tbody>
<tr>
<td>北大桥，干河口</td>
<td>0.0395</td>
<td>0.0343</td>
<td>0.0302</td>
<td>0.0468</td>
<td>0.0323</td>
<td>0.0271</td>
</tr>
</tbody>
</table>
</div>
<p>可以看出就K-S统计值而言混合Copula也小于其他单一Copula</p>
<h2 id="欧式距离"><a href="#欧式距离" class="headerlink" title="欧式距离"></a>欧式距离</h2><div class="table-container">
<table>
<thead>
<tr>
<th>风电场组合</th>
<th>$d_N$</th>
<th>$d_t$</th>
<th>$d_G$</th>
<th>$d_C$</th>
<th>$d_F$</th>
<th>$d_M$</th>
</tr>
</thead>
<tbody>
<tr>
<td>北大桥，干河口</td>
<td>3.6952</td>
<td>2.4590</td>
<td>1.6097</td>
<td>10.9923</td>
<td>1.6888</td>
<td>1.3220</td>
</tr>
</tbody>
</table>
</div>
<p>可以看出就欧式距离而言混合Copula也小于其他单一Copula</p>
<p>PS：作为一个学电气的人一开始看到要使用一个从未见过的EM算法我几乎是拒绝的，要多谢CS的室友和我分享了有关这方面的知识并且和我一起探讨。这个程序跑起来确实让人奔溃，跑一次就要三个多小时，但是最后仿真出来的结果符合我推测确实让我很开心</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>MATLAB</tag>
        <tag>EM算法</tag>
        <tag>混合Copula</tag>
        <tag>bfgs</tag>
      </tags>
  </entry>
  <entry>
    <title>混合Copula函数风速建模——EM算法</title>
    <url>/2017/03/06/2017-03-06-%E6%B7%B7%E5%90%88Copula%E5%87%BD%E6%95%B0%E9%A3%8E%E9%80%9F%E5%BB%BA%E6%A8%A1/</url>
    <content><![CDATA[<p><img src="/images/123.jpg" alt="1"><br><a id="more"></a><br><img src="/images/1232.jpg" alt="2"><br><img src="/images/1233.jpg" alt="3"><br><img src="/images/1234.jpg" alt="4"><br><img src="/images/1235.jpg" alt="5"><br><img src="/images/1236.jpg" alt="6"><br><img src="/images/1237.jpg" alt="7"><br><img src="/images/1238.jpg" alt="8"><br><img src="/images/1239.jpg" alt="9"></p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>Copula</tag>
        <tag>风速建模</tag>
        <tag>EM算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Copula风速建模相关（5）——结果分析</title>
    <url>/2017/03/03/2017-03-03-Copula%E9%A3%8E%E9%80%9F%E5%BB%BA%E6%A8%A1%E7%9B%B8%E5%85%B3%EF%BC%885%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Q-Q图分析"><a href="#Q-Q图分析" class="headerlink" title="Q-Q图分析"></a>Q-Q图分析</h1><p><img src="http://oag5ozkgs.bkt.clouddn.com/2in1_1.jpg" alt="qq图2"><br><img src="http://oag5ozkgs.bkt.clouddn.com/3in1_1.jpg" alt="qq图3"></p>
<p>通过<a href="http://fatelancer.top/2017/02/27/Copula%E9%A3%8E%E9%80%9F%E5%BB%BA%E6%A8%A1%E7%9B%B8%E5%85%B3%EF%BC%881%EF%BC%89/#copula函数的拟合优度校验与经验copula函数对比" target="_blank" rel="noopener">Q-Q图的判定原则</a>可知，各类Copula函数差别不 很 明 显，其 中Gumbel-Copula，Frank-Copula，t-Copula函数曲线均较为接近45°曲线，拟合效果相对较好。以下采用统计法</p>
<a id="more"></a>
<h1 id="K-S检验法"><a href="#K-S检验法" class="headerlink" title="K-S检验法"></a>K-S检验法</h1><div class="table-container">
<table>
<thead>
<tr>
<th>风电场组合</th>
<th>$k_N$</th>
<th>$k_t$</th>
<th>$k_G$</th>
<th>$k_C$</th>
<th>$k_F$</th>
</tr>
</thead>
<tbody>
<tr>
<td>桥湾，北大桥</td>
<td>0.0406</td>
<td>0.0395</td>
<td>0.0302</td>
<td>0.0520</td>
<td>0.0364</td>
</tr>
<tr>
<td>桥湾，干河口</td>
<td>0.0260</td>
<td>0.0219</td>
<td>0.0156</td>
<td>0.0489</td>
<td>0.0208</td>
</tr>
<tr>
<td>桥湾，昌马</td>
<td>0.0260</td>
<td>0.0239</td>
<td>0.0156</td>
<td>0.0499</td>
<td>0.0239</td>
</tr>
<tr>
<td>北大桥，干河口</td>
<td>0.0395</td>
<td>0.0343</td>
<td>0.0302</td>
<td>0.0468</td>
<td>0.0323</td>
</tr>
<tr>
<td>北大桥，昌马</td>
<td>0.0239</td>
<td>0.0239</td>
<td>0.0156</td>
<td>0.0385</td>
<td>0.0166</td>
</tr>
<tr>
<td>干河口，昌马</td>
<td>0.0208</td>
<td>0.0208</td>
<td>0.0146</td>
<td>0.0385</td>
<td>0.0156</td>
</tr>
</tbody>
</table>
</div>
<p>通过<a href="http://fatelancer.top/2017/02/27/Copula%E9%A3%8E%E9%80%9F%E5%BB%BA%E6%A8%A1%E7%9B%B8%E5%85%B3%EF%BC%881%EF%BC%89/#copula函数的拟合优度校验与经验copula函数对比" target="_blank" rel="noopener">K-S检验法的判定原则</a>可知，在六种不同的风电场组合中，Gumbel-Copula，Frank-Copula，t-Copula这三种Copula函数的 $KS$ 统计值相对较小，而Normal-Copula，Clayton-Copula的统计值相对较大</p>
<h1 id="秩相关性测度"><a href="#秩相关性测度" class="headerlink" title="秩相关性测度"></a>秩相关性测度</h1><div class="table-container">
<table>
<thead>
<tr>
<th>数据来源</th>
<th>Kendall秩相关系数 $\tau$</th>
<th>Spearman秩相关系数 $\rho_s$</th>
</tr>
</thead>
<tbody>
<tr>
<td>原始观测数据</td>
<td>0.4816</td>
<td>0.6628</td>
</tr>
<tr>
<td>Normal-Copula</td>
<td>0.4371</td>
<td>0.6159</td>
</tr>
<tr>
<td>t-Copula</td>
<td>0.4410</td>
<td>0.6151</td>
</tr>
<tr>
<td>Gumbel-Copula</td>
<td>0.4604</td>
<td>0.6366</td>
</tr>
<tr>
<td>Clayton-Copula</td>
<td>0.2569</td>
<td>0.3751</td>
</tr>
<tr>
<td>Frank-Copula</td>
<td>0.4592</td>
<td>0.6465</td>
</tr>
</tbody>
</table>
</div>
<p>通过与经验函数的Kendall秩相关系数，Spearman秩相关系数进行对比可以发现Gumbel-Copula，Frank-Copula，t-Copula这三种Copula函数与原始数据保持着良好的秩相关性，而Normal-Copula，Clayton-Copula的秩相关性较差。</p>
<h1 id="欧式距离"><a href="#欧式距离" class="headerlink" title="欧式距离"></a>欧式距离</h1><div class="table-container">
<table>
<thead>
<tr>
<th>风电场组合</th>
<th>$d_N$</th>
<th>$d_t$</th>
<th>$d_G$</th>
<th>$d_C$</th>
<th>$d_F$</th>
</tr>
</thead>
<tbody>
<tr>
<td>桥湾，北大桥</td>
<td>2.8924</td>
<td>2.8209</td>
<td>1.3953</td>
<td>9.1763</td>
<td>2.4125</td>
</tr>
<tr>
<td>桥湾，干河口</td>
<td>2.7285</td>
<td>2.6970</td>
<td>1.1862</td>
<td>8.2528</td>
<td>2.2180</td>
</tr>
<tr>
<td>桥湾，昌马</td>
<td>2.3450</td>
<td>2.2558</td>
<td>1.3469</td>
<td>8.3662</td>
<td>1.8227</td>
</tr>
<tr>
<td>北大桥，干河口</td>
<td>3.6952</td>
<td>2.4590</td>
<td>1.6097</td>
<td>10.9923</td>
<td>1.6888</td>
</tr>
<tr>
<td>北大桥，昌马</td>
<td>1.7187</td>
<td>1.7470</td>
<td>1.5995</td>
<td>5.0238</td>
<td>1.3692</td>
</tr>
<tr>
<td>干河口，昌马</td>
<td>1.8369</td>
<td>1.8561</td>
<td>1.3731</td>
<td>4.8842</td>
<td>1.4301</td>
</tr>
</tbody>
</table>
</div>
<p>可以看到在以上6种风电场组合中Gumbel-Copula，Frank-Copula，t-Copula这三种Copula函数与经验Copula函数的欧氏距离较小，而Normal-Copula，Clayton-Copula与经验函数的欧氏距离较大</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>任何一个单一的Copula函数都不能够非常好的表达风电场的相依结构，因此考虑使用混合Copula函数，即将表现较好的3个Copula函数进行加权组合，即</p>
<script type="math/tex; mode=display">C(u,v;a)=\omega_1C_{Gumbel}(u,v;\theta_1)+\omega_2C_{Frank}(u,v;\theta_2)+\omega_3C_t(u,v;\theta_3,k)</script><p>其中 $\omega_1+ \omega_2+ \omega_3=1$</p>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>Copula</tag>
        <tag>风速建模</tag>
      </tags>
  </entry>
  <entry>
    <title>Copula风速建模相关(4)——Copula模型评价</title>
    <url>/2017/03/02/2017-03-02-Copula%E9%A3%8E%E9%80%9F%E5%BB%BA%E6%A8%A1%E7%9B%B8%E5%85%B3%EF%BC%884%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Q-Q图"><a href="#Q-Q图" class="headerlink" title="Q-Q图"></a>Q-Q图</h1><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">%计算网格点上Copula分布函数值画QQ图</span></span><br><span class="line">Ccdf_n=copulacdf(<span class="string">'Gaussian'</span>,[Udata(:),Vdata(:)],rho_norm);</span><br><span class="line">Ccdf_t=copulacdf(<span class="string">'t'</span>,[Udata(:),Vdata(:)],rho_t,nuhat);</span><br><span class="line">Ccdf_G=copulacdf(<span class="string">'Gumbel'</span>,[Udata(:),Vdata(:)],paramhat_G);</span><br><span class="line">Ccdf_C=copulacdf(<span class="string">'Clayton'</span>,[Udata(:),Vdata(:)],paramhat_C);</span><br><span class="line">Ccdf_F=copulacdf(<span class="string">'Frank'</span>,[Udata(:),Vdata(:)],paramhat_F);</span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">qqplot(<span class="built_in">reshape</span>(CopulaEmpirical,<span class="built_in">size</span>(Udata)),<span class="built_in">reshape</span>(Ccdf_n,<span class="built_in">size</span>(Udata)),<span class="string">'b'</span>);</span><br><span class="line">xlabel(<span class="string">'经验Copula'</span>);ylabel([<span class="string">'Normal Copula'</span>,<span class="string">'rho:'</span>,num2str(rho_norm(<span class="number">1</span>,<span class="number">2</span>))]); title([N&#123;n&#125;,<span class="string">'与'</span>,N&#123;m&#125;,<span class="string">'Q-Q图'</span>,<span class="string">'Normal'</span>]);</span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">qqplot(<span class="built_in">reshape</span>(CopulaEmpirical,<span class="built_in">size</span>(Udata)),<span class="built_in">reshape</span>(Ccdf_t,<span class="built_in">size</span>(Udata)),<span class="string">'b'</span>);</span><br><span class="line">xlabel(<span class="string">'经验Copula'</span>);ylabel([<span class="string">'t-Copula'</span>,<span class="string">'rho:'</span>,num2str(rho_t(<span class="number">1</span>,<span class="number">2</span>)),<span class="string">'k:'</span>,num2str(nuhat)]); title([N&#123;n&#125;,<span class="string">'与'</span>,N&#123;m&#125;,<span class="string">'Q-Q图'</span>,<span class="string">'t'</span>]);</span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">qqplot(<span class="built_in">reshape</span>(CopulaEmpirical,<span class="built_in">size</span>(Udata)),<span class="built_in">reshape</span>(Ccdf_G,<span class="built_in">size</span>(Udata)),<span class="string">'b'</span>);</span><br><span class="line">xlabel(<span class="string">'经验Copula'</span>);ylabel([<span class="string">'Gumbel-Copula'</span>,<span class="string">'p_G:'</span>,num2str(paramhat_G)]); title([N&#123;n&#125;,<span class="string">'与'</span>,N&#123;m&#125;,<span class="string">'Q-Q图'</span>,<span class="string">'Gumbel'</span>]);</span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">qqplot(<span class="built_in">reshape</span>(CopulaEmpirical,<span class="built_in">size</span>(Udata)),<span class="built_in">reshape</span>(Ccdf_C,<span class="built_in">size</span>(Udata)),<span class="string">'b'</span>);</span><br><span class="line">xlabel(<span class="string">'经验Copula'</span>);ylabel([<span class="string">'Clayton-Copula'</span>,<span class="string">'p_C'</span>,num2str(paramhat_C)]); title([N&#123;n&#125;,<span class="string">'与'</span>,N&#123;m&#125;,<span class="string">'Q-Q图'</span>,<span class="string">'Clayton'</span>]);</span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">qqplot(<span class="built_in">reshape</span>(CopulaEmpirical,<span class="built_in">size</span>(Udata)),<span class="built_in">reshape</span>(Ccdf_F,<span class="built_in">size</span>(Udata)),<span class="string">'b'</span>);</span><br><span class="line">xlabel(<span class="string">'经验Copula'</span>);ylabel([<span class="string">'Frank-Copula'</span>,<span class="string">'p_F'</span>,num2str(paramhat_F)]); title([N&#123;n&#125;,<span class="string">'与'</span>,N&#123;m&#125;,<span class="string">'Q-Q图'</span>,<span class="string">'Frank'</span>]);</span><br></pre></td></tr></table></figure>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p> <img src="http://oag5ozkgs.bkt.clouddn.com/2in1_1.jpg" alt="qq图2"><br> <img src="http://oag5ozkgs.bkt.clouddn.com/3in1_1.jpg" alt="qq图3"></p>
<a id="more"></a>
<h1 id="K-S检验"><a href="#K-S检验" class="headerlink" title="K-S检验"></a>K-S检验</h1><p><em>以北大桥与桥湾风电场为例</em></p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%K-S检验</span></span><br><span class="line">[h_n,p_n,k_n]=kstest2(CopulaEmpirical',Ccdf_n)</span><br><span class="line">[h_t,p_t,k_t]=kstest2(CopulaEmpirical',Ccdf_t)</span><br><span class="line">[h_G,p_G,k_G]=kstest2(CopulaEmpirical',Ccdf_G)</span><br><span class="line">[h_C,p_C,k_C]=kstest2(CopulaEmpirical',Ccdf_C)</span><br><span class="line">[h_F,p_F,k_F]=kstest2(CopulaEmpirical',Ccdf_F)</span><br></pre></td></tr></table></figure>
<h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><div class="table-container">
<table>
<thead>
<tr>
<th>风电场组合</th>
<th>$k_N$</th>
<th>$k_t$</th>
<th>$k_G$</th>
<th>$k_C$</th>
<th>$k_F$</th>
</tr>
</thead>
<tbody>
<tr>
<td>桥湾，北大桥</td>
<td>0.0406</td>
<td>0.0395</td>
<td>0.0302</td>
<td>0.0520</td>
<td>0.0364</td>
</tr>
<tr>
<td>桥湾，干河口</td>
<td>0.0260</td>
<td>0.0219</td>
<td>0.0156</td>
<td>0.0489</td>
<td>0.0208</td>
</tr>
<tr>
<td>桥湾，昌马</td>
<td>0.0260</td>
<td>0.0239</td>
<td>0.0156</td>
<td>0.0499</td>
<td>0.0239</td>
</tr>
<tr>
<td>北大桥，干河口</td>
<td>0.0395</td>
<td>0.0343</td>
<td>0.0302</td>
<td>0.0468</td>
<td>0.0323</td>
</tr>
<tr>
<td>北大桥，昌马</td>
<td>0.0239</td>
<td>0.0239</td>
<td>0.0156</td>
<td>0.0385</td>
<td>0.0166</td>
</tr>
<tr>
<td>干河口，昌马</td>
<td>0.0208</td>
<td>0.0208</td>
<td>0.0146</td>
<td>0.0385</td>
<td>0.0156</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Copula函数的秩相关性测度"><a href="#Copula函数的秩相关性测度" class="headerlink" title="Copula函数的秩相关性测度"></a>Copula函数的秩相关性测度</h1><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%Copula模型的相关性测度</span></span><br><span class="line"><span class="comment">%使用原始数据计算秩相关系数</span></span><br><span class="line">Kendall=corr([X,Y],<span class="string">'type'</span>,<span class="string">'Kendall'</span>)</span><br><span class="line">Spearman=corr([X,Y],<span class="string">'type'</span>,<span class="string">'Spearman'</span>)</span><br><span class="line"><span class="comment">%计算Copula的秩相关系数</span></span><br><span class="line">Kendall_norm = copulastat(<span class="string">'Gaussian'</span>,rho_norm)</span><br><span class="line">Spearman_norm = copulastat(<span class="string">'Gaussian'</span>,rho_norm,<span class="string">'type'</span>,<span class="string">'Spearman'</span>)</span><br><span class="line">Kendall_t = copulastat(<span class="string">'t'</span>,rho_t,nuhat)</span><br><span class="line">Spearman_t = copulastat(<span class="string">'t'</span>,rho_t,nuhat,<span class="string">'type'</span>,<span class="string">'Spearman'</span>)</span><br><span class="line">Kendall_G = copulastat(<span class="string">'Gumbel'</span>,paramhat_G)</span><br><span class="line">Spearman_G = copulastat(<span class="string">'Gumbel'</span>,paramhat_G,<span class="string">'type'</span>,<span class="string">'Spearman'</span>)</span><br><span class="line">Kendall_C = copulastat(<span class="string">'Clayton'</span>,paramhat_C)</span><br><span class="line">Spearman_C = copulastat(<span class="string">'Clayton'</span>,paramhat_C,<span class="string">'type'</span>,<span class="string">'Spearman'</span>)</span><br><span class="line">Kendall_F = copulastat(<span class="string">'Frank'</span>,paramhat_F)</span><br><span class="line">Spearman_F= copulastat(<span class="string">'Frank'</span>,paramhat_F,<span class="string">'type'</span>,<span class="string">'Spearman'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h2><div class="table-container">
<table>
<thead>
<tr>
<th>数据来源</th>
<th>Kendall秩相关系数 $\tau$</th>
<th>Spearman秩相关系数 $\rho_s$</th>
</tr>
</thead>
<tbody>
<tr>
<td>原始观测数据</td>
<td>0.4816</td>
<td>0.6628</td>
</tr>
<tr>
<td>Normal-Copula</td>
<td>0.4371</td>
<td>0.6159</td>
</tr>
<tr>
<td>t-Copula</td>
<td>0.4410</td>
<td>0.6151</td>
</tr>
<tr>
<td>Gumbel-Copula</td>
<td>0.4604</td>
<td>0.6366</td>
</tr>
<tr>
<td>Clayton-Copula</td>
<td>0.2569</td>
<td>0.3751</td>
</tr>
<tr>
<td>Frank-Copula</td>
<td>0.4592</td>
<td>0.6465</td>
</tr>
</tbody>
</table>
</div>
<h1 id="欧式距离计算"><a href="#欧式距离计算" class="headerlink" title="欧式距离计算"></a>欧式距离计算</h1><h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%----------------求欧式距离</span></span><br><span class="line"><span class="comment">% 通过循环计算经验Copula函数在新产生的网格点处的函数值</span></span><br><span class="line">CUV=<span class="built_in">zeros</span>(<span class="built_in">size</span>(UU(:)));</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">numel</span>(UU)</span><br><span class="line">    CUV(<span class="built_in">i</span>)=C(UU(<span class="built_in">i</span>),VV(<span class="built_in">i</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%求各Copula函数在原始样本点处的函数值</span></span><br><span class="line">Cnorm=copulacdf(<span class="string">'Gaussian'</span>,[UU(:),VV(:)],rho_norm);</span><br><span class="line">Ct=copulacdf(<span class="string">'t'</span>,[UU(:),VV(:)],rho_t,nuhat);</span><br><span class="line">CG=copulacdf(<span class="string">'Gumbel'</span>,[UU(:),VV(:)],paramhat_G);</span><br><span class="line">CC=copulacdf(<span class="string">'Clayton'</span>,[UU(:),VV(:)],paramhat_C);</span><br><span class="line">CF=copulacdf(<span class="string">'Frank'</span>,[UU(:),VV(:)],paramhat_F);</span><br><span class="line"></span><br><span class="line"><span class="comment">%计算欧式距离</span></span><br><span class="line">dnorm=<span class="built_in">sqrt</span>((CUV-Cnorm)'*(CUV-Cnorm))</span><br><span class="line">dt=<span class="built_in">sqrt</span>((CUV-Ct)'*(CUV-Ct))</span><br><span class="line">dG=<span class="built_in">sqrt</span>((CUV-CG)'*(CUV-CG))</span><br><span class="line">dC=<span class="built_in">sqrt</span>((CUV-CC)'*(CUV-CC))</span><br><span class="line">dF=<span class="built_in">sqrt</span>((CUV-CF)'*(CUV-CF))</span><br></pre></td></tr></table></figure>
<h2 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h2><div class="table-container">
<table>
<thead>
<tr>
<th>风电场组合</th>
<th>$d_N$</th>
<th>$d_t$</th>
<th>$d_G$</th>
<th>$d_C$</th>
<th>$d_F$</th>
</tr>
</thead>
<tbody>
<tr>
<td>桥湾，北大桥</td>
<td>2.8924</td>
<td>2.8209</td>
<td>1.3953</td>
<td>9.1763</td>
<td>2.4125</td>
</tr>
<tr>
<td>桥湾，干河口</td>
<td>2.7285</td>
<td>2.6970</td>
<td>1.1862</td>
<td>8.2528</td>
<td>2.2180</td>
</tr>
<tr>
<td>桥湾，昌马</td>
<td>2.3450</td>
<td>2.2558</td>
<td>1.3469</td>
<td>8.3662</td>
<td>1.8227</td>
</tr>
<tr>
<td>北大桥，干河口</td>
<td>3.6952</td>
<td>2.4590</td>
<td>1.6097</td>
<td>10.9923</td>
<td>1.6888</td>
</tr>
<tr>
<td>北大桥，昌马</td>
<td>1.7187</td>
<td>1.7470</td>
<td>1.5995</td>
<td>5.0238</td>
<td>1.3692</td>
</tr>
<tr>
<td>干河口，昌马</td>
<td>1.8369</td>
<td>1.8561</td>
<td>1.3731</td>
<td>4.8842</td>
<td>1.4301</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>Copula</tag>
        <tag>Q-Q图</tag>
        <tag>K-S检验</tag>
        <tag>欧氏距离</tag>
      </tags>
  </entry>
  <entry>
    <title>Copula风速建模相关（3）——代码实现</title>
    <url>/2017/03/01/2017-03-01-Copula%E9%A3%8E%E9%80%9F%E5%BB%BA%E6%A8%A1%E7%9B%B8%E5%85%B3%EF%BC%883%EF%BC%89/</url>
    <content><![CDATA[<h1 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h1><p><strong>使用甘肃桥湾（1），北大桥（2），干河口（3），昌马（4）四处风速数据作为仿真数据</strong></p>
<h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><h2 id="读入数据"><a href="#读入数据" class="headerlink" title="读入数据"></a>读入数据</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%从文件中读取数据</span></span><br><span class="line">load(<span class="string">'data.mat'</span>);</span><br><span class="line">qw=data(:,<span class="number">1</span>);<span class="comment">%桥湾</span></span><br><span class="line">bdq=data(:,<span class="number">4</span>);<span class="comment">%北大桥</span></span><br><span class="line">ghk=data(:,<span class="number">7</span>);<span class="comment">%干河口</span></span><br><span class="line">cm=data(:,<span class="number">10</span>);<span class="comment">%昌马</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="对风速进行双参数威布尔分布化"><a href="#对风速进行双参数威布尔分布化" class="headerlink" title="对风速进行双参数威布尔分布化"></a>对风速进行双参数威布尔分布化</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%桥湾</span></span><br><span class="line">pqw=wblfit(qw);</span><br><span class="line">QW=wblpdf(<span class="number">1</span>:<span class="number">50</span>,pqw(<span class="number">1</span>),pqw(<span class="number">2</span>));</span><br><span class="line">QWC=wblcdf(qw,pqw(<span class="number">1</span>),pqw(<span class="number">2</span>));</span><br><span class="line"><span class="comment">%北大桥</span></span><br><span class="line">pbdq=wblfit(bdq);</span><br><span class="line">BDQ=wblpdf(<span class="number">1</span>:<span class="number">50</span>,pbdq(<span class="number">1</span>),pbdq(<span class="number">2</span>));</span><br><span class="line">BDQC=wblcdf(bdq,pbdq(<span class="number">1</span>),pbdq(<span class="number">2</span>));</span><br><span class="line"><span class="comment">%干河口</span></span><br><span class="line">pghk=wblfit(ghk);</span><br><span class="line">GHK=wblpdf(<span class="number">1</span>:<span class="number">50</span>,pghk(<span class="number">1</span>),pghk(<span class="number">2</span>));</span><br><span class="line">GHKC=wblcdf(ghk,pghk(<span class="number">1</span>),pghk(<span class="number">2</span>));</span><br><span class="line"><span class="comment">%昌马</span></span><br><span class="line">pcm=wblfit(cm);</span><br><span class="line">CM=wblpdf(<span class="number">1</span>:<span class="number">50</span>,pcm(<span class="number">1</span>),pcm(<span class="number">2</span>));</span><br><span class="line">CMC=wblcdf(cm,pcm(<span class="number">1</span>),pcm(<span class="number">2</span>));</span><br><span class="line">d=&#123;qw,bdq,ghk,cm&#125;;</span><br><span class="line">D=&#123;QW,BDQ,GHK,CM&#125;;</span><br><span class="line">DD=&#123;QWC,BDQC,GHKC,CMC&#125;;</span><br><span class="line">N=&#123;<span class="string">'桥湾'</span>,<span class="string">'北大桥'</span>,<span class="string">'干河口'</span>,<span class="string">'昌马'</span>&#125;;</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>风电场</th>
<th>威布尔参数a</th>
<th>威布尔参数b</th>
</tr>
</thead>
<tbody>
<tr>
<td>桥湾</td>
<td>8.1343</td>
<td>1.8773</td>
</tr>
<tr>
<td>北大桥</td>
<td>8.6619</td>
<td>1.7378</td>
</tr>
<tr>
<td>干河口</td>
<td>8.3685</td>
<td>1.5731</td>
</tr>
<tr>
<td>昌马</td>
<td>9.1261</td>
<td>2.1229</td>
</tr>
</tbody>
</table>
</div>
<h1 id="频率与频数直方图"><a href="#频率与频数直方图" class="headerlink" title="频率与频数直方图"></a>频率与频数直方图</h1><h2 id="频率分布直方图"><a href="#频率分布直方图" class="headerlink" title="频率分布直方图"></a>频率分布直方图</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%桥湾</span></span><br><span class="line">[fqw,qwc]=ecdf(qw);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);</span><br><span class="line">ecdfhist(fqw,qwc,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(QW,<span class="string">'-r'</span>);</span><br><span class="line">title(<span class="string">'桥湾'</span>);</span><br><span class="line">xlabel(<span class="string">'风速'</span>);</span><br><span class="line">ylabel(<span class="string">'f(x)'</span>);</span><br><span class="line"><span class="built_in">hold</span> off</span><br><span class="line"><span class="comment">%北大桥</span></span><br><span class="line">[fbdq,bdqc]=ecdf(bdq);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>);</span><br><span class="line">ecdfhist(fbdq,bdqc,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(BDQ,<span class="string">'-r'</span>);</span><br><span class="line">title(<span class="string">'北大桥'</span>);</span><br><span class="line">xlabel(<span class="string">'风速'</span>);</span><br><span class="line">ylabel(<span class="string">'f(x)'</span>);</span><br><span class="line"><span class="built_in">hold</span> off</span><br><span class="line"><span class="comment">%干河口</span></span><br><span class="line">[fghk,ghkc]=ecdf(ghk);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">3</span>);</span><br><span class="line">ecdfhist(fghk,ghkc,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>(GHK,<span class="string">'-r'</span>);</span><br><span class="line">title(<span class="string">'干河口'</span>);</span><br><span class="line">xlabel(<span class="string">'风速'</span>);</span><br><span class="line">ylabel(<span class="string">'f(x)'</span>);</span><br><span class="line"><span class="built_in">hold</span> off</span><br><span class="line"><span class="comment">%昌马</span></span><br><span class="line">[fcm,cmc]=ecdf(cm);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">4</span>);</span><br><span class="line">ecdfhist(fcm,cmc,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(CM,<span class="string">'-r'</span>);</span><br><span class="line">title(<span class="string">'昌马'</span>);</span><br><span class="line">xlabel(<span class="string">'风速'</span>);</span><br><span class="line">ylabel(<span class="string">'f(x)'</span>);</span><br><span class="line"><span class="built_in">hold</span> off</span><br></pre></td></tr></table></figure>
<p><strong>结果</strong></p>
<p><img src="http://oag5ozkgs.bkt.clouddn.com/4in1_1.jpg" alt="频率分布直方图"></p>
<h2 id="频数分布直方图"><a href="#频数分布直方图" class="headerlink" title="频数分布直方图"></a>频数分布直方图</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="built_in">i</span>+<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">        <span class="built_in">figure</span>;</span><br><span class="line">        hist3([DD&#123;<span class="built_in">i</span>&#125;(:) DD&#123;<span class="built_in">j</span>&#125;(:)],[<span class="number">50</span>,<span class="number">50</span>]);</span><br><span class="line">        xlabel(N&#123;<span class="built_in">i</span>&#125;);</span><br><span class="line">        ylabel(N&#123;<span class="built_in">j</span>&#125;);</span><br><span class="line">        zlabel(<span class="string">'频数'</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><strong>结果</strong></p>
<p><img src="http://oag5ozkgs.bkt.clouddn.com/6in1.jpg" alt="风电场间频数直方图"></p>
<h1 id="各Copula函数"><a href="#各Copula函数" class="headerlink" title="各Copula函数"></a>各Copula函数</h1><h2 id="Copula函数参数估计"><a href="#Copula函数参数估计" class="headerlink" title="Copula函数参数估计"></a>Copula函数参数估计</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">rho_norm = copulafit(<span class="string">'Gaussian'</span>,[U,V]);</span><br><span class="line">[rho_t,nuhat,nuci]=copulafit(<span class="string">'t'</span>,[U,V]);</span><br><span class="line">paramhat_G=copulafit(<span class="string">'Gumbel'</span>,[U,V]);</span><br><span class="line">paramhat_C=copulafit(<span class="string">'Clayton'</span>,[U,V]);</span><br><span class="line">paramhat_F=copulafit(<span class="string">'Frank'</span>,[U,V]);</span><br></pre></td></tr></table></figure>
<p><strong>结果</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>风电场组合</th>
<th>$\rho_{Norm}$</th>
<th>$\rho_t$</th>
<th>$k$</th>
<th>$\theta_G$</th>
<th>$\theta_C$</th>
<th>$\theta_F$</th>
</tr>
</thead>
<tbody>
<tr>
<td>桥湾与北大桥</td>
<td>0.6339</td>
<td>0.6386</td>
<td>9.1619</td>
<td>1.8533</td>
<td>0.6913</td>
<td>5.0402</td>
</tr>
<tr>
<td>桥湾与干河口</td>
<td>0.5346</td>
<td>0.5364</td>
<td>9.7829</td>
<td>1.6350</td>
<td>0.4847</td>
<td>3.8853</td>
</tr>
<tr>
<td>桥湾与昌马</td>
<td>0.6108</td>
<td>0.6169</td>
<td>10.4474</td>
<td>1.7697</td>
<td>0.6530</td>
<td>4.8459</td>
</tr>
<tr>
<td>北大桥与干河口</td>
<td>0.8092</td>
<td>0.8479</td>
<td>2.7192</td>
<td>2.9270</td>
<td>1.4685</td>
<td>9.8959</td>
</tr>
<tr>
<td>北大桥与昌马</td>
<td>0.3639</td>
<td>0.3630</td>
<td>33.9054</td>
<td>1.3098</td>
<td>0.3072</td>
<td>2.3697</td>
</tr>
<tr>
<td>干河口与昌马</td>
<td>0.3028</td>
<td>0.3026</td>
<td>21.9903</td>
<td>1.2628</td>
<td>0.2141</td>
<td>1.9736</td>
</tr>
</tbody>
</table>
</div>
<h2 id="经验Copula"><a href="#经验Copula" class="headerlink" title="经验Copula"></a>经验Copula</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%计算经验分布</span></span><br><span class="line">[fx,xsort]=ecdf(X);</span><br><span class="line">[fy,ysort]=ecdf(Y);</span><br><span class="line"><span class="comment">%调用spine函数利用样条插值计算原始样本点的经验分布函数值</span></span><br><span class="line">UU=spline(xsort(<span class="number">2</span>:<span class="keyword">end</span>),fx(<span class="number">2</span>:<span class="keyword">end</span>),X);</span><br><span class="line">VV=spline(ysort(<span class="number">2</span>:<span class="keyword">end</span>),fy(<span class="number">2</span>:<span class="keyword">end</span>),Y);</span><br><span class="line"><span class="comment">%定义经验Copula函数</span></span><br><span class="line">C=@(u,v)<span class="built_in">mean</span>((UU&lt;=u).*(VV&lt;=v));</span><br><span class="line"></span><br><span class="line">[Udata,Vdata] = <span class="built_in">meshgrid</span>(<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">31</span>));</span><br><span class="line"><span class="comment">%循环计算经验Copula函数值</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">numel</span>(Udata)</span><br><span class="line">    CopulaEmpirical(<span class="built_in">i</span>)=C(Udata(<span class="built_in">i</span>),Vdata(<span class="built_in">i</span>));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>Copula</tag>
        <tag>MATLAB</tag>
        <tag>风力发电</tag>
      </tags>
  </entry>
  <entry>
    <title>Copula风速建模相关（2）——函数性质以及常用代码</title>
    <url>/2017/02/28/2017-02-28-Copula%E9%A3%8E%E9%80%9F%E5%BB%BA%E6%A8%A1%E7%9B%B8%E5%85%B3%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<p><a href="http://xueshu.baidu.com/s?wd=paperuri%3A%28a48beacab57eaa1da8adc7ac58931c9a%29&amp;filter=sc_long_sign&amp;tn=SE_xueshusource_2kduw22v&amp;sc_vurl=http%3A%2F%2Fwww.docin.com%2Fp-204143270.html%3Fref%3D360%26ref%3D360%26ref%3D360&amp;ie=utf-8&amp;sc_us=15886197312218780659" target="_blank" rel="noopener">1</a></p>
<h1 id="二元Copula函数的定义以及性质"><a href="#二元Copula函数的定义以及性质" class="headerlink" title="二元Copula函数的定义以及性质"></a>二元Copula函数的定义以及性质</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义:"></a><strong>定义:</strong></h2><blockquote>
<p>二元Copula函数是指满足以下性质的函数$C(u,v)$:</p>
<ul>
<li>$C(u,v)$ 的定义域为[0,1]x[0,1]；</li>
<li>$C(u,v)$ 有零基面，并且是二维递增的；</li>
<li>对任意$u,v\in [0,1]$，满足$C(u,1)=u，C(1,v)=v$。<br>所谓的有零基面是：至少存在一个$u_0\in[0,1]$ 和一个$v_0\in[0,1]$，使得$C(u_0,v)=0=C(u,v_0)$。<br>二维递增是指：对任意$0\le u_1\le u_2\le1$和$0\le v_1\le v_2\le1$，有<script type="math/tex; mode=display">C(u_2,v_2)-C(u_2,v_1)-C(u_1,v_2)+C(u_1,v_1)\ge 0</script></li>
</ul>
</blockquote>
<a id="more"></a>
<h2 id="性质："><a href="#性质：" class="headerlink" title="性质："></a><strong>性质：</strong></h2><blockquote>
<p>二元Copula函数满足以下性质：</p>
<ul>
<li>$C(u,v)$ 关于每一个变量都是单调非减的</li>
<li>对于任意的$u,v\in[0,1],C(u,0)=C(0,v)=0,C(u,1)=u,C(1,v)=v$</li>
<li>对任意$0\le u_1\le u_2\le1$和$0\le v_1\le v_2\le1$，有<script type="math/tex; mode=display">C(u_2,v_2)-C(u_2,v_1)-C(u_1,v_2)+C(u_1,v_1)\ge 0</script></li>
<li>对任意的$u_1,u_2,v_1,v_2\in[0,1]$，有 $|C(u_2,v_2)-C(u_1,v_1)|\le|u_2-u_1|+|v_2-v_1|$。</li>
<li>对任意$u,v\in[0,1],max(u+v-1,0)\le C(u,v) \le min(u,v)$，令<br>$C^-(u,v)=max(u+v-1,0),C^+(u,v)=min(u,v)$，则称$C^-(u,v)和 C^+(u,v)$ 分别为<strong>Frechet上界和下界</strong></li>
<li>若$U,V$ 独立且同服从 $[0,1]$ 上的均匀分布，则$C(u,v)=uv$。</li>
</ul>
</blockquote>
<h1 id="多元Copula函数的定义及性质"><a href="#多元Copula函数的定义及性质" class="headerlink" title="多元Copula函数的定义及性质"></a>多元Copula函数的定义及性质</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a><strong>定义：</strong></h2><blockquote>
<p>N元Copula函数是指满足以下性质的函数 $C(u_1,u_2,…,u_N)$ ：</p>
<ul>
<li>定义域为 $[0,1]^N$</li>
<li>$C(u_1,u_2,…,u_N)$ 有零基面，并且是N维递增的；</li>
<li>$C(u_1,u_2,…,u_N)$ 有边缘分布函数<script type="math/tex; mode=display">C_i(u_i)=C(1,...,1,u_i,1,...,1)=u_i</script>  其中 $u_i \in <a href="i=1,2,...,N">0,1</a>$ 。</li>
</ul>
</blockquote>
<h2 id="性质：-1"><a href="#性质：-1" class="headerlink" title="性质："></a><strong>性质：</strong></h2><blockquote>
<p>多元Copula函数具备以下性质：</p>
<ul>
<li>$C(u_1,u_2,…,u_N)$ 关于每个变量都是单调非减得</li>
<li>$C(u_1,u_2,…,0,…,u_N)=0,C(1,…,1,u_i,1,…,1)=u_i$ 。</li>
<li>对任意的 $u_i,v_i \in <a href="i=1,2,...,N">0,1</a>$ ，有<script type="math/tex; mode=display">|C(u_1,u_2,...,u_N)|-C(v_1,v_2,...,v_N) \le {\displaystyle \sum _{i=1}^N {|u_i-v_i|}}</script></li>
<li>令 $C^-(u_1,u_2,…u_N)=max({\displaystyle\sum_{i=1}^N{u_i-N+1,0}})$ ，<br>$C^+(u_1,u_2,…,u_N)=min(u_1,u_2,…,u_N)$ ，则对任意的  $u_i\in <a href="i=1,2,...,N">0,1</a>$ ，有<script type="math/tex; mode=display">C^-(u_1,u_2,...u_N)\le C(u_1,u_2,...,u_N)\le C^+(u_1,u_2,...,u_N)</script>  记为 $C^-\prec C\prec C^+$ 。称 $C^-$ 和 $C^+$ 分别为<strong>Frechet</strong>上下界，当 $N\ge 2$ 时，$C^+$ 是一个N元Copula函数，但是当 $N&gt;2$ 时， $C^-$ 并不是一个Copula函数</li>
<li>若 $U_i\sim U(0,1)(i=1,2,…,N)$ 相互独立，则 $C(u_1,u_2,…,u_N)={\displaystyle \prod _{i=1}^N{u_i}}$</li>
</ul>
</blockquote>
<h1 id="MATLAB常用Copula函数"><a href="#MATLAB常用Copula函数" class="headerlink" title="MATLAB常用Copula函数"></a>MATLAB常用Copula函数</h1><h2 id="copulafit"><a href="#copulafit" class="headerlink" title="copulafit"></a><a href="http://cn.mathworks.com/help/stats/copulafit.html?s_tid=srchtitle" target="_blank" rel="noopener">copulafit</a></h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%估计正态Copula中的参数</span></span><br><span class="line"><span class="number">1.</span> RHOHAT=copulafit(<span class="string">'Gaussian'</span>,U)</span><br><span class="line"><span class="comment">%估计t-Copula中的参数</span></span><br><span class="line"><span class="number">2.</span> [RHOHAT,nuhat]=copulafit(<span class="string">'t'</span>,U)</span><br><span class="line"><span class="number">3.</span> [RHOHAT,nuhat,nuci]=copulafit(<span class="string">'t'</span>,U)</span><br><span class="line"><span class="comment">%估计二元阿基米德Copula中的参数（包括Clayton，Frank，Gumbel）</span></span><br><span class="line"><span class="number">4.</span> paramhat=copulafit(family,U)</span><br><span class="line"><span class="number">5.</span> [paramhat,paramci]=copulafit(family,U)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="copulastat"><a href="#copulastat" class="headerlink" title="copulastat"></a><a href="http://cn.mathworks.com/help/stats/copulastat.html" target="_blank" rel="noopener">copulastat</a></h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%计算正态Copula对应的Kendall秩相关系数</span></span><br><span class="line"><span class="number">1.</span> R=copulastat(<span class="string">'Gaussian'</span>,rho)</span><br><span class="line"><span class="comment">%计算t-Copula对应的Kendall秩相关系数</span></span><br><span class="line"><span class="number">2.</span> R=copulastat(<span class="string">'t'</span>,rho,NU)</span><br><span class="line"><span class="comment">%计算二元阿基米德Copula对应的Kendall秩相关系数（family字段可选Clayton，Frank，Gumbel）</span></span><br><span class="line"><span class="number">3.</span> R=copulastat(family,alpha)</span><br><span class="line"><span class="comment">%计算由type参数制定的秩相关系数R可选字段为'Kendall','Spearman'</span></span><br><span class="line"><span class="number">4.</span> R=copulastat(...,<span class="string">'type'</span>,<span class="built_in">type</span>)</span><br></pre></td></tr></table></figure>
<h2 id="copulaparam"><a href="#copulaparam" class="headerlink" title="copulaparam"></a><a href="http://cn.mathworks.com/help/stats/copulaparam.html" target="_blank" rel="noopener">copulaparam</a></h2><p><em>根据秩相关系数求解Copula中的 $\rho$ 或 $\alpha$</em><br><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%计算正态Copula中的线性相关参数ρ</span></span><br><span class="line"><span class="number">1.</span> rho=copulaparam(<span class="string">'Gaussian'</span>,R)</span><br><span class="line"><span class="comment">%计算t-Copula中的线性相关参数ρ</span></span><br><span class="line"><span class="number">2.</span> rho=copulaparam(<span class="string">'t'</span>,R,NU)</span><br><span class="line"><span class="comment">%计算二元阿基米德Copula中的参数α</span></span><br><span class="line"><span class="number">3.</span> alpha=copulaparam(family,R)</span><br><span class="line"><span class="comment">%用type参数指定秩相关系数的类型</span></span><br><span class="line"><span class="number">4.</span> [...]=copulaparam(...,<span class="string">'type'</span>,<span class="built_in">type</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="copulapdf"><a href="#copulapdf" class="headerlink" title="copulapdf"></a><a href="http://cn.mathworks.com/help/stats/copulapdf.html?searchHighlight=copulapdf&amp;s_tid=doc_srchtitle" target="_blank" rel="noopener">copulapdf</a></h2><p><em>用于计算Copula的密度函数值</em><br><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> y = copulapdf(<span class="string">'Gaussian'</span>,u,rho)</span><br><span class="line"><span class="number">2.</span> y = copulapdf(<span class="string">'t'</span>,u,rho,nu)</span><br><span class="line"><span class="number">3.</span> y = copulapdf(family,u,alpha)</span><br></pre></td></tr></table></figure></p>
<h2 id="copulacdf"><a href="#copulacdf" class="headerlink" title="copulacdf"></a><a href="http://cn.mathworks.com/help/stats/copulacdf.html" target="_blank" rel="noopener">copulacdf</a></h2><p><em>用于计算Copula分布函数值</em><br><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> y = copulacdf(<span class="string">'Gaussian'</span>,u,rho)</span><br><span class="line"><span class="number">2.</span> y = copulacdf(<span class="string">'t'</span>,u,rho,nu)</span><br><span class="line"><span class="number">3.</span> y = copulacdf(family,u,alpha)</span><br></pre></td></tr></table></figure><br><strong>PS:双参数威布尔分布常用函数：<a href="http://cn.mathworks.com/help/stats/wblfit.html?searchHighlight=wblfit&amp;s_tid=doc_srchtitle" target="_blank" rel="noopener">wblfit</a>,<a href="http://cn.mathworks.com/help/stats/wblpdf.html?searchHighlight=wblpdf&amp;s_tid=doc_srchtitle" target="_blank" rel="noopener">wblpdf</a>,<a href="http://cn.mathworks.com/help/stats/wblcdf.html?searchHighlight=wblcdf&amp;s_tid=doc_srchtitle" target="_blank" rel="noopener">wblcdf</a></strong></p>
<h1 id="Copula经验分布函数的求取"><a href="#Copula经验分布函数的求取" class="headerlink" title="Copula经验分布函数的求取"></a>Copula经验分布函数的求取</h1><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 调用ecdf函数求X和Y的经验分布函数</span></span><br><span class="line">[fx, Xsort] = ecdf(X);</span><br><span class="line">[fy, Ysort] = ecdf(Y);</span><br><span class="line"><span class="comment">% 调用spline函数，利用样条插值法求原始样本点处的经验分布函数值</span></span><br><span class="line">U = spline(Xsort(<span class="number">2</span>:<span class="keyword">end</span>),fx(<span class="number">2</span>:<span class="keyword">end</span>),X);</span><br><span class="line">V = spline(Ysort(<span class="number">2</span>:<span class="keyword">end</span>),fy(<span class="number">2</span>:<span class="keyword">end</span>),Y);</span><br><span class="line"><span class="comment">% 定义经验Copula函数C(u,v)</span></span><br><span class="line">C = @(u,v)<span class="built_in">mean</span>((U &lt;= u).*(V &lt;= v));</span><br><span class="line"><span class="comment">% 为作图的需要，产生新的网格数据</span></span><br><span class="line">[Udata,Vdata] = <span class="built_in">meshgrid</span>(<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">31</span>));</span><br><span class="line"><span class="comment">% 通过循环计算经验Copula函数在新产生的网格点处的函数值</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">numel</span>(Udata)</span><br><span class="line">    CopulaEmpirical(<span class="built_in">i</span>) = C(Udata(<span class="built_in">i</span>),Vdata(<span class="built_in">i</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;  <span class="comment">% 新建图形窗口</span></span><br><span class="line"><span class="comment">% 绘制经验Copula分布函数图像</span></span><br><span class="line">surf(Udata,Vdata,<span class="built_in">reshape</span>(CopulaEmpirical,<span class="built_in">size</span>(Udata)))</span><br><span class="line">xlabel(<span class="string">'U'</span>);  <span class="comment">% 为X轴加标签</span></span><br><span class="line">ylabel(<span class="string">'V'</span>);  <span class="comment">% 为Y轴加标签</span></span><br><span class="line">zlabel(<span class="string">'Empirical Copula C(u,v)'</span>);  <span class="comment">% 为z轴加标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 通过循环计算经验Copula函数在原始样本点处的函数值</span></span><br><span class="line">CUV = <span class="built_in">zeros</span>(<span class="built_in">size</span>(U(:)));</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">numel</span>(U)</span><br><span class="line">    CUV(<span class="built_in">i</span>) = C(U(<span class="built_in">i</span>),V(<span class="built_in">i</span>));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>Copula</tag>
        <tag>MATLAB</tag>
      </tags>
  </entry>
  <entry>
    <title>Copula风速建模相关（1）——相关参数</title>
    <url>/2017/02/27/2017-02-27-Copula%E9%A3%8E%E9%80%9F%E5%BB%BA%E6%A8%A1%E7%9B%B8%E5%85%B3%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Copula函数的拟合优度校验——与经验Copula函数对比"><a href="#Copula函数的拟合优度校验——与经验Copula函数对比" class="headerlink" title="Copula函数的拟合优度校验——与经验Copula函数对比"></a>Copula函数的拟合优度校验——与经验Copula函数对比</h1><blockquote>
<p><strong>QQ图（Q-QNorm）</strong><br>把数据的分位数与已知分布相比较，从而来判断数据的分布情况。把已知分布的分位数标在纵轴上，样本分位数标在横轴上，从图形上可以了解到分布的信息。图形是直线说明是正态分布。图形中有一段是直线，在两端存在弧度，说明峰度的情况。</p>
<ul>
<li>图形是曲线图，说明不对称。</li>
<li>如果Q-Q图是直线，当该直线成45度角并穿过原点时，说明分布与给定的正态分布完全一样。</li>
<li>如果是成45度角但不穿过原点，说明均值与给定的正态分布不同</li>
<li>如果是直线但不是45度角，说明均值与方差都与给定的分布不同。</li>
<li>如果Q-Q图中间部分是直线，但是右边在直线下面，左边在直线上面，说明分布的峰度大于3，反之说明峰度小于3.<a id="more"></a>
</li>
</ul>
<p><a href="http://m.blog.csdn.net/article/details?id=52794839" target="_blank" rel="noopener"><strong>K-S检验法（Kolmogorov-Smirnov test）</strong></a><br>检验数据是否符合某种分布\<br>Kolmogorov-Smirnov是比较一个频率分布f(x)与理论分布g(x)或者两个观测值分布的检验方法。其原假设H0:两个数据分布一致或者数据符合理论分布。 $D=max| f(x)- g(x)|$ ，当实际观测值D&gt;D(n,α)则拒绝H0，否则则接受H0假设。\<br>KS检验与t-检验之类的其他方法不同是KS检验不需要知道数据的分布情况，可以算是一种非参数检验方法。当然这样方便的代价就是当检验的数据分布符合特定的分布事，KS检验的灵敏度没有相应的检验来的高。在样本量比较小的时候，KS检验最为非参数检验在分析两组数据之间是否不同时相当常用。\<br>PS：t-检验的假设是检验的数据满足正态分布，否则对于小样本不满足正态分布的数据用t-检验就会造成较大的偏差，虽然对于大样本不满足正态分布的数据而言t-检验还是相当精确有效的手段。\<br>本例中使用kstest2函数</p>
</blockquote>
<h1 id="对风电场风速进行处理——双参数威布尔分布"><a href="#对风电场风速进行处理——双参数威布尔分布" class="headerlink" title="对风电场风速进行处理——双参数威布尔分布"></a>对风电场风速进行处理——双参数威布尔分布</h1><p>双参数威布尔函数</p>
<script type="math/tex; mode=display">F_w(x)=1-exp(-({x \over c})^k)</script><p>其概率密度函数为</p>
<script type="math/tex; mode=display">P(x)={k \over c} ({k \over c})^{k-1}exp(-({x \over c})^k)</script><p>式中 $k$ 为形状参数，无量纲； $c$ 为尺度参数，反映风电场的平均风速，单位为 $m/s$ 。</p>
<h1 id="Pearson相关系数"><a href="#Pearson相关系数" class="headerlink" title="Pearson相关系数"></a><a href="http://blog.csdn.net/wsywl/article/details/5727327" target="_blank" rel="noopener">Pearson相关系数</a></h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>皮尔逊相关也称为积差相关（或积矩相关）是英国统计学家皮尔逊于20世纪提出的一种计算直线相关的方法。在本例中主要用于对两组风速曲线的相关性进行表示</p>
<p>假设有两个变量X、Y，那么两变量间的皮尔逊相关系数可通过以下公式计算：</p>
<p>公式一：</p>
<script type="math/tex; mode=display">\rho_{X,Y}={cov(X,Y) \over \sigma_X \sigma_Y}={E((X-\mu_X)(Y-\mu_Y))\over  \sigma_X \sigma_Y}={E(XY)-E(X)E(Y)\over \sqrt{E(X^2)-E^2(X)}\sqrt{E(Y^2)-E^2(Y)}}</script><p>公式二：</p>
<script type="math/tex; mode=display">\rho_{X,Y}={N\sum{XY}-\sum{X} \sum{Y} \over\sqrt{N\sum{X^2}-(\sum{X})^2}\sqrt{N\sum{Y^2}-(\sum{Y})^2}}</script><p>公式三：</p>
<script type="math/tex; mode=display">\rho_{X,Y}={\sum(X-\overline{X})(Y-\overline{Y}) \over\sqrt{\sum(X-\overline{X})^2\sum(Y-\overline{Y})^2}}</script><p>公式四：</p>
<script type="math/tex; mode=display">\rho_{X,Y}={\sum{XY}-{\sum{X}\sum{Y}\over N}\over\sqrt{(\sum{X^2}-{(\sum{X})^2\over N})}\sqrt{(\sum{Y^2}-{(\sum{Y})^2\over N})}}</script><p>以上列出的四个公式等价，其中E是数学期望，cov表示协方差，N表示变量取值的个数。</p>
<h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>当两个变量的标准差都不为零时，相关系数才有定义，皮尔逊相关系数适用于：</p>
<ol>
<li><p>两个变量之间是线性关系，都是连续数据。</p>
</li>
<li><p>两个变量的总体是正态分布，或接近正态的单峰分布。</p>
</li>
<li><p>两个变量的观测值是成对的，每对观测值之间相互独立。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>可再生能源</tag>
        <tag>Copula</tag>
        <tag>双参数威布尔函数</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Copula理论的风电场间建模</title>
    <url>/2017/02/21/2017-02-21-%E5%9F%BA%E4%BA%8ECopula%E7%90%86%E8%AE%BA%E7%9A%84%E9%A3%8E%E7%94%B5%E5%9C%BA%E9%97%B4%E5%BB%BA%E6%A8%A1/</url>
    <content><![CDATA[<h1 id="关于研究目的"><a href="#关于研究目的" class="headerlink" title="关于研究目的"></a>关于研究目的</h1><p>由于风电基地的多个风电场地理位置比较靠近，且基本处于同一风带，风速之间具有较强的相关性，使得多个风电场的总体特性不同于单个风电场的特性。</p>
<p>通过Copula理论进行多个风电场风俗的联合概率分布研究。<br><a id="more"></a></p>
<h1 id="Copula理论"><a href="#Copula理论" class="headerlink" title="Copula理论"></a>Copula理论</h1><h2 id="关于Copula函数"><a href="#关于Copula函数" class="headerlink" title="关于Copula函数"></a>关于Copula函数</h2><p>Copula函数在网络中所能检索到的信息</p>
<blockquote>
<p><strong><a href="http://baike.baidu.com/link?url=qvRvG5X9bS0pqQzhZ7WtPKjmalr9UxgsV8kHdMbNFxPePq4CemrnaHF3c6-9g8Ihdw_9RyfSHJtHnw0uyLeGKCZv2In40VEqDCbmQrvQ5Zk4sbjreZggZCwwgpedrK8j" target="_blank" rel="noopener">Copula函数</a>百度</strong><br>Copula函数描述的是变量间的相关性，实际上是一类将联合分布函数与它们各自的边缘分布函数连接在一起的函数，因此也有人将它称为连接函数。相关理论的提出可以追溯到1959年，SKlar通过定理形式将多元分布与Copula函数联系起来。\<br>20世纪90年代后期相关理论和方法在国外开始得到迅速发展并应用到金融，保险等领域的相关分析，投资组合分析和风险管理等多个方面。\<br>定义:(Nelsen.2006) N 元Copula函数是指具有以下性质的函数（下记为C）：\<br>（1）定义域为[0,1]×[0,1]×。。。×[0,1] （共为N个域相乘）；\<br>（2）C具有零基面（grounded）且是N维递增的；\<br>（3）C的边缘分布Cn，n=1,2,,,,N,满足Cn(xn)=C(1,…,1,xn,1,,,1)=xn，其中xn∈[0,1],n=1,2,,,N \</p>
<p>CopulaWIKI</p>
</blockquote>
<p><a href="http://oag5ozkgs.bkt.clouddn.com/02211106461%E8%80%A6%E5%90%88%28%E6%A6%82%E7%8E%87%29-%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91%EF%BC%8C%E8%87%AA%E7%94%B1%E7%9A%84%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6_1.Png" target="_blank" rel="noopener">1</a><br><a href="http://oag5ozkgs.bkt.clouddn.com/02211106461%E8%80%A6%E5%90%88%28%E6%A6%82%E7%8E%87%29-%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91%EF%BC%8C%E8%87%AA%E7%94%B1%E7%9A%84%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6_2.Png" target="_blank" rel="noopener">2</a><br><a href="http://oag5ozkgs.bkt.clouddn.com/02211106461%E8%80%A6%E5%90%88%28%E6%A6%82%E7%8E%87%29-%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91%EF%BC%8C%E8%87%AA%E7%94%B1%E7%9A%84%E7%99%BE%E7%A7%91%E5%85%A8%E4%B9%A6_3.Png" target="_blank" rel="noopener">3</a></p>
<p><strong>要点：</strong></p>
<ul>
<li>边缘分布与联合分布的概念</li>
<li>关于风速的概率分布问题</li>
</ul>
]]></content>
      <categories>
        <category>毕业设计</category>
      </categories>
      <tags>
        <tag>可再生能源</tag>
        <tag>Copula</tag>
      </tags>
  </entry>
  <entry>
    <title>Java第三次课</title>
    <url>/2016/10/23/2016-10-23-javaclass3/</url>
    <content><![CDATA[<h1 id="GUI设计"><a href="#GUI设计" class="headerlink" title="GUI设计"></a>GUI设计</h1><a id="more"></a>
<h2 id="1-框架"><a href="#1-框架" class="headerlink" title="1. 框架"></a>1. 框架</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> AreaCalculate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by fatel on 2016/5/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleArea</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleArea</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent ae)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-主界面"><a href="#2-主界面" class="headerlink" title="2. 主界面"></a>2. 主界面</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CircleArea ca = <span class="keyword">new</span> CircleArea();</span><br><span class="line">ca.setTitle(<span class="string">"圆面积的计算"</span>);</span><br><span class="line">ca.setBounds(<span class="number">400</span>,<span class="number">300</span>,<span class="number">280</span>,<span class="number">180</span>);</span><br><span class="line">ca.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">ca.setVisible(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>
<h2 id="3-搭建面板"><a href="#3-搭建面板" class="headerlink" title="3. 搭建面板"></a>3. 搭建面板</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JPanel p0 = <span class="keyword">new</span> JPanel();</span><br><span class="line">JPanel p1 = <span class="keyword">new</span> JPanel();</span><br><span class="line">JPanel p2 = <span class="keyword">new</span> JPanel();</span><br><span class="line">JPanel p3 = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">JLabel l0 = <span class="keyword">new</span> JLabel(<span class="string">"圆面积计算系统"</span>, JLabel.CENTER);</span><br><span class="line">JLabel l1 = <span class="keyword">new</span> JLabel(<span class="string">"请输入圆的半径："</span>, JLabel.CENTER);</span><br><span class="line">JLabel l2 = <span class="keyword">new</span> JLabel(<span class="string">"圆的面积是："</span>, JLabel.CENTER);</span><br><span class="line"></span><br><span class="line">JTextField t1 = <span class="keyword">new</span> JTextField(<span class="number">10</span>);</span><br><span class="line">JTextField t2 = <span class="keyword">new</span> JTextField(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">JButton b1 = <span class="keyword">new</span> JButton(<span class="string">"计算"</span>);</span><br><span class="line">JButton b2 = <span class="keyword">new</span> JButton(<span class="string">"清空"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="4-面板布局"><a href="#4-面板布局" class="headerlink" title="4. 面板布局"></a>4. 面板布局</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">p1.setLayout(fl);</span><br><span class="line">p1.setBackground(Color.yellow);</span><br><span class="line">p1.add(l0);</span><br><span class="line"></span><br><span class="line">p2.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>));</span><br><span class="line">p2.setBackground(Color.green);</span><br><span class="line">p2.add(l1);</span><br><span class="line">p2.add(t1);</span><br><span class="line">p2.add(l2);</span><br><span class="line">t2.setEditable(<span class="keyword">false</span>);<span class="comment">//t2不可编辑</span></span><br><span class="line">p2.add(t2);</span><br><span class="line"></span><br><span class="line">p3.setLayout(<span class="keyword">new</span> FlowLayout(FlowLayout.CENTER, <span class="number">5</span>, <span class="number">5</span>));</span><br><span class="line">p3.setBackground(Color.pink);</span><br><span class="line">b1.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">b2.addActionListener(<span class="keyword">this</span>);<span class="comment">//添加监听器</span></span><br><span class="line">p3.add(b1);</span><br><span class="line">p3.add(b2);</span><br><span class="line"></span><br><span class="line">p0.add(<span class="string">"North"</span>, p1);</span><br><span class="line">p0.add(<span class="string">"Center"</span>, p2);</span><br><span class="line">p0.add(<span class="string">"South"</span>, p3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.setContentPane(p0);</span><br></pre></td></tr></table></figure>
<h2 id="5-事件处理"><a href="#5-事件处理" class="headerlink" title="5. 事件处理"></a>5. 事件处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent ae)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ae.getSource()==b1)&#123;</span><br><span class="line">        t2.setText(<span class="string">""</span>+<span class="number">3.1415926</span>*Double.parseDouble(t1.getText())*Double.parseDouble(t1.getText()));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        t1.setText(<span class="string">""</span>);</span><br><span class="line">        t2.setText(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-代码优化"><a href="#6-代码优化" class="headerlink" title="6. 代码优化"></a>6. 代码优化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JPanel []p = <span class="keyword">new</span> JPanel[<span class="number">4</span>];</span><br><span class="line">Color [] c = &#123;Color.red, Color.yellow, Color.green, Color.pink&#125;;</span><br><span class="line">LayoutManager [] lm = &#123; <span class="keyword">new</span> BorderLayout(<span class="number">5</span>,<span class="number">5</span>),</span><br><span class="line">                        <span class="keyword">new</span> FlowLayout(FlowLayout.CENTER, <span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">                        <span class="keyword">new</span> GridLayout(<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>),</span><br><span class="line">                        <span class="keyword">new</span> FlowLayout(FlowLayout.CENTER, <span class="number">5</span>, <span class="number">5</span>)&#125;;</span><br><span class="line">String [] str = &#123;<span class="string">"圆面积计算系统"</span>, <span class="string">"请输入圆的半径："</span>, <span class="string">"圆的面积是："</span>&#125;;</span><br><span class="line"></span><br><span class="line">JLabel [] l = <span class="keyword">new</span> JLabel[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">JTextField [] t = <span class="keyword">new</span> JTextField [<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">String [] str1 = &#123;<span class="string">"计算"</span>, <span class="string">"清空"</span>&#125;;</span><br><span class="line"></span><br><span class="line">JButton [] b = <span class="keyword">new</span> JButton[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CircleArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; p.length;i++)&#123;</span><br><span class="line">        p[i] = <span class="keyword">new</span> JPanel(lm[i]);</span><br><span class="line">        p[i].setBackground(c[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; l.length;i++)&#123;</span><br><span class="line">        l[i] = <span class="keyword">new</span> JLabel(str[i], JLabel.CENTER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; t.length;i++)&#123;</span><br><span class="line">        t[i] = <span class="keyword">new</span> JTextField(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; b.length;i++)&#123;</span><br><span class="line">        b[i] = <span class="keyword">new</span> JButton(str1[i]);</span><br><span class="line">        b[i].addActionListener(<span class="keyword">this</span>);</span><br><span class="line">        p[<span class="number">3</span>].add(b[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p[<span class="number">1</span>].add(l[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    p[<span class="number">2</span>].add(l[<span class="number">1</span>]);</span><br><span class="line">    p[<span class="number">2</span>].add(t[<span class="number">0</span>]);</span><br><span class="line">    p[<span class="number">2</span>].add(l[<span class="number">2</span>]);</span><br><span class="line">    t[<span class="number">1</span>].setEditable(<span class="keyword">false</span>);</span><br><span class="line">    p[<span class="number">2</span>].add(t[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    p[<span class="number">0</span>].add(<span class="string">"North"</span>, p[<span class="number">1</span>]);</span><br><span class="line">    p[<span class="number">0</span>].add(<span class="string">"Center"</span>, p[<span class="number">2</span>]);</span><br><span class="line">    p[<span class="number">0</span>].add(<span class="string">"South"</span>, p[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setContentPane(p[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-异常处理"><a href="#7-异常处理" class="headerlink" title="7. 异常处理"></a>7. 异常处理</h2><h3 id="7-1-throw"><a href="#7-1-throw" class="headerlink" title="7.1 throw"></a>7.1 throw</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent ae)</span> <span class="keyword">throws</span> NumberFormatException</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ae.getSource()==b[<span class="number">0</span>])&#123;</span><br><span class="line">        area=String.format(<span class="string">"%5f"</span>, <span class="number">3.1415926</span>*Double.parseDouble(t[<span class="number">0</span>].getText())*Double.parseDouble(t[<span class="number">0</span>].getText()));</span><br><span class="line">        t[<span class="number">1</span>].setText(area);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        t[<span class="number">0</span>].setText(<span class="string">""</span>);</span><br><span class="line">        t[<span class="number">1</span>].setText(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-2-try-catch"><a href="#7-2-try-catch" class="headerlink" title="7.2 try catch"></a>7.2 try catch</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent ae)</span> <span class="keyword">throws</span> NumberFormatException</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ae.getSource()==b[<span class="number">0</span>])&#123;</span><br><span class="line">            area=String.format(<span class="string">"%5f"</span>, <span class="number">3.1415926</span>*Double.parseDouble(t[<span class="number">0</span>].getText())*Double.parseDouble(t[<span class="number">0</span>].getText()));</span><br><span class="line">            t[<span class="number">1</span>].setText(area);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            t[<span class="number">0</span>].setText(<span class="string">""</span>);</span><br><span class="line">            t[<span class="number">1</span>].setText(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (NumberFormatException nfe)&#123;</span><br><span class="line">        JOptionPane.showMessageDialog(<span class="keyword">null</span>,</span><br><span class="line">                nfe.getMessage(),<span class="string">"异常消息"</span>,JOptionPane.ERROR_MESSAGE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-3-异常类"><a href="#7-3-异常类" class="headerlink" title="7.3 异常类"></a>7.3 异常类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent ae)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ae.getSource() == b[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[<span class="number">0</span>].getText().equals(<span class="string">""</span>))&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">"半径不能为空，请重新输入！！！"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                area = String.format(<span class="string">"%5f"</span>, <span class="number">3.1415926</span> * Double.parseDouble(t[<span class="number">0</span>].getText()) * Double.parseDouble(t[<span class="number">0</span>].getText()));</span><br><span class="line">                t[<span class="number">1</span>].setText(area);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            t[<span class="number">0</span>].setText(<span class="string">""</span>);</span><br><span class="line">            t[<span class="number">1</span>].setText(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MyException me) &#123;</span><br><span class="line">        JOptionPane.showMessageDialog(<span class="keyword">null</span>,</span><br><span class="line">                me.outExceMessage(), <span class="string">"异常消息"</span>, JOptionPane.ERROR_MESSAGE);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (NumberFormatException nfe)&#123;</span><br><span class="line">        JOptionPane.showMessageDialog(<span class="keyword">null</span>,</span><br><span class="line">                <span class="string">"输入不能为非数字，请重新输入"</span>, <span class="string">"异常消息"</span>, JOptionPane.ERROR_MESSAGE);</span><br><span class="line">        t[<span class="number">0</span>].setText(<span class="string">""</span>);</span><br><span class="line">        t[<span class="number">1</span>].setText(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">NumberFormatException</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        str = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">outExceMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//类中类</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java 第二次课</title>
    <url>/2016/10/23/2016-10-23-javaclass2/</url>
    <content><![CDATA[<h1 id="封装继承多态"><a href="#封装继承多态" class="headerlink" title="封装继承多态"></a>封装继承多态</h1><a id="more"></a>
<h2 id="1-父类"><a href="#1-父类" class="headerlink" title="1. 父类"></a>1. 父类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Class_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by fatel on 2016/5/8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String r_id;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> speed;</span><br><span class="line">    <span class="comment">//private double temp;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Robot</span><span class="params">()</span></span>&#123;</span><br><span class="line">        r_id = JOptionPane.showInputDialog(<span class="keyword">null</span>,</span><br><span class="line">                <span class="string">"r_id = "</span>,</span><br><span class="line">                <span class="string">"请输入ID"</span>,</span><br><span class="line">                JOptionPane.QUESTION_MESSAGE</span><br><span class="line">        );</span><br><span class="line">        speed = Integer.parseInt( JOptionPane.showInputDialog(<span class="keyword">null</span>,</span><br><span class="line">                <span class="string">"speed = "</span>,</span><br><span class="line">                <span class="string">"请输入速度"</span>,</span><br><span class="line">                JOptionPane.QUESTION_MESSAGE</span><br><span class="line">        ));</span><br><span class="line">        <span class="comment">/*temp = Double.parseDouble(JOptionPane.showInputDialog(null,</span></span><br><span class="line"><span class="comment">                "temp = ",</span></span><br><span class="line"><span class="comment">                "请输入温度",</span></span><br><span class="line"><span class="comment">                JOptionPane.QUESTION_MESSAGE</span></span><br><span class="line"><span class="comment">        ));*/</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">judge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (speed&gt;<span class="number">120</span>)&#123;</span><br><span class="line">            speed = <span class="number">115</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"您超速了"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//speed = 40;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"您的速度正常"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JOptionPane.showMessageDialog(<span class="keyword">null</span>,<span class="comment">//父容器</span></span><br><span class="line">                <span class="string">"r_id = "</span>+r_id+<span class="string">"\n"</span>+<span class="string">"speed = "</span>+speed +<span class="string">"\n"</span> <span class="comment">/*+ "temp = "+temp+"\n"*/</span>+ judge() + <span class="string">"\n"</span>,</span><br><span class="line">                <span class="string">"机器人信息"</span>,</span><br><span class="line">                JOptionPane.INFORMATION_MESSAGE</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-子类"><a href="#2-子类" class="headerlink" title="2. 子类"></a>2. 子类</h2><h3 id="2-1-子类1（WarRobot）"><a href="#2-1-子类1（WarRobot）" class="headerlink" title="2.1 子类1（WarRobot）"></a>2.1 子类1（WarRobot）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Class_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by fatel on 2016/5/8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">WarRobot</span> <span class="keyword">extends</span> <span class="title">Robot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> weapon_count;</span><br><span class="line">    <span class="comment">//private String r_id;</span></span><br><span class="line">    <span class="comment">//private int speed;</span></span><br><span class="line">    <span class="comment">//private double temp;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WarRobot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        weapon_count = Integer.parseInt(JOptionPane.showInputDialog(<span class="keyword">null</span>,</span><br><span class="line">                <span class="string">"weapon_count = "</span>,</span><br><span class="line">                <span class="string">"请输入武器数量"</span>,</span><br><span class="line">                JOptionPane.QUESTION_MESSAGE</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">judge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (weapon_count &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            speed = <span class="number">200</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"您是战神"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//speed = 40;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"您是菜鸟"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JOptionPane.showMessageDialog(<span class="keyword">null</span>,<span class="comment">//父容器</span></span><br><span class="line">                <span class="string">"r_id = "</span> + r_id + <span class="string">"\n"</span> + <span class="string">"speed = "</span> + speed + <span class="string">"\n"</span> + <span class="string">"weapon_count = "</span> + weapon_count + <span class="string">"\n"</span> + judge() + <span class="string">"\n"</span>,</span><br><span class="line">                <span class="string">"战斗机器人信息"</span>,</span><br><span class="line">                JOptionPane.INFORMATION_MESSAGE</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-子类2（HomeRobot）"><a href="#2-2-子类2（HomeRobot）" class="headerlink" title="2.2 子类2（HomeRobot）"></a>2.2 子类2（HomeRobot）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Class_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by fatel on 2016/5/8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">HomeRobot</span> <span class="keyword">extends</span> <span class="title">Robot</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> skill_count;</span><br><span class="line">    <span class="comment">//protected String r_id;</span></span><br><span class="line">    <span class="comment">//protected int speed;</span></span><br><span class="line">    <span class="comment">//private double temp;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeRobot</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        skill_count = Integer.parseInt(JOptionPane.showInputDialog(<span class="keyword">null</span>,</span><br><span class="line">                <span class="string">"skill_count = "</span>,</span><br><span class="line">                <span class="string">"请输入技能数"</span>,</span><br><span class="line">                JOptionPane.QUESTION_MESSAGE</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">judge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (skill_count&gt;<span class="number">5</span>)&#123;</span><br><span class="line">           <span class="comment">// speed = 115;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"你是家务大师"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//speed = 40;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"您是家务菜鸟"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.output();</span><br><span class="line">        JOptionPane.showMessageDialog(<span class="keyword">null</span>,<span class="comment">//父容器</span></span><br><span class="line">                <span class="string">"skill_count = "</span>+skill_count+<span class="string">"\n"</span>+ judge() + <span class="string">"\n"</span>,</span><br><span class="line">                <span class="string">"机器人信息"</span>,</span><br><span class="line">                JOptionPane.INFORMATION_MESSAGE</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-UML类图"><a href="#2-3-UML类图" class="headerlink" title="2.3 UML类图"></a>2.3 UML类图</h3><p><img src="https://github.com/fatelancer/robot_class/blob/master/src/Class_1/uml.png" alt=""></p>
<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><h2 id="1-父类抽象类"><a href="#1-父类抽象类" class="headerlink" title="1. 父类抽象类"></a>1. 父类抽象类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Class_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by fatel on 2016/5/8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Robot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String r_id;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> speed;</span><br><span class="line">    <span class="comment">//private double temp;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Robot</span><span class="params">()</span></span>&#123;</span><br><span class="line">        r_id = JOptionPane.showInputDialog(<span class="keyword">null</span>,</span><br><span class="line">                <span class="string">"r_id = "</span>,</span><br><span class="line">                <span class="string">"请输入ID"</span>,</span><br><span class="line">                JOptionPane.QUESTION_MESSAGE</span><br><span class="line">        );</span><br><span class="line">        speed = Integer.parseInt( JOptionPane.showInputDialog(<span class="keyword">null</span>,</span><br><span class="line">                <span class="string">"speed = "</span>,</span><br><span class="line">                <span class="string">"请输入速度"</span>,</span><br><span class="line">                JOptionPane.QUESTION_MESSAGE</span><br><span class="line">        ));</span><br><span class="line">        <span class="comment">/*temp = Double.parseDouble(JOptionPane.showInputDialog(null,</span></span><br><span class="line"><span class="comment">                "temp = ",</span></span><br><span class="line"><span class="comment">                "请输入温度",</span></span><br><span class="line"><span class="comment">                JOptionPane.QUESTION_MESSAGE</span></span><br><span class="line"><span class="comment">        ));*/</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">judge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (speed&gt;<span class="number">120</span>)&#123;</span><br><span class="line">            speed = <span class="number">115</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"您超速了"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//speed = 40;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"您的速度正常"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JOptionPane.showMessageDialog(<span class="keyword">null</span>,<span class="comment">//父容器</span></span><br><span class="line">                <span class="string">"r_id = "</span>+r_id+<span class="string">"\n"</span>+<span class="string">"speed = "</span>+speed +<span class="string">"\n"</span> <span class="comment">/*+ "temp = "+temp+"\n"*/</span>+ judge() + <span class="string">"\n"</span>,</span><br><span class="line">                <span class="string">"机器人信息"</span>,</span><br><span class="line">                JOptionPane.INFORMATION_MESSAGE</span><br><span class="line">        );</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">abstract</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-子类-1"><a href="#2-子类-1" class="headerlink" title="2.子类"></a>2.子类</h2><h3 id="2-1-子类1"><a href="#2-1-子类1" class="headerlink" title="2.1 子类1"></a>2.1 子类1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Class_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by fatel on 2016/5/8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">WarRobot</span> <span class="keyword">extends</span> <span class="title">Robot</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> weapon_count;</span><br><span class="line">    <span class="comment">//private String r_id;</span></span><br><span class="line">    <span class="comment">//private int speed;</span></span><br><span class="line">    <span class="comment">//private double temp;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WarRobot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        weapon_count = Integer.parseInt(JOptionPane.showInputDialog(<span class="keyword">null</span>,</span><br><span class="line">                <span class="string">"weapon_count = "</span>,</span><br><span class="line">                <span class="string">"请输入武器数量"</span>,</span><br><span class="line">                JOptionPane.QUESTION_MESSAGE</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">judge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (weapon_count &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            speed = <span class="number">200</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"您是战神"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//speed = 40;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"您是菜鸟"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JOptionPane.showMessageDialog(<span class="keyword">null</span>,<span class="comment">//父容器</span></span><br><span class="line">                <span class="string">"r_id = "</span> + r_id + <span class="string">"\n"</span> + <span class="string">"speed = "</span> + speed + <span class="string">"\n"</span> + <span class="string">"weapon_count = "</span> + weapon_count + <span class="string">"\n"</span> + judge() + <span class="string">"\n"</span>,</span><br><span class="line">                <span class="string">"战斗机器人信息"</span>,</span><br><span class="line">                JOptionPane.INFORMATION_MESSAGE</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"我像风一样的奔跑"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-子类2（HomeRobot）-1"><a href="#2-2-子类2（HomeRobot）-1" class="headerlink" title="2.2 子类2（HomeRobot）"></a>2.2 子类2（HomeRobot）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Class_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by fatel on 2016/5/8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">HomeRobot</span> <span class="keyword">extends</span> <span class="title">Robot</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> skill_count;</span><br><span class="line">    <span class="comment">//protected String r_id;</span></span><br><span class="line">    <span class="comment">//protected int speed;</span></span><br><span class="line">    <span class="comment">//private double temp;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeRobot</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        skill_count = Integer.parseInt(JOptionPane.showInputDialog(<span class="keyword">null</span>,</span><br><span class="line">                <span class="string">"skill_count = "</span>,</span><br><span class="line">                <span class="string">"请输入技能数"</span>,</span><br><span class="line">                JOptionPane.QUESTION_MESSAGE</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">judge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (skill_count&gt;<span class="number">5</span>)&#123;</span><br><span class="line">           <span class="comment">// speed = 115;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"你是家务大师"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//speed = 40;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"您是家务菜鸟"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.output();</span><br><span class="line">        JOptionPane.showMessageDialog(<span class="keyword">null</span>,<span class="comment">//父容器</span></span><br><span class="line">                <span class="string">"skill_count = "</span>+skill_count+<span class="string">"\n"</span>+ judge() + <span class="string">"\n"</span>,</span><br><span class="line">                <span class="string">"机器人信息"</span>,</span><br><span class="line">                JOptionPane.INFORMATION_MESSAGE</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"我像仙女一样在飘"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-运行程序"><a href="#3-运行程序" class="headerlink" title="3. 运行程序"></a>3. 运行程序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Class_1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by fatel on 2016/5/8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainProg</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span></span>&#123;<span class="comment">// 命令行运行输入的参数</span></span><br><span class="line">        Robot r1;<span class="comment">//为超类Robot新建一个引用</span></span><br><span class="line"></span><br><span class="line">        WarRobot wr = <span class="keyword">new</span> WarRobot();</span><br><span class="line">        wr.output();</span><br><span class="line"></span><br><span class="line">        HomeRobot hr = <span class="keyword">new</span> HomeRobot();</span><br><span class="line">        hr.output();</span><br><span class="line">		<span class="comment">//将超类Robot的引用r1指向子类WarRobot的对象wr</span></span><br><span class="line">		r1 = wr;</span><br><span class="line">		r1.run();</span><br><span class="line"></span><br><span class="line">		r1 = hr;</span><br><span class="line">		r1.run();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//Robot r1 = new WarRobot();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="1-接口"><a href="#1-接口" class="headerlink" title="1. 接口"></a>1. 接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Program;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Robot</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> SPEED=<span class="number">100</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Program;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MusicRobot</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> PLAY_KINDS=<span class="number">10</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Program;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WarRobot</span> <span class="keyword">extends</span> <span class="title">Robot</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> WEAPON_COUNT=<span class="number">15</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">war</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Program;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HomeRobot</span> <span class="keyword">extends</span> <span class="title">Robot</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> SKILL_COUNT=<span class="number">8</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-子类-2"><a href="#2-子类-2" class="headerlink" title="2. 子类"></a>2. 子类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Program;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperRobot</span> <span class="keyword">implements</span> <span class="title">HomeRobot</span>,<span class="title">WarRobot</span>,<span class="title">MusicRobot</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String id;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> SuperAbility;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SuperRobot</span><span class="params">(String i,<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">		id=i;</span><br><span class="line">		SuperAbility=s;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">judge</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (SuperAbility&gt;<span class="number">120</span>)&#123;</span><br><span class="line">			System.out.println(<span class="string">"您太厉害了"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"您还需要继续修炼"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">"I can cook!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">"I can walk!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">war</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">"I can war!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">"I can play instruments!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"id="</span>+id+<span class="string">"\nSuperAbility="</span>+SuperAbility);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-执行程序"><a href="#3-执行程序" class="headerlink" title="3. 执行程序"></a>3. 执行程序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Program;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainProgram</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		SuperRobot r=<span class="keyword">new</span> SuperRobot(<span class="string">"r001"</span>,<span class="number">10</span>);</span><br><span class="line">		r.judge();</span><br><span class="line">		r.walk();</span><br><span class="line">		r.war();</span><br><span class="line">		r.cook();</span><br><span class="line">		r.play();</span><br><span class="line">		r.output();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-UML图"><a href="#4-UML图" class="headerlink" title="4. UML图"></a>4. UML图</h2><p><img src="https://github.com/fatelancer/robot_class/blob/master/src/Program/diagram.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java第四次课</title>
    <url>/2016/10/23/2016-10-23-javaclass4/</url>
    <content><![CDATA[<h2 id="1-基础面板搭建"><a href="#1-基础面板搭建" class="headerlink" title="1. 基础面板搭建"></a>1. 基础面板搭建</h2><a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mygame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by fatel on 2016/5/28.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CartoonApp</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CartoonApp</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CartoonPaint</span> <span class="keyword">extends</span> <span class="title">JPanel</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        CartoonApp ca = <span class="keyword">new</span> CartoonApp();</span><br><span class="line">        ca.setTitle(<span class="string">"我的第一个动画程序"</span>);</span><br><span class="line">        ca.setBounds(<span class="number">300</span>,<span class="number">200</span>,<span class="number">400</span>,<span class="number">450</span>);</span><br><span class="line">        ca.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        ca.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-变量定义"><a href="#2-变量定义" class="headerlink" title="2. 变量定义"></a>2. 变量定义</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JPanel [] pnl = &#123;<span class="keyword">new</span> JPanel(<span class="keyword">new</span> BorderLayout()),</span><br><span class="line">                    <span class="keyword">new</span> JPanel(<span class="keyword">new</span> FlowLayout()),</span><br><span class="line">                    <span class="keyword">new</span> JPanel(<span class="keyword">new</span> BorderLayout()),</span><br><span class="line">                    <span class="keyword">new</span> JPanel(<span class="keyword">new</span> FlowLayout())&#125;;</span><br><span class="line">    String [] str = &#123;<span class="string">"North"</span>, <span class="string">"Center"</span>, <span class="string">"South"</span>&#125;;</span><br><span class="line">    JLabel lblTitle = <span class="keyword">new</span> JLabel(<span class="string">"我的第一个动画程序"</span>);</span><br><span class="line">    JButton [] btn = &#123;<span class="keyword">new</span> JButton(<span class="string">"start"</span>), <span class="keyword">new</span> JButton(<span class="string">"pause"</span>),</span><br><span class="line">                        <span class="keyword">new</span> JButton(<span class="string">"resume"</span>), <span class="keyword">new</span> JButton(<span class="string">"exit"</span>)&#125;;</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    Random rnd = <span class="keyword">new</span> Random();</span><br><span class="line">    Color [] c = &#123;Color.red, Color.green, Color.blue,Color.pink, Color.yellow&#125;;</span><br><span class="line">    CartoonPaint cp = <span class="keyword">new</span> CartoonPaint();</span><br></pre></td></tr></table></figure>
<h2 id="3-基本图形绘制"><a href="#3-基本图形绘制" class="headerlink" title="3.基本图形绘制"></a>3.基本图形绘制</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CartoonPaint</span> <span class="keyword">extends</span> <span class="title">JPanel</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paintComponent</span><span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">            g.setColor(c[<span class="number">0</span>]);</span><br><span class="line">            g.drawOval(<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">            g.fillOval(<span class="number">120</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">            g.drawRect(<span class="number">230</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">            g.fillRect(<span class="number">340</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">int</span> [] x1 = &#123;<span class="number">100</span>, <span class="number">50</span>,<span class="number">150</span>&#125;;</span><br><span class="line">            <span class="keyword">int</span> [] y1 = &#123;<span class="number">50</span>,<span class="number">150</span>, <span class="number">150</span>&#125;;</span><br><span class="line">            g.drawPolygon(<span class="keyword">new</span> Polygon(x1,y1,x1.length));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-异常"><a href="#4-异常" class="headerlink" title="4. 异常"></a>4. 异常</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent ae)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ae.getSource()==btn[<span class="number">0</span>])&#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ae.getSource()==btn[<span class="number">1</span>])&#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ae.getSource()==btn[<span class="number">2</span>])&#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ae.getSource()==btn[<span class="number">3</span>])&#123;</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">        JOptionPane.showMessageDialog(<span class="keyword">null</span>,ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>可延迟负荷控制</title>
    <url>/2016/07/06/2016-07-06-%E5%8F%AF%E5%BB%B6%E8%BF%9F%E8%B4%9F%E8%8D%B7%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Notes-of-Real-time-deferrable-load-control-handling-the-uncertainties-of-renewable-generation"><a href="#Notes-of-Real-time-deferrable-load-control-handling-the-uncertainties-of-renewable-generation" class="headerlink" title="Notes of Real-time deferrable load control: handling the uncertainties of renewable generation"></a>Notes of <a href="http://conferences.sigcomm.org/eenergy/2013/papers/p10.pdf" target="_blank" rel="noopener">Real-time deferrable load control: handling the uncertainties of renewable generation</a></h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li>趋势：传统的煤炭、核能等发电能源逐渐被可再生能源所取代</li>
<li>可再生能源的不规律、不可预测性给控制带来了很多麻烦</li>
<li>需求响应：引导用户的动态电力负载需求管理与电力供应情况相匹配，可以弥补可再生能源的不确定性造成的影响</li>
<li><a href="http://fatelancer.top/2016/07/05/flexibility/#more" target="_blank" rel="noopener">deferrable load</a>：可以推迟一段时间再执行，可以通过推迟负荷时间来与可再生能源的供给匹配</li>
<li>要点：分散式直接负荷控制<a id="more"></a>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li>
</ul>
<p>提供了一个考虑未来时间段的负载与可再生能源状态预测的实时分布式可延迟负载控制算法</p>
<h1 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h1><p>给可延迟负载排了时间表</p>
<p>一个有限时间域里的离散时间模型（一天，十分钟为间隔）</p>
<h2 id="可再生能源与非可延迟负载"><a href="#可再生能源与非可延迟负载" class="headerlink" title="可再生能源与非可延迟负载"></a>可再生能源与非可延迟负载</h2><p>非可延时负载在低聚程度上很难有效预测<br>将可再生能源发电机与非可延时类负载聚合到一个进程——基础负载<br>是非可延迟负载与可再生能源之间的误差<br><strong>滤波器？</strong></p>
]]></content>
      <categories>
        <category>电气工程</category>
      </categories>
      <tags>
        <tag>柔性建模</tag>
        <tag>deferrable load</tag>
        <tag>需求响应</tag>
        <tag>可再生能源</tag>
        <tag>real-time</tag>
      </tags>
  </entry>
  <entry>
    <title>关于柔性建模</title>
    <url>/2016/07/05/2016-07-05-flexibility/</url>
    <content><![CDATA[<h1 id="智能电网柔性成分运行建模方法研究"><a href="#智能电网柔性成分运行建模方法研究" class="headerlink" title="智能电网柔性成分运行建模方法研究"></a>智能电网柔性成分运行建模方法研究</h1><p>研究可调负荷和储能的运行特性，并建立其运行模型；研究柔性成分与可再生能源联合运行方式；仿真模拟可调负荷和储能运行的减排效果，验证所建模型有效性。<br><a id="more"></a></p>
<ul>
<li>存在大量的DER（分布式能源），其潜在的供需调节能力尚未被完全开发和利用：<ul>
<li>电――化学类：钠硫电站、电动汽车、充换电站、气电转换。</li>
<li>电――热转换类: 空调、地暖、电热水器、蓄热、蓄冷、蓄冰等，调节特性受热力/耗散方程的约束。</li>
<li>纯电类需求响应：通过工作时间的调整响应电力波动，实现供需两侧之间的缓冲调节功能（类储能功能）。e.g:洗衣机、洗碗机、etc.</li>
</ul>
</li>
<li>基本描述：参与方申报可承受功率曲线范围、服务的最早开始时间和能量水平、最晚结束（完成）时间和能量水平、可承受价格范围、最大可中断次数等。云服务器端进行在线优化、实时结算和价格发布。</li>
<li>实现虚拟储能网的关键技术――1、设备间的统一通讯标准和规约、即插即识别即用、智能家居；2、电力传输网络的建模，阻塞与网损管理；3、有效的电价信号、激励机制和商业模式；4、对设备和其拥有者信息的有效保护。</li>
<li>研究内容：1、DER的统一建模；2、电力传输网络的建模；3、信息安全；4、电价设计；5、实施效果的检验与仿真；6、现场测试。</li>
<li>项目成效及应用前景：1、调峰效果；2、延缓输配电系统投资的效果（线路、变压器、线路）；3、运行效益（网损、运维、检修灵活性）；4、促进随机间歇性可再生能源消纳与碳减排效果；5、社会效益。</li>
</ul>
]]></content>
      <categories>
        <category>电气工程</category>
      </categories>
      <tags>
        <tag>柔性建模</tag>
        <tag>配电网</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>notes</title>
    <url>/2016/07/05/notes/</url>
    <content><![CDATA[<p> Notes about <a href="http://ieor.berkeley.edu/~oren/pubs/No113.pdf" target="_blank" rel="noopener">Large-scale integration of deferrable demand and renewable energy sources</a></p>
<h1 id="ABSTRACT"><a href="#ABSTRACT" class="headerlink" title="ABSTRACT"></a>ABSTRACT</h1><blockquote>
<ul>
<li><a href="http://s3.amazonaws.com/academia.edu.documents/42998787/A_Stochastic_Unit-commitment_Model_for_t20160223-1673-5tjopb.pdf?AWSAccessKeyId=AKIAJ56TQJRTWSMTNPEA&amp;Expires=1467280071&amp;Signature=12zFdv9seJSAEfV1OBP2emAFj9I%3D&amp;response-content-disposition=inline%3B%20filename%3DA_stochastic_unit-commitment_model_for_t.pdf" target="_blank" rel="noopener">stochastic unit commitment model</a> 随机机组组合模型  <strong>？</strong></li>
<li>[ ]deferrable demand in power system 电力系统中的可暂缓需求<strong>（可调性需求？）</strong></li>
<li>[x]reserve requirements 储能需求</li>
<li>[ ]the benefits of demand flexibility 需求弹性收益 <strong>？</strong></li>
<li><p>[x]three demand response paradigms 三个需求响应的样例</p>
<blockquote>
<ul>
<li>[ ]the centralized co-optimization of generation 发电的集中联合优化 <strong>？</strong></li>
<li>[x]demand by the system operator, demand bids 来自于系统操作人员和订单的需求</li>
<li>[ ]the coupling of renewable resources with deferrable loads 可再生能源与可调性负载的耦合 <strong>？</strong></li>
</ul>
</blockquote>
</li>
<li><p>[ ]motivate coupling as an alternative for overcoming the drawbacks of the two alternative demand response options 将耦合作为克服另外两个需求响应缺点的替代选项</p>
</li>
<li>[x]a dynamic programming algorithm for coordinating deferrable demand with renewable supply 一个用于协调可调性需求与可再生能源供给的动态算法</li>
<li>[ ]simulation results for a model of the <a href="https://www.wecc.biz/Pages/home.aspx" target="_blank" rel="noopener">Western Electricity Coordinating Council</a> 关于<a href="https://en.wikipedia.org/wiki/Western_Electricity_Coordinating_Council" target="_blank" rel="noopener">西部电力协调理事会</a>的模型仿真结果</li>
<li>[ ]load management 负载管理</li>
<li>[ ]power generation scheduling 电力发电规划</li>
<li>[ ]wind power generation 风力发电</li>
</ul>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="INTRODUCTION"><a href="#INTRODUCTION" class="headerlink" title="INTRODUCTION"></a>INTRODUCTION</h1><blockquote>
<ul>
<li>high variability, unpredictable fluctuation, a limited control of output<br>与传统发电方式相比，可再生能源的关键缺陷在于它的高变化性，波动不可预测和输出仅在有限范围内可控</li>
<li>demand response<br>需求响应对于大规模的可再生能源是很有好处的</li>
<li>represent the balancing operations of the remaining grid by using a unit commitment model<br>用一个机组组合模型来表示当前电网的平衡措施来评估可再生能源与需求响应的影响</li>
<li>doesn’t model the deferrable nature of various of various demand response or account for the uncertainty that is introduced by the large-scale integration of renewable resources<br>以往这个领域的研究没有就变化的需求响应的可调性特征建模，也没有考虑由大规模可再生能源导致的不确定性</li>
<li>economic dispatch model<br>经济调度模型</li>
<li>explore the direct coupling of deferrable consumers with renewable resources into a virtual resource through a contractual agreement based on a strike price that limits the impact of the coupled system on the rest of the network<br>探索了在限制耦合系统对于网络其他部分的影响的成交价下将可调性负载与可再生能源直接耦合接入虚拟。。。（不是很懂）</li>
</ul>
</blockquote>
<h2 id="Literature-Review"><a href="#Literature-Review" class="headerlink" title="Literature Review"></a>Literature Review</h2><blockquote>
<ul>
<li>high investment cost of backup reserves<br>后备储能设施的投入来保证系统的可靠操作</li>
<li>quantifying reserve requirements as well as the impacts of renewable integration on operating costs<br>定量储藏要求和可再生能源对于运行损耗的影响</li>
<li>impact of renewable supply uncertainty on power system operations (focus)<br>可再生能源供应的不确定性对电力系统操作的影响</li>
<li>the potential benefits of demand response integration<br>一体化需求响应的潜在好处 <strong>？</strong></li>
<li>demand function<br>需求函数</li>
<li>However, many flexible consumption tasks are best characterized as deferrable, in the sense that consumers need a certain amount of energy within a certain time window. As such, deferrable demand behaves much like a hydro or storage resource from the view point of the system operator. Electric vehicle charging, agricultural pumping, pre-cooling, and residential consumption such as laundry fit this characterization.<br><strong>为什么更像一个水电或者储存？农业泵，洗衣机为什么相似？</strong></li>
<li>real-time pricing at the retail level<br>需要实时电价</li>
<li>volatility of wholesale electricity prices<br>批发电价的波动性</li>
<li>the <a href="https://en.wikipedia.org/wiki/Non-convexity_(economics" target="_blank" rel="noopener">non-convex</a>) costs of system operations<br>实时电价由于系统运行中的非凸成本（有绝对的需求时）不能表达出需求响应的经济价值      <strong>为什么是非凸的？</strong></li>
<li>excessive startup and minimum load costs<br>上述问题会导致过多的启动和最小负载成本</li>
<li>the system operator dispatches the system at a bulk scale and cannot control individual retail loads<br>只能在大规模上，不能分布式</li>
<li>concerns about defining market products that correspond to the types of services that loads can actually offer, which raises the need for reform in existing electricity markets<br>需要对现有市场进行改革</li>
</ul>
</blockquote>
<h2 id="Paper-Contributions"><a href="#Paper-Contributions" class="headerlink" title="Paper Contributions"></a>Paper Contributions</h2><blockquote>
<ul>
<li><strong>a stochastic unit commitment model that can be used in order to quantify the benefits of deferrable demand in mitigating the increased operating costs and day-ahead reserve requirements resulting from the random fluctuation of renewable energy supply</strong><br>一个可以用来量化可延缓需求在减少增长的运行损耗和由于可再生能源的随机波动导致的提前一天的存储需求</li>
<li>The use of stochastic planning models for simulating long-term market equilibrium in order to quantify generation investment in the face of long-term uncertainty<br>用随机规划模型来模拟长期市场均衡以用来量化面对长期不确定性情况下的发电投资</li>
<li>used in order to simulate the two-stage operation of day-ahead and real-time electricity markets<br>用来模拟提前一天的二阶操作和实时的电力市场</li>
<li>computational challenges</li>
<li>using an appropriate scenario selection technique to discretize the uncertainty space of the <a href="http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=4806110" target="_blank" rel="noopener">problem</a></li>
<li><strong>extend existing models by simultaneously modeling the inter-temporal dependency of deferrable demand and renewable supply uncertainty</strong><br>跨时间段的依赖关系和可再生能源供给的随机性</li>
<li>present a contractual alternative for coupling the operations of renewable resources with deferrable demand that attempts to overcome the implementation barriers associated with centralized load dispatch and real-time pricing of retail loads, and compare the relative performance of each demand response paradigm in terms of system operating costs<br>展现了一个（（具备试图克服执行障碍和集中负载调度的可调需求的可再生资源的操作）与（基于零售负载的实时电价的耦合））的基于合同的替代选项，并且比较了在系统运行损耗中各个不同的需求响应模式的表现</li>
</ul>
</blockquote>
<hr>
<h1 id="MODEL-OVERVIEW"><a href="#MODEL-OVERVIEW" class="headerlink" title="MODEL OVERVIEW"></a>MODEL OVERVIEW</h1><blockquote>
<ul>
<li>Uncertainty in the model is driven by renewable supply and demand.</li>
<li>Demand resources in the system are categorized as inflexible (firm) consumers with stochastic consumption patterns and deferrable consumers that require a fixed amount of energy within the day and adapt their instantaneous consumption patterns to the prevailing system conditions.<br>把需求分为了两类，一类是固定用户，消耗模式随机，另一类是可调用户，需求固定，消耗模式适配到系统即时状态</li>
<li>The decision support module in the upper portion of the figure simulates day-ahead market operations and is used for determining day-ahead reserve requirements when deferrable demand contributes to absorbing the variability of renewable energy supply</li>
<li>The evaluation module in the lower portion of the figure uses the reserves committed by the day-ahead model in order to compare the real-time operating costs of the system under the three demand response paradigms that are discussed in the introduction of the paper.</li>
</ul>
</blockquote>
<h2 id="Statistical-Models"><a href="#Statistical-Models" class="headerlink" title="Statistical Models"></a>Statistical Models</h2><blockquote>
<ul>
<li>We use a second order autoregressive model for modeling demand and load.<br><a href="http://baike.baidu.com/link?url=0DvVl_b1tAPmWB1whlIPgAen-oIVPTw8beF-jQWMYxU5ajNrdJ_5a5x67zbcw3XoMMPr6oWcc_I-AKD76T-Ev_" target="_blank" rel="noopener">二阶自回归模型</a>用来模拟需求和负载</li>
<li>固定需求与可再生能源产出是相互独立的（assumption）</li>
<li>employ a data set published by NREL which provides time series of wind speed at various geographic locations over a year</li>
<li><a href="https://en.wikipedia.org/wiki/Walker_circulation#Yule-Walker_equations" target="_blank" rel="noopener">Yule-Walker equations</a><br><img src="./1467355871705.png" alt="Probability distribution function of inflexible demand.|center|500x0"><br>Probability distribution function of inflexible demand</li>
<li>In the present analysis we use a single-area wind model and ignore transmission constraints in order to focus on the impact of demand response.<br>在现在的分析中，我们使用了单个区域的风力模型并且为了集中于需求响应忽略了传递约束 （没做多个区域和考虑传递约束的）</li>
<li>The problem of balancing the schedules of coupled resources with the rest of the system while respecting transmission constraints would be addressed by the system operator and would be reflected in locational marginal prices from the point of view of aggregators.<br>在考虑传递约束的情况下，平衡耦合资源规划与系统其他部分的问题会有系统操作员来解决，并且从聚合的角度来看 <strong>？</strong>，这个结果会反映在节点边际电价上</li>
<li>the aggregator can hedge by buying financial transmission rights<br><strong>？</strong> 购买输电权。。对冲</li>
</ul>
</blockquote>
<h2 id="Stochastic-Unit-Commitment"><a href="#Stochastic-Unit-Commitment" class="headerlink" title="Stochastic Unit Commitment"></a>Stochastic Unit Commitment</h2><blockquote>
<ul>
<li>assumes that the system operator co-optimizes the dispatch of flexible loads and generation resources<br>假设系统操作员可以同时协调控制柔性负载与发电资源</li>
<li>two-stage decision model where the first stage represents day-ahead unit commitment and the second stage represents real-time economic dispatch in the hour-ahead market, in hourly intervals, subsequent to the realization of uncertainty<br>一个第一阶段表示日超前机组组合模型第二阶段表示由于不确定性的实现因而以一小时为间隔的时超前市场上的实时经济调度的二阶决策模型</li>
<li>操作员每小时能够计算出模型结果是基础</li>
</ul>
</blockquote>
<p><img src="/images/1.png" alt=""></p>
<blockquote>
<p><script type="math/tex">S</script>　　a discrete set of scenarios</p>
<p><script type="math/tex">G</script>　　set of gengrators</p>
<p><script type="math/tex">G_s</script>　　set of slow generators which commitment decisions are fixed in the day-ahead time frame <script type="math/tex">G_s\in G</script>, another part are fast generators that can adjust their commitment schedule in the second stage</p>
<p><script type="math/tex">w_{gt}</script>　　First-stage decisions</p>
<p><script type="math/tex">z_{gt}</script>　the binary unit commitment and startup decisions for slow generators</p>
<p><script type="math/tex">u_{gst}</script>　　the unit commitment of all generators</p>
<p><script type="math/tex">v_{gst}</script>　startup of all generators</p>
<p><script type="math/tex">p_{gst}</script>　　power output of all generators</p>
<p><script type="math/tex">e_{st}</script>　　The dispatch of deferrable loads (a second-stage decision variable)</p>
<p><script type="math/tex">S_{g}</script>　　startup cost for each generator</p>
<p><script type="math/tex">K_g</script>　　minimun load costs for each generator</p>
<p><script type="math/tex">C_g</script>　　constant fuel costs for each generator</p>
<p><script type="math/tex">D_{st}</script>　　net demand (the net of firm demand minus renewable power supply, represents the source of uncertainty)</p>
<p><script type="math/tex">\mathcal{D}</script>　　includes generator capacity constraints, ramping constraints, and minimum up and down times, where bold fonts indicate vectors.</p>
<ul>
<li>The objective function of (1) minimizes operating costs.</li>
<li>Power balance is enforced in (2).</li>
<li>The constraint of (3) requires that deferrable loads be supplied an amount of energy within a given time window.</li>
<li>(4) enforces a limit of on the consumption (e.g., charge) rate of deferrable loads.</li>
<li>The non-anticipativity constraints on first-stage decisions is enforced in (5).</li>
<li><strong>all generators, including slow units, can adjust their production level in the second stage</strong></li>
<li>The solution of the stochastic unit commitment model is described in detail by <a href="https://perso.uclouvain.be/anthony.papavasiliou/public_html/uctestV3.pdf" target="_blank" rel="noopener">Papavasiliou [37]</a></li>
</ul>
</blockquote>
<hr>
<blockquote>
<p>About scenario selection algorithm</p>
<ul>
<li>scenarios are selected according to their effect on expected cost and weighed such that their selection does not bias the objective function of the stochastic unit commitment formulation<br>场景是根据他们各自对于期望损耗的效果来权衡保证选择与随机机组组合模型的目标函数无关</li>
<li>The decomposition algorithm which is employed relies on a Lagrangian relaxation scheme for scenario decomposition.<br>分解算法基于<a href="http://baike.baidu.com/link?url=vzPK82hLesPPe4MA_lGK1bcpHJDPaelhQf4B3T_geYEJM1_WCUh7oQPo4r34y1it7ZDY56U_fE3Kh1FhlYGai_" target="_blank" rel="noopener">拉格朗日松弛算法</a></li>
<li>The centralized stochastic unit commitment model presented in this section presumes the ability of the system operator to centrally monitor and control individual loads.</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>电气工程</category>
      </categories>
      <tags>
        <tag>柔性建模</tag>
        <tag>可再生能源</tag>
        <tag>deferrable</tag>
        <tag>机组组合</tag>
      </tags>
  </entry>
</search>
